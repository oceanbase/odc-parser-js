// Generated from PLParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PLParserListener = require('./PLParserListener').PLParserListener;
var PLParserVisitor = require('./PLParserVisitor').PLParserVisitor;


const OBLexer = require('./OBLexer')     // You may modify this to import your OBLexer
const OBParser = require('./OBParser')   // You may modify this to import your OBParser

var grammarFileName = "PLParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u009c\u03cd\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u00b9\n",
    "\u0003\f\u0003\u000e\u0003\u00bc\u000b\u0003\u0003\u0004\u0005\u0004",
    "\u00bf\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00cc\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0007\u0007\u00d2\n\u0007\f\u0007\u000e\u0007\u00d5\u000b",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007",
    "\u0007\u00dc\n\u0007\f\u0007\u000e\u0007\u00df\u000b\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00e6\n",
    "\u0007\f\u0007\u000e\u0007\u00e9\u000b\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00f0\n\u0007\f\u0007",
    "\u000e\u0007\u00f3\u000b\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0007\u0007\u00f9\n\u0007\f\u0007\u000e\u0007\u00fc\u000b\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007",
    "\u0103\n\u0007\f\u0007\u000e\u0007\u0106\u000b\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u010c\n\u0007\f\u0007\u000e",
    "\u0007\u010f\u000b\u0007\u0003\u0007\u0005\u0007\u0112\n\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0005\b\u0120\n\b\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u0128\n\t\u0003\t\u0003\t\u0005\t\u012c\n\t",
    "\u0003\n\u0003\n\u0003\n\u0007\n\u0131\n\n\f\n\u000e\n\u0134\u000b\n",
    "\u0003\u000b\u0007\u000b\u0137\n\u000b\f\u000b\u000e\u000b\u013a\u000b",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0141",
    "\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0148\n\r\u0003",
    "\r\u0005\r\u014b\n\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0005\u000f\u0159\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u015f\n\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0165\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0173\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u0179\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0181\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0188\n",
    "\u0011\f\u0011\u000e\u0011\u018b\u000b\u0011\u0003\u0012\u0005\u0012",
    "\u018e\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u0196\n\u0013\f\u0013\u000e\u0013\u0199",
    "\u000b\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01a4\n",
    "\u0016\u0005\u0016\u01a6\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u01ab\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0007\u0017\u01b2\n\u0017\f\u0017\u000e\u0017\u01b5",
    "\u000b\u0017\u0003\u0018\u0003\u0018\u0005\u0018\u01b9\n\u0018\u0003",
    "\u0018\u0005\u0018\u01bc\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019",
    "\u01cc\n\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u01d8\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u01e0\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01e7\n\u001e",
    "\f\u001e\u000e\u001e\u01ea\u000b\u001e\u0003\u001f\u0003\u001f\u0005",
    "\u001f\u01ee\n\u001f\u0003 \u0003 \u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0005!\u01f8\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u0201\n\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u020f\n$\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0218\n%\u0003%\u0003%\u0003",
    "%\u0003&\u0006&\u021e\n&\r&\u000e&\u021f\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u022e",
    "\n)\u0003)\u0005)\u0231\n)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
    "*\u0005*\u0239\n*\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u0245\n,\f,\u000e,\u0248\u000b,\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0007-\u0251\n-\f-\u000e-\u0254",
    "\u000b-\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u025b\n.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u026e\n.\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00070\u0275\n0\f0\u000e0\u0278\u000b0\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00051\u0280\n1\u00032\u00032\u00052\u0284",
    "\n2\u00033\u00033\u00053\u0288\n3\u00033\u00033\u00034\u00034\u0003",
    "4\u00035\u00035\u00035\u00036\u00036\u00056\u0294\n6\u00036\u00036\u0005",
    "6\u0298\n6\u00036\u00036\u00036\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00078\u02a3\n8\f8\u000e8\u02a6\u000b8\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0007:\u02ad\n:\f:\u000e:\u02b0\u000b:\u0003;\u0007;\u02b3",
    "\n;\f;\u000e;\u02b6\u000b;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u02cd\n<\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u02d3\n=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003",
    "@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0005A\u02e2\nA\u0003A\u0003",
    "A\u0003B\u0003B\u0003B\u0003B\u0005B\u02ea\nB\u0003B\u0003B\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u02f2\nC\u0003C\u0005C\u02f5\nC\u0003C\u0005",
    "C\u02f8\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u0303\nC\u0003C\u0005C\u0306\nC\u0003C\u0005C\u0309\nC\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u0314",
    "\nC\u0003C\u0005C\u0317\nC\u0003C\u0005C\u031a\nC\u0003C\u0003C\u0003",
    "C\u0003C\u0005C\u0320\nC\u0003C\u0003C\u0003C\u0005C\u0325\nC\u0003",
    "C\u0005C\u0328\nC\u0003C\u0003C\u0003C\u0005C\u032d\nC\u0003C\u0005",
    "C\u0330\nC\u0003C\u0003C\u0003C\u0005C\u0335\nC\u0003C\u0003C\u0003",
    "C\u0005C\u033a\nC\u0003C\u0005C\u033d\nC\u0003C\u0003C\u0005C\u0341",
    "\nC\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u034a\n",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u0353\nC\u0003",
    "C\u0003C\u0003C\u0005C\u0358\nC\u0003C\u0005C\u035b\nC\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0005C\u0362\nC\u0003C\u0003C\u0003C\u0005C\u0367",
    "\nC\u0003C\u0005C\u036a\nC\u0005C\u036c\nC\u0003D\u0003D\u0003E\u0003",
    "E\u0003E\u0005E\u0373\nE\u0005E\u0375\nE\u0003F\u0003F\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u037e\nG\u0005G\u0380\nG\u0003H\u0003",
    "H\u0003I\u0003I\u0003I\u0003I\u0005I\u0388\nI\u0003J\u0003J\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0007K\u0391\nK\fK\u000eK\u0394\u000bK\u0003",
    "L\u0003L\u0003M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0005O\u039f",
    "\nO\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u03a8\n",
    "Q\u0003R\u0003R\u0005R\u03ac\nR\u0003R\u0003R\u0005R\u03b0\nR\u0003",
    "S\u0003S\u0005S\u03b4\nS\u0003T\u0003T\u0003T\u0007T\u03b9\nT\fT\u000e",
    "T\u03bc\u000bT\u0003U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0005",
    "V\u03c5\nV\u0003W\u0003W\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u000b\u00d3",
    "\u00dd\u00e7\u00f1\u00fa\u0104\u010d\u0138\u02b4\u0006,:VXZ\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u0002\u0011",
    "\u0004\u0002==\u0081\u0081\u0003\u0002\u0097\u0097\u0005\u0002,,//;",
    ";\u0003\u0002VW\u0004\u0002\u001b\u001bZZ\u0004\u0002\u0013\u0013$$",
    "\u0003\u0002rs\u0003\u0002\\`\u0003\u0002gi\u0003\u0002|}\u0004\u0002",
    "\u0082\u0082\u0098\u0098\u0004\u0002\u0086\u0086\u0098\u0098\u0005\u0002",
    "pp\u0086\u0086\u0098\u0098\u0003\u0002\u0084\u0085\n\u0002\t\n\f\f\u0010",
    "\u0012\u0018\u001856>>GGMM\u0002\u041a\u0002\u00b2\u0003\u0002\u0002",
    "\u0002\u0004\u00b5\u0003\u0002\u0002\u0002\u0006\u00be\u0003\u0002\u0002",
    "\u0002\b\u00cb\u0003\u0002\u0002\u0002\n\u00cd\u0003\u0002\u0002\u0002",
    "\f\u0111\u0003\u0002\u0002\u0002\u000e\u011f\u0003\u0002\u0002\u0002",
    "\u0010\u012b\u0003\u0002\u0002\u0002\u0012\u012d\u0003\u0002\u0002\u0002",
    "\u0014\u0138\u0003\u0002\u0002\u0002\u0016\u013d\u0003\u0002\u0002\u0002",
    "\u0018\u014a\u0003\u0002\u0002\u0002\u001a\u014c\u0003\u0002\u0002\u0002",
    "\u001c\u014e\u0003\u0002\u0002\u0002\u001e\u0168\u0003\u0002\u0002\u0002",
    " \u0184\u0003\u0002\u0002\u0002\"\u018d\u0003\u0002\u0002\u0002$\u0192",
    "\u0003\u0002\u0002\u0002&\u019a\u0003\u0002\u0002\u0002(\u019d\u0003",
    "\u0002\u0002\u0002*\u01aa\u0003\u0002\u0002\u0002,\u01ac\u0003\u0002",
    "\u0002\u0002.\u01bb\u0003\u0002\u0002\u00020\u01cb\u0003\u0002\u0002",
    "\u00022\u01cd\u0003\u0002\u0002\u00024\u01cf\u0003\u0002\u0002\u0002",
    "6\u01d1\u0003\u0002\u0002\u00028\u01d9\u0003\u0002\u0002\u0002:\u01e1",
    "\u0003\u0002\u0002\u0002<\u01ed\u0003\u0002\u0002\u0002>\u01ef\u0003",
    "\u0002\u0002\u0002@\u01f7\u0003\u0002\u0002\u0002B\u0200\u0003\u0002",
    "\u0002\u0002D\u0202\u0003\u0002\u0002\u0002F\u0207\u0003\u0002\u0002",
    "\u0002H\u0210\u0003\u0002\u0002\u0002J\u021d\u0003\u0002\u0002\u0002",
    "L\u0221\u0003\u0002\u0002\u0002N\u0226\u0003\u0002\u0002\u0002P\u0228",
    "\u0003\u0002\u0002\u0002R\u0234\u0003\u0002\u0002\u0002T\u023a\u0003",
    "\u0002\u0002\u0002V\u023c\u0003\u0002\u0002\u0002X\u0249\u0003\u0002",
    "\u0002\u0002Z\u026d\u0003\u0002\u0002\u0002\\\u026f\u0003\u0002\u0002",
    "\u0002^\u0271\u0003\u0002\u0002\u0002`\u027f\u0003\u0002\u0002\u0002",
    "b\u0283\u0003\u0002\u0002\u0002d\u0285\u0003\u0002\u0002\u0002f\u028b",
    "\u0003\u0002\u0002\u0002h\u028e\u0003\u0002\u0002\u0002j\u0291\u0003",
    "\u0002\u0002\u0002l\u029c\u0003\u0002\u0002\u0002n\u029f\u0003\u0002",
    "\u0002\u0002p\u02a7\u0003\u0002\u0002\u0002r\u02a9\u0003\u0002\u0002",
    "\u0002t\u02b4\u0003\u0002\u0002\u0002v\u02cc\u0003\u0002\u0002\u0002",
    "x\u02ce\u0003\u0002\u0002\u0002z\u02d4\u0003\u0002\u0002\u0002|\u02d7",
    "\u0003\u0002\u0002\u0002~\u02da\u0003\u0002\u0002\u0002\u0080\u02dd",
    "\u0003\u0002\u0002\u0002\u0082\u02e5\u0003\u0002\u0002\u0002\u0084\u036b",
    "\u0003\u0002\u0002\u0002\u0086\u036d\u0003\u0002\u0002\u0002\u0088\u0374",
    "\u0003\u0002\u0002\u0002\u008a\u0376\u0003\u0002\u0002\u0002\u008c\u037f",
    "\u0003\u0002\u0002\u0002\u008e\u0381\u0003\u0002\u0002\u0002\u0090\u0387",
    "\u0003\u0002\u0002\u0002\u0092\u0389\u0003\u0002\u0002\u0002\u0094\u038d",
    "\u0003\u0002\u0002\u0002\u0096\u0395\u0003\u0002\u0002\u0002\u0098\u0397",
    "\u0003\u0002\u0002\u0002\u009a\u0399\u0003\u0002\u0002\u0002\u009c\u039e",
    "\u0003\u0002\u0002\u0002\u009e\u03a0\u0003\u0002\u0002\u0002\u00a0\u03a3",
    "\u0003\u0002\u0002\u0002\u00a2\u03a9\u0003\u0002\u0002\u0002\u00a4\u03b3",
    "\u0003\u0002\u0002\u0002\u00a6\u03b5\u0003\u0002\u0002\u0002\u00a8\u03bd",
    "\u0003\u0002\u0002\u0002\u00aa\u03c4\u0003\u0002\u0002\u0002\u00ac\u03c6",
    "\u0003\u0002\u0002\u0002\u00ae\u03c8\u0003\u0002\u0002\u0002\u00b0\u03ca",
    "\u0003\u0002\u0002\u0002\u00b2\u00b3\u0005\u0004\u0003\u0002\u00b3\u00b4",
    "\u0007\u0002\u0002\u0003\u00b4\u0003\u0003\u0002\u0002\u0002\u00b5\u00ba",
    "\u0005\u0006\u0004\u0002\u00b6\u00b7\u0007\u0097\u0002\u0002\u00b7\u00b9",
    "\u0005\u0006\u0004\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b9\u00bc",
    "\u0003\u0002\u0002\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002\u00ba\u00bb",
    "\u0003\u0002\u0002\u0002\u00bb\u0005\u0003\u0002\u0002\u0002\u00bc\u00ba",
    "\u0003\u0002\u0002\u0002\u00bd\u00bf\u0005\b\u0005\u0002\u00be\u00bd",
    "\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u0007",
    "\u0003\u0002\u0002\u0002\u00c0\u00cc\u0005\u001c\u000f\u0002\u00c1\u00cc",
    "\u0005\u001e\u0010\u0002\u00c2\u00cc\u0005\u0080A\u0002\u00c3\u00cc",
    "\u0005\u0082B\u0002\u00c4\u00cc\u00056\u001c\u0002\u00c5\u00cc\u0005",
    "8\u001d\u0002\u00c6\u00cc\u0005\f\u0007\u0002\u00c7\u00cc\u0005\u0010",
    "\t\u0002\u00c8\u00cc\u0005\u000e\b\u0002\u00c9\u00cc\u0005\u00a0Q\u0002",
    "\u00ca\u00cc\u0005\u00a2R\u0002\u00cb\u00c0\u0003\u0002\u0002\u0002",
    "\u00cb\u00c1\u0003\u0002\u0002\u0002\u00cb\u00c2\u0003\u0002\u0002\u0002",
    "\u00cb\u00c3\u0003\u0002\u0002\u0002\u00cb\u00c4\u0003\u0002\u0002\u0002",
    "\u00cb\u00c5\u0003\u0002\u0002\u0002\u00cb\u00c6\u0003\u0002\u0002\u0002",
    "\u00cb\u00c7\u0003\u0002\u0002\u0002\u00cb\u00c8\u0003\u0002\u0002\u0002",
    "\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cb\u00ca\u0003\u0002\u0002\u0002",
    "\u00cc\t\u0003\u0002\u0002\u0002\u00cd\u00ce\t\u0002\u0002\u0002\u00ce",
    "\u000b\u0003\u0002\u0002\u0002\u00cf\u00d3\u0005\n\u0006\u0002\u00d0",
    "\u00d2\n\u0003\u0002\u0002\u00d1\u00d0\u0003\u0002\u0002\u0002\u00d2",
    "\u00d5\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d3",
    "\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d6\u0003\u0002\u0002\u0002\u00d5",
    "\u00d3\u0003\u0002\u0002\u0002\u00d6\u00d7\b\u0007\u0001\u0002\u00d7",
    "\u0112\u0003\u0002\u0002\u0002\u00d8\u00d9\u0007\u0015\u0002\u0002\u00d9",
    "\u00dd\u0005\n\u0006\u0002\u00da\u00dc\n\u0003\u0002\u0002\u00db\u00da",
    "\u0003\u0002\u0002\u0002\u00dc\u00df\u0003\u0002\u0002\u0002\u00dd\u00de",
    "\u0003\u0002\u0002\u0002\u00dd\u00db\u0003\u0002\u0002\u0002\u00de\u00e0",
    "\u0003\u0002\u0002\u0002\u00df\u00dd\u0003\u0002\u0002\u0002\u00e0\u00e1",
    "\b\u0007\u0001\u0002\u00e1\u0112\u0003\u0002\u0002\u0002\u00e2\u00e3",
    "\u0007\u001f\u0002\u0002\u00e3\u00e7\u0005\n\u0006\u0002\u00e4\u00e6",
    "\n\u0003\u0002\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e6\u00e9",
    "\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e7\u00e5",
    "\u0003\u0002\u0002\u0002\u00e8\u00ea\u0003\u0002\u0002\u0002\u00e9\u00e7",
    "\u0003\u0002\u0002\u0002\u00ea\u00eb\b\u0007\u0001\u0002\u00eb\u0112",
    "\u0003\u0002\u0002\u0002\u00ec\u00ed\u0007\u0003\u0002\u0002\u00ed\u00f1",
    "\u0005\n\u0006\u0002\u00ee\u00f0\n\u0003\u0002\u0002\u00ef\u00ee\u0003",
    "\u0002\u0002\u0002\u00f0\u00f3\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003",
    "\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f2\u00f4\u0003",
    "\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f4\u00f5\b",
    "\u0007\u0001\u0002\u00f5\u0112\u0003\u0002\u0002\u0002\u00f6\u00fa\u0007",
    "v\u0002\u0002\u00f7\u00f9\n\u0003\u0002\u0002\u00f8\u00f7\u0003\u0002",
    "\u0002\u0002\u00f9\u00fc\u0003\u0002\u0002\u0002\u00fa\u00fb\u0003\u0002",
    "\u0002\u0002\u00fa\u00f8\u0003\u0002\u0002\u0002\u00fb\u00fd\u0003\u0002",
    "\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fd\u0112\b\u0007",
    "\u0001\u0002\u00fe\u0112\u0007\u000e\u0002\u0002\u00ff\u0112\u0007F",
    "\u0002\u0002\u0100\u0104\u0007H\u0002\u0002\u0101\u0103\n\u0003\u0002",
    "\u0002\u0102\u0101\u0003\u0002\u0002\u0002\u0103\u0106\u0003\u0002\u0002",
    "\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0104\u0102\u0003\u0002\u0002",
    "\u0002\u0105\u0107\u0003\u0002\u0002\u0002\u0106\u0104\u0003\u0002\u0002",
    "\u0002\u0107\u0112\b\u0007\u0001\u0002\u0108\u0109\u0007\u008b\u0002",
    "\u0002\u0109\u010d\u0007H\u0002\u0002\u010a\u010c\n\u0003\u0002\u0002",
    "\u010b\u010a\u0003\u0002\u0002\u0002\u010c\u010f\u0003\u0002\u0002\u0002",
    "\u010d\u010e\u0003\u0002\u0002\u0002\u010d\u010b\u0003\u0002\u0002\u0002",
    "\u010e\u0110\u0003\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002\u0002",
    "\u0110\u0112\b\u0007\u0001\u0002\u0111\u00cf\u0003\u0002\u0002\u0002",
    "\u0111\u00d8\u0003\u0002\u0002\u0002\u0111\u00e2\u0003\u0002\u0002\u0002",
    "\u0111\u00ec\u0003\u0002\u0002\u0002\u0111\u00f6\u0003\u0002\u0002\u0002",
    "\u0111\u00fe\u0003\u0002\u0002\u0002\u0111\u00ff\u0003\u0002\u0002\u0002",
    "\u0111\u0100\u0003\u0002\u0002\u0002\u0111\u0108\u0003\u0002\u0002\u0002",
    "\u0112\r\u0003\u0002\u0002\u0002\u0113\u0114\u0007\u001d\u0002\u0002",
    "\u0114\u0120\u0005r:\u0002\u0115\u0116\u0007\u001d\u0002\u0002\u0116",
    "\u0120\u0005N(\u0002\u0117\u0118\u0007\u001e\u0002\u0002\u0118\u0120",
    "\u0005N(\u0002\u0119\u011a\u0007\u001d\u0002\u0002\u011a\u0120\u0005",
    "f4\u0002\u011b\u011c\u0007\u001d\u0002\u0002\u011c\u0120\u0005j6\u0002",
    "\u011d\u011e\u0007\u001d\u0002\u0002\u011e\u0120\u0005h5\u0002\u011f",
    "\u0113\u0003\u0002\u0002\u0002\u011f\u0115\u0003\u0002\u0002\u0002\u011f",
    "\u0117\u0003\u0002\u0002\u0002\u011f\u0119\u0003\u0002\u0002\u0002\u011f",
    "\u011b\u0003\u0002\u0002\u0002\u011f\u011d\u0003\u0002\u0002\u0002\u0120",
    "\u000f\u0003\u0002\u0002\u0002\u0121\u0122\u0007\b\u0002\u0002\u0122",
    "\u0127\u0005\u0018\r\u0002\u0123\u0124\u0007\u008b\u0002\u0002\u0124",
    "\u0125\u0005\u0012\n\u0002\u0125\u0126\u0007\u0089\u0002\u0002\u0126",
    "\u0128\u0003\u0002\u0002\u0002\u0127\u0123\u0003\u0002\u0002\u0002\u0127",
    "\u0128\u0003\u0002\u0002\u0002\u0128\u012c\u0003\u0002\u0002\u0002\u0129",
    "\u012a\u0007\b\u0002\u0002\u012a\u012c\u0005<\u001f\u0002\u012b\u0121",
    "\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u0011",
    "\u0003\u0002\u0002\u0002\u012d\u0132\u0005\u0014\u000b\u0002\u012e\u012f",
    "\u0007\u008c\u0002\u0002\u012f\u0131\u0005\u0014\u000b\u0002\u0130\u012e",
    "\u0003\u0002\u0002\u0002\u0131\u0134\u0003\u0002\u0002\u0002\u0132\u0130",
    "\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0013",
    "\u0003\u0002\u0002\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0135\u0137",
    "\n\u0003\u0002\u0002\u0136\u0135\u0003\u0002\u0002\u0002\u0137\u013a",
    "\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0138\u0136",
    "\u0003\u0002\u0002\u0002\u0139\u013b\u0003\u0002\u0002\u0002\u013a\u0138",
    "\u0003\u0002\u0002\u0002\u013b\u013c\b\u000b\u0001\u0002\u013c\u0015",
    "\u0003\u0002\u0002\u0002\u013d\u0140\u0005\u001a\u000e\u0002\u013e\u013f",
    "\u0007\u0088\u0002\u0002\u013f\u0141\u0005\u001a\u000e\u0002\u0140\u013e",
    "\u0003\u0002\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0017",
    "\u0003\u0002\u0002\u0002\u0142\u0143\u0005\u001a\u000e\u0002\u0143\u0144",
    "\u0007\u0088\u0002\u0002\u0144\u0147\u0005\u001a\u000e\u0002\u0145\u0146",
    "\u0007\u0088\u0002\u0002\u0146\u0148\u0005\u001a\u000e\u0002\u0147\u0145",
    "\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002\u0002\u0148\u014b",
    "\u0003\u0002\u0002\u0002\u0149\u014b\u0005\u001a\u000e\u0002\u014a\u0142",
    "\u0003\u0002\u0002\u0002\u014a\u0149\u0003\u0002\u0002\u0002\u014b\u0019",
    "\u0003\u0002\u0002\u0002\u014c\u014d\u0007\u0086\u0002\u0002\u014d\u001b",
    "\u0003\u0002\u0002\u0002\u014e\u0158\u0007\u0015\u0002\u0002\u014f\u0150",
    "\u0007\u001b\u0002\u0002\u0150\u0151\u0007\u0096\u0002\u0002\u0151\u0159",
    "\u0007\u0098\u0002\u0002\u0152\u0153\u0007\u001b\u0002\u0002\u0153\u0154",
    "\u0007\u0096\u0002\u0002\u0154\u0159\u0007\u0086\u0002\u0002\u0155\u0156",
    "\u0007\u001b\u0002\u0002\u0156\u0157\u0007\u0096\u0002\u0002\u0157\u0159",
    "\u0007\u0016\u0002\u0002\u0158\u014f\u0003\u0002\u0002\u0002\u0158\u0152",
    "\u0003\u0002\u0002\u0002\u0158\u0155\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b",
    "\u0007<\u0002\u0002\u015b\u015c\u0005\u0016\f\u0002\u015c\u015e\u0007",
    "\u008b\u0002\u0002\u015d\u015f\u0005 \u0011\u0002\u015e\u015d\u0003",
    "\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160\u0003",
    "\u0002\u0002\u0002\u0160\u0164\u0007\u0089\u0002\u0002\u0161\u0162\u0005",
    ",\u0017\u0002\u0162\u0163\u0005.\u0018\u0002\u0163\u0165\u0003\u0002",
    "\u0002\u0002\u0164\u0161\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002",
    "\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0167\u00052",
    "\u001a\u0002\u0167\u001d\u0003\u0002\u0002\u0002\u0168\u0172\u0007\u0015",
    "\u0002\u0002\u0169\u016a\u0007\u001b\u0002\u0002\u016a\u016b\u0007\u0096",
    "\u0002\u0002\u016b\u0173\u0007\u0098\u0002\u0002\u016c\u016d\u0007\u001b",
    "\u0002\u0002\u016d\u016e\u0007\u0096\u0002\u0002\u016e\u0173\u0007\u0086",
    "\u0002\u0002\u016f\u0170\u0007\u001b\u0002\u0002\u0170\u0171\u0007\u0096",
    "\u0002\u0002\u0171\u0173\u0007\u0016\u0002\u0002\u0172\u0169\u0003\u0002",
    "\u0002\u0002\u0172\u016c\u0003\u0002\u0002\u0002\u0172\u016f\u0003\u0002",
    "\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002",
    "\u0002\u0002\u0174\u0175\u0007)\u0002\u0002\u0175\u0176\u0005\u0016",
    "\f\u0002\u0176\u0178\u0007\u008b\u0002\u0002\u0177\u0179\u0005$\u0013",
    "\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002\u0002",
    "\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a\u017b\u0007\u0089\u0002",
    "\u0002\u017b\u017c\u0007E\u0002\u0002\u017c\u0180\u0005p9\u0002\u017d",
    "\u017e\u0005,\u0017\u0002\u017e\u017f\u0005.\u0018\u0002\u017f\u0181",
    "\u0003\u0002\u0002\u0002\u0180\u017d\u0003\u0002\u0002\u0002\u0180\u0181",
    "\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183",
    "\u00054\u001b\u0002\u0183\u001f\u0003\u0002\u0002\u0002\u0184\u0189",
    "\u0005\"\u0012\u0002\u0185\u0186\u0007\u008c\u0002\u0002\u0186\u0188",
    "\u0005\"\u0012\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u018b",
    "\u0003\u0002\u0002\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a",
    "\u0003\u0002\u0002\u0002\u018a!\u0003\u0002\u0002\u0002\u018b\u0189",
    "\u0003\u0002\u0002\u0002\u018c\u018e\t\u0004\u0002\u0002\u018d\u018c",
    "\u0003\u0002\u0002\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f",
    "\u0003\u0002\u0002\u0002\u018f\u0190\u0005\u001a\u000e\u0002\u0190\u0191",
    "\u0005(\u0015\u0002\u0191#\u0003\u0002\u0002\u0002\u0192\u0197\u0005",
    "&\u0014\u0002\u0193\u0194\u0007\u008c\u0002\u0002\u0194\u0196\u0005",
    "&\u0014\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0196\u0199\u0003",
    "\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002\u0002\u0197\u0198\u0003",
    "\u0002\u0002\u0002\u0198%\u0003\u0002\u0002\u0002\u0199\u0197\u0003",
    "\u0002\u0002\u0002\u019a\u019b\u0005\u001a\u000e\u0002\u019b\u019c\u0005",
    "(\u0015\u0002\u019c\'\u0003\u0002\u0002\u0002\u019d\u019e\u0005p9\u0002",
    "\u019e)\u0003\u0002\u0002\u0002\u019f\u01ab\u0007\u0086\u0002\u0002",
    "\u01a0\u01a1\u0007\u0086\u0002\u0002\u01a1\u01a6\u0007\u0088\u0002\u0002",
    "\u01a2\u01a4\u0007\u0088\u0002\u0002\u01a3\u01a2\u0003\u0002\u0002\u0002",
    "\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a6\u0003\u0002\u0002\u0002",
    "\u01a5\u01a0\u0003\u0002\u0002\u0002\u01a5\u01a3\u0003\u0002\u0002\u0002",
    "\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007\u0086\u0002\u0002",
    "\u01a8\u01a9\u0007\u0088\u0002\u0002\u01a9\u01ab\u0007\u0086\u0002\u0002",
    "\u01aa\u019f\u0003\u0002\u0002\u0002\u01aa\u01a5\u0003\u0002\u0002\u0002",
    "\u01ab+\u0003\u0002\u0002\u0002\u01ac\u01ad\b\u0017\u0001\u0002\u01ad",
    "\u01ae\u0005\u00b0Y\u0002\u01ae\u01b3\u0003\u0002\u0002\u0002\u01af",
    "\u01b0\f\u0003\u0002\u0002\u01b0\u01b2\u0005.\u0018\u0002\u01b1\u01af",
    "\u0003\u0002\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b1",
    "\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4-",
    "\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b6\u01bc",
    "\u00050\u0019\u0002\u01b7\u01b9\u00078\u0002\u0002\u01b8\u01b7\u0003",
    "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003",
    "\u0002\u0002\u0002\u01ba\u01bc\u0007\u001c\u0002\u0002\u01bb\u01b6\u0003",
    "\u0002\u0002\u0002\u01bb\u01b8\u0003\u0002\u0002\u0002\u01bc/\u0003",
    "\u0002\u0002\u0002\u01bd\u01be\u0007\r\u0002\u0002\u01be\u01cc\u0007",
    "\u0098\u0002\u0002\u01bf\u01c0\u0007R\u0002\u0002\u01c0\u01cc\u0007",
    "S\u0002\u0002\u01c1\u01c2\u0007T\u0002\u0002\u01c2\u01cc\u0007S\u0002",
    "\u0002\u01c3\u01c4\u0007U\u0002\u0002\u01c4\u01cc\u0007S\u0002\u0002",
    "\u01c5\u01c6\t\u0005\u0002\u0002\u01c6\u01c7\u0007S\u0002\u0002\u01c7",
    "\u01cc\u0007X\u0002\u0002\u01c8\u01c9\u0007S\u0002\u0002\u01c9\u01ca",
    "\u0007[\u0002\u0002\u01ca\u01cc\t\u0006\u0002\u0002\u01cb\u01bd\u0003",
    "\u0002\u0002\u0002\u01cb\u01bf\u0003\u0002\u0002\u0002\u01cb\u01c1\u0003",
    "\u0002\u0002\u0002\u01cb\u01c3\u0003\u0002\u0002\u0002\u01cb\u01c5\u0003",
    "\u0002\u0002\u0002\u01cb\u01c8\u0003\u0002\u0002\u0002\u01cc1\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\u0005<\u001f\u0002\u01ce3\u0003\u0002",
    "\u0002\u0002\u01cf\u01d0\u0005B\"\u0002\u01d05\u0003\u0002\u0002\u0002",
    "\u01d1\u01d2\u0007\u0003\u0002\u0002\u01d2\u01d3\u0007<\u0002\u0002",
    "\u01d3\u01d7\u0005\u0016\f\u0002\u01d4\u01d5\u0005:\u001e\u0002\u01d5",
    "\u01d6\u00050\u0019\u0002\u01d6\u01d8\u0003\u0002\u0002\u0002\u01d7",
    "\u01d4\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8",
    "7\u0003\u0002\u0002\u0002\u01d9\u01da\u0007\u0003\u0002\u0002\u01da",
    "\u01db\u0007)\u0002\u0002\u01db\u01df\u0005\u0016\f\u0002\u01dc\u01dd",
    "\u0005:\u001e\u0002\u01dd\u01de\u00050\u0019\u0002\u01de\u01e0\u0003",
    "\u0002\u0002\u0002\u01df\u01dc\u0003\u0002\u0002\u0002\u01df\u01e0\u0003",
    "\u0002\u0002\u0002\u01e09\u0003\u0002\u0002\u0002\u01e1\u01e2\b\u001e",
    "\u0001\u0002\u01e2\u01e3\u0005\u00b0Y\u0002\u01e3\u01e8\u0003\u0002",
    "\u0002\u0002\u01e4\u01e5\f\u0003\u0002\u0002\u01e5\u01e7\u00050\u0019",
    "\u0002\u01e6\u01e4\u0003\u0002\u0002\u0002\u01e7\u01ea\u0003\u0002\u0002",
    "\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002",
    "\u0002\u01e9;\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002",
    "\u0002\u01eb\u01ee\u0005> \u0002\u01ec\u01ee\u0005@!\u0002\u01ed\u01eb",
    "\u0003\u0002\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee=",
    "\u0003\u0002\u0002\u0002\u01ef\u01f0\u0005\b\u0005\u0002\u01f0?\u0003",
    "\u0002\u0002\u0002\u01f1\u01f8\u0005B\"\u0002\u01f2\u01f8\u0005|?\u0002",
    "\u01f3\u01f8\u0005~@\u0002\u01f4\u01f8\u0005f4\u0002\u01f5\u01f8\u0005",
    "j6\u0002\u01f6\u01f8\u0005h5\u0002\u01f7\u01f1\u0003\u0002\u0002\u0002",
    "\u01f7\u01f2\u0003\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002\u0002\u0002",
    "\u01f7\u01f4\u0003\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002",
    "\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f8A\u0003\u0002\u0002\u0002",
    "\u01f9\u0201\u0005D#\u0002\u01fa\u0201\u0005H%\u0002\u01fb\u0201\u0005",
    "N(\u0002\u01fc\u0201\u0005R*\u0002\u01fd\u0201\u0005v<\u0002\u01fe\u0201",
    "\u0005x=\u0002\u01ff\u0201\u0005z>\u0002\u0200\u01f9\u0003\u0002\u0002",
    "\u0002\u0200\u01fa\u0003\u0002\u0002\u0002\u0200\u01fb\u0003\u0002\u0002",
    "\u0002\u0200\u01fc\u0003\u0002\u0002\u0002\u0200\u01fd\u0003\u0002\u0002",
    "\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200\u01ff\u0003\u0002\u0002",
    "\u0002\u0201C\u0003\u0002\u0002\u0002\u0202\u0203\u0007+\u0002\u0002",
    "\u0203\u0204\u0005F$\u0002\u0204\u0205\u0007\"\u0002\u0002\u0205\u0206",
    "\u0007+\u0002\u0002\u0206E\u0003\u0002\u0002\u0002\u0207\u0208\u0005",
    "t;\u0002\u0208\u0209\u0007?\u0002\u0002\u0209\u020e\u0005V,\u0002\u020a",
    "\u020b\u0007!\u0002\u0002\u020b\u020f\u0005F$\u0002\u020c\u020d\u0007",
    " \u0002\u0002\u020d\u020f\u0005V,\u0002\u020e\u020a\u0003\u0002\u0002",
    "\u0002\u020e\u020c\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002",
    "\u0002\u020fG\u0003\u0002\u0002\u0002\u0210\u0211\u0007\u0007\u0002",
    "\u0002\u0211\u0212\u0005t;\u0002\u0212\u0217\u0005J&\u0002\u0213\u0214",
    "\u0007!\u0002\u0002\u0214\u0218\u0005F$\u0002\u0215\u0216\u0007 \u0002",
    "\u0002\u0216\u0218\u0005V,\u0002\u0217\u0213\u0003\u0002\u0002\u0002",
    "\u0217\u0215\u0003\u0002\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002",
    "\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0007\"\u0002\u0002",
    "\u021a\u021b\u0007\u0007\u0002\u0002\u021bI\u0003\u0002\u0002\u0002",
    "\u021c\u021e\u0005L\'\u0002\u021d\u021c\u0003\u0002\u0002\u0002\u021e",
    "\u021f\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f",
    "\u0220\u0003\u0002\u0002\u0002\u0220K\u0003\u0002\u0002\u0002\u0221",
    "\u0222\u0007P\u0002\u0002\u0222\u0223\u0005t;\u0002\u0223\u0224\u0007",
    "?\u0002\u0002\u0224\u0225\u0005V,\u0002\u0225M\u0003\u0002\u0002\u0002",
    "\u0226\u0227\u0005P)\u0002\u0227O\u0003\u0002\u0002\u0002\u0228\u022d",
    "\u0007\u0004\u0002\u0002\u0229\u022a\u0005X-\u0002\u022a\u022b\u0005",
    "Z.\u0002\u022b\u022c\u0007\u0097\u0002\u0002\u022c\u022e\u0003\u0002",
    "\u0002\u0002\u022d\u0229\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002",
    "\u0002\u0002\u022e\u0230\u0003\u0002\u0002\u0002\u022f\u0231\u0005V",
    ",\u0002\u0230\u022f\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0233\u0007\"",
    "\u0002\u0002\u0233Q\u0003\u0002\u0002\u0002\u0234\u0235\u0005T+\u0002",
    "\u0235\u0236\u0007\u0093\u0002\u0002\u0236\u0238\u0005P)\u0002\u0237",
    "\u0239\u0005T+\u0002\u0238\u0237\u0003\u0002\u0002\u0002\u0238\u0239",
    "\u0003\u0002\u0002\u0002\u0239S\u0003\u0002\u0002\u0002\u023a\u023b",
    "\u0005\u001a\u000e\u0002\u023bU\u0003\u0002\u0002\u0002\u023c\u023d",
    "\b,\u0001\u0002\u023d\u023e\u0005<\u001f\u0002\u023e\u023f\u0007\u0097",
    "\u0002\u0002\u023f\u0246\u0003\u0002\u0002\u0002\u0240\u0241\f\u0003",
    "\u0002\u0002\u0241\u0242\u0005<\u001f\u0002\u0242\u0243\u0007\u0097",
    "\u0002\u0002\u0243\u0245\u0003\u0002\u0002\u0002\u0244\u0240\u0003\u0002",
    "\u0002\u0002\u0245\u0248\u0003\u0002\u0002\u0002\u0246\u0244\u0003\u0002",
    "\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002\u0247W\u0003\u0002",
    "\u0002\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0249\u024a\b-\u0001",
    "\u0002\u024a\u024b\u0005\u00b0Y\u0002\u024b\u0252\u0003\u0002\u0002",
    "\u0002\u024c\u024d\f\u0003\u0002\u0002\u024d\u024e\u0005Z.\u0002\u024e",
    "\u024f\u0007\u0097\u0002\u0002\u024f\u0251\u0003\u0002\u0002\u0002\u0250",
    "\u024c\u0003\u0002\u0002\u0002\u0251\u0254\u0003\u0002\u0002\u0002\u0252",
    "\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253",
    "Y\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002\u0255",
    "\u0256\u0007\u0019\u0002\u0002\u0256\u0257\u0005n8\u0002\u0257\u025a",
    "\u0005p9\u0002\u0258\u0259\u0007\u001a\u0002\u0002\u0259\u025b\u0005",
    "t;\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002",
    "\u0002\u0002\u025b\u026e\u0003\u0002\u0002\u0002\u025c\u025d\u0007\u0019",
    "\u0002\u0002\u025d\u025e\u0007\u0086\u0002\u0002\u025e\u025f\u0007\u000f",
    "\u0002\u0002\u025f\u0260\u0007&\u0002\u0002\u0260\u026e\u0005b2\u0002",
    "\u0261\u0262\u0007\u0019\u0002\u0002\u0262\u0263\u0005\\/\u0002\u0263",
    "\u0264\u0007*\u0002\u0002\u0264\u0265\u0007&\u0002\u0002\u0265\u0266",
    "\u0005^0\u0002\u0266\u0267\u0005<\u001f\u0002\u0267\u026e\u0003\u0002",
    "\u0002\u0002\u0268\u0269\u0007\u0019\u0002\u0002\u0269\u026a\u0007\u0086",
    "\u0002\u0002\u026a\u026b\u0007\u0017\u0002\u0002\u026b\u026c\u0007&",
    "\u0002\u0002\u026c\u026e\u0005\f\u0007\u0002\u026d\u0255\u0003\u0002",
    "\u0002\u0002\u026d\u025c\u0003\u0002\u0002\u0002\u026d\u0261\u0003\u0002",
    "\u0002\u0002\u026d\u0268\u0003\u0002\u0002\u0002\u026e[\u0003\u0002",
    "\u0002\u0002\u026f\u0270\t\u0007\u0002\u0002\u0270]\u0003\u0002\u0002",
    "\u0002\u0271\u0276\u0005`1\u0002\u0272\u0273\u0007\u008c\u0002\u0002",
    "\u0273\u0275\u0005`1\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0275",
    "\u0278\u0003\u0002\u0002\u0002\u0276\u0274\u0003\u0002\u0002\u0002\u0276",
    "\u0277\u0003\u0002\u0002\u0002\u0277_\u0003\u0002\u0002\u0002\u0278",
    "\u0276\u0003\u0002\u0002\u0002\u0279\u0280\u0005b2\u0002\u027a\u0280",
    "\u0007\u0086\u0002\u0002\u027b\u0280\u0007L\u0002\u0002\u027c\u027d",
    "\u00078\u0002\u0002\u027d\u0280\u0007\'\u0002\u0002\u027e\u0280\u0007",
    "J\u0002\u0002\u027f\u0279\u0003\u0002\u0002\u0002\u027f\u027a\u0003",
    "\u0002\u0002\u0002\u027f\u027b\u0003\u0002\u0002\u0002\u027f\u027c\u0003",
    "\u0002\u0002\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u0280a\u0003",
    "\u0002\u0002\u0002\u0281\u0284\u0005\u008eH\u0002\u0282\u0284\u0005",
    "d3\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0282\u0003\u0002",
    "\u0002\u0002\u0284c\u0003\u0002\u0002\u0002\u0285\u0287\u0007K\u0002",
    "\u0002\u0286\u0288\u0007n\u0002\u0002\u0287\u0286\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002",
    "\u0002\u0289\u028a\u0007\u0098\u0002\u0002\u028ae\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0007:\u0002\u0002\u028c\u028d\u0007\u0086\u0002",
    "\u0002\u028dg\u0003\u0002\u0002\u0002\u028e\u028f\u0007\u000b\u0002",
    "\u0002\u028f\u0290\u0007\u0086\u0002\u0002\u0290i\u0003\u0002\u0002",
    "\u0002\u0291\u0297\u0007a\u0002\u0002\u0292\u0294\u0007(\u0002\u0002",
    "\u0293\u0292\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002\u0002\u0002",
    "\u0294\u0298\u0003\u0002\u0002\u0002\u0295\u0296\u00077\u0002\u0002",
    "\u0296\u0298\u0007(\u0002\u0002\u0297\u0293\u0003\u0002\u0002\u0002",
    "\u0297\u0295\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0007\u0086\u0002\u0002\u029a\u029b\u0005l7\u0002\u029b",
    "k\u0003\u0002\u0002\u0002\u029c\u029d\u0007-\u0002\u0002\u029d\u029e",
    "\u0005r:\u0002\u029em\u0003\u0002\u0002\u0002\u029f\u02a4\u0005\u001a",
    "\u000e\u0002\u02a0\u02a1\u0007\u008c\u0002\u0002\u02a1\u02a3\u0005\u001a",
    "\u000e\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a3\u02a6\u0003\u0002",
    "\u0002\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002",
    "\u0002\u0002\u02a5o\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002",
    "\u0002\u0002\u02a7\u02a8\u0005\u0084C\u0002\u02a8q\u0003\u0002\u0002",
    "\u0002\u02a9\u02ae\u0005t;\u0002\u02aa\u02ab\u0007\u008c\u0002\u0002",
    "\u02ab\u02ad\u0005t;\u0002\u02ac\u02aa\u0003\u0002\u0002\u0002\u02ad",
    "\u02b0\u0003\u0002\u0002\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0003\u0002\u0002\u0002\u02afs\u0003\u0002\u0002\u0002\u02b0",
    "\u02ae\u0003\u0002\u0002\u0002\u02b1\u02b3\n\u0003\u0002\u0002\u02b2",
    "\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b6\u0003\u0002\u0002\u0002\u02b4",
    "\u02b5\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b5",
    "\u02b7\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7",
    "\u02b8\b;\u0001\u0002\u02b8u\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007",
    "4\u0002\u0002\u02ba\u02bb\u0005V,\u0002\u02bb\u02bc\u0007\"\u0002\u0002",
    "\u02bc\u02bd\u00074\u0002\u0002\u02bd\u02cd\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\u0007Q\u0002\u0002\u02bf\u02c0\u0005t;\u0002\u02c0\u02c1",
    "\u0007\u001d\u0002\u0002\u02c1\u02c2\u0005V,\u0002\u02c2\u02c3\u0007",
    "\"\u0002\u0002\u02c3\u02c4\u0007Q\u0002\u0002\u02c4\u02cd\u0003\u0002",
    "\u0002\u0002\u02c5\u02c6\u0007B\u0002\u0002\u02c6\u02c7\u0005V,\u0002",
    "\u02c7\u02c8\u0007N\u0002\u0002\u02c8\u02c9\u0005t;\u0002\u02c9\u02ca",
    "\u0007\"\u0002\u0002\u02ca\u02cb\u0007B\u0002\u0002\u02cb\u02cd\u0003",
    "\u0002\u0002\u0002\u02cc\u02b9\u0003\u0002\u0002\u0002\u02cc\u02be\u0003",
    "\u0002\u0002\u0002\u02cc\u02c5\u0003\u0002\u0002\u0002\u02cdw\u0003",
    "\u0002\u0002\u0002\u02ce\u02cf\u0005T+\u0002\u02cf\u02d0\u0007\u0093",
    "\u0002\u0002\u02d0\u02d2\u0005v<\u0002\u02d1\u02d3\u0005T+\u0002\u02d2",
    "\u02d1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3",
    "y\u0003\u0002\u0002\u0002\u02d4\u02d5\u0007D\u0002\u0002\u02d5\u02d6",
    "\u0005t;\u0002\u02d6{\u0003\u0002\u0002\u0002\u02d7\u02d8\u00070\u0002",
    "\u0002\u02d8\u02d9\u0005T+\u0002\u02d9}\u0003\u0002\u0002\u0002\u02da",
    "\u02db\u00071\u0002\u0002\u02db\u02dc\u0005T+\u0002\u02dc\u007f\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0007\u001f\u0002\u0002\u02de\u02e1\u0007",
    "<\u0002\u0002\u02df\u02e0\u0007+\u0002\u0002\u02e0\u02e2\u0007#\u0002",
    "\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002",
    "\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e4\u0005\u0016\f",
    "\u0002\u02e4\u0081\u0003\u0002\u0002\u0002\u02e5\u02e6\u0007\u001f\u0002",
    "\u0002\u02e6\u02e9\u0007)\u0002\u0002\u02e7\u02e8\u0007+\u0002\u0002",
    "\u02e8\u02ea\u0007#\u0002\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002",
    "\u02e9\u02ea\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002",
    "\u02eb\u02ec\u0005\u0016\f\u0002\u02ec\u0083\u0003\u0002\u0002\u0002",
    "\u02ed\u02f1\u0005\u0086D\u0002\u02ee\u02ef\u0007\u008b\u0002\u0002",
    "\u02ef\u02f0\u0007|\u0002\u0002\u02f0\u02f2\u0007\u0089\u0002\u0002",
    "\u02f1\u02ee\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002",
    "\u02f2\u02f4\u0003\u0002\u0002\u0002\u02f3\u02f5\t\b\u0002\u0002\u02f4",
    "\u02f3\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5",
    "\u02f7\u0003\u0002\u0002\u0002\u02f6\u02f8\u0007t\u0002\u0002\u02f7",
    "\u02f6\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8",
    "\u036c\u0003\u0002\u0002\u0002\u02f9\u0302\u0005\u0088E\u0002\u02fa",
    "\u02fb\u0007\u008b\u0002\u0002\u02fb\u02fc\u0007|\u0002\u0002\u02fc",
    "\u02fd\u0007\u008c\u0002\u0002\u02fd\u02fe\u0007|\u0002\u0002\u02fe",
    "\u0303\u0007\u0089\u0002\u0002\u02ff\u0300\u0007\u008b\u0002\u0002\u0300",
    "\u0301\u0007|\u0002\u0002\u0301\u0303\u0007\u0089\u0002\u0002\u0302",
    "\u02fa\u0003\u0002\u0002\u0002\u0302\u02ff\u0003\u0002\u0002\u0002\u0302",
    "\u0303\u0003\u0002\u0002\u0002\u0303\u0305\u0003\u0002\u0002\u0002\u0304",
    "\u0306\t\b\u0002\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0305\u0306",
    "\u0003\u0002\u0002\u0002\u0306\u0308\u0003\u0002\u0002\u0002\u0307\u0309",
    "\u0007t\u0002\u0002\u0308\u0307\u0003\u0002\u0002\u0002\u0308\u0309",
    "\u0003\u0002\u0002\u0002\u0309\u036c\u0003\u0002\u0002\u0002\u030a\u0313",
    "\u0007e\u0002\u0002\u030b\u030c\u0007\u008b\u0002\u0002\u030c\u030d",
    "\u0007|\u0002\u0002\u030d\u030e\u0007\u008c\u0002\u0002\u030e\u030f",
    "\u0007|\u0002\u0002\u030f\u0314\u0007\u0089\u0002\u0002\u0310\u0311",
    "\u0007\u008b\u0002\u0002\u0311\u0312\u0007|\u0002\u0002\u0312\u0314",
    "\u0007\u0089\u0002\u0002\u0313\u030b\u0003\u0002\u0002\u0002\u0313\u0310",
    "\u0003\u0002\u0002\u0002\u0313\u0314\u0003\u0002\u0002\u0002\u0314\u0316",
    "\u0003\u0002\u0002\u0002\u0315\u0317\t\b\u0002\u0002\u0316\u0315\u0003",
    "\u0002\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317\u0319\u0003",
    "\u0002\u0002\u0002\u0318\u031a\u0007t\u0002\u0002\u0319\u0318\u0003",
    "\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u036c\u0003",
    "\u0002\u0002\u0002\u031b\u031f\u0005\u008aF\u0002\u031c\u031d\u0007",
    "\u008b\u0002\u0002\u031d\u031e\u0007|\u0002\u0002\u031e\u0320\u0007",
    "\u0089\u0002\u0002\u031f\u031c\u0003\u0002\u0002\u0002\u031f\u0320\u0003",
    "\u0002\u0002\u0002\u0320\u036c\u0003\u0002\u0002\u0002\u0321\u036c\u0005",
    "\u008cG\u0002\u0322\u0324\u0007l\u0002\u0002\u0323\u0325\u0005\u0092",
    "J\u0002\u0324\u0323\u0003\u0002\u0002\u0002\u0324\u0325\u0003\u0002",
    "\u0002\u0002\u0325\u0327\u0003\u0002\u0002\u0002\u0326\u0328\u0007p",
    "\u0002\u0002\u0327\u0326\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002",
    "\u0002\u0002\u0328\u032c\u0003\u0002\u0002\u0002\u0329\u032a\u0005\u009c",
    "O\u0002\u032a\u032b\u0005\u009aN\u0002\u032b\u032d\u0003\u0002\u0002",
    "\u0002\u032c\u0329\u0003\u0002\u0002\u0002\u032c\u032d\u0003\u0002\u0002",
    "\u0002\u032d\u032f\u0003\u0002\u0002\u0002\u032e\u0330\u0005\u009eP",
    "\u0002\u032f\u032e\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002",
    "\u0002\u0330\u036c\u0003\u0002\u0002\u0002\u0331\u0332\u0007o\u0002",
    "\u0002\u0332\u0334\u0005\u0092J\u0002\u0333\u0335\u0007p\u0002\u0002",
    "\u0334\u0333\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002",
    "\u0335\u0339\u0003\u0002\u0002\u0002\u0336\u0337\u0005\u009cO\u0002",
    "\u0337\u0338\u0005\u009aN\u0002\u0338\u033a\u0003\u0002\u0002\u0002",
    "\u0339\u0336\u0003\u0002\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002",
    "\u033a\u033c\u0003\u0002\u0002\u0002\u033b\u033d\u0005\u009eP\u0002",
    "\u033c\u033b\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002",
    "\u033d\u036c\u0003\u0002\u0002\u0002\u033e\u0340\u0007p\u0002\u0002",
    "\u033f\u0341\u0005\u0092J\u0002\u0340\u033f\u0003\u0002\u0002\u0002",
    "\u0340\u0341\u0003\u0002\u0002\u0002\u0341\u036c\u0003\u0002\u0002\u0002",
    "\u0342\u0343\u0007q\u0002\u0002\u0343\u036c\u0005\u0092J\u0002\u0344",
    "\u036c\u0007\u0098\u0002\u0002\u0345\u0349\u0007f\u0002\u0002\u0346",
    "\u0347\u0007\u008b\u0002\u0002\u0347\u0348\u0007|\u0002\u0002\u0348",
    "\u034a\u0007\u0089\u0002\u0002\u0349\u0346\u0003\u0002\u0002\u0002\u0349",
    "\u034a\u0003\u0002\u0002\u0002\u034a\u036c\u0003\u0002\u0002\u0002\u034b",
    "\u036c\u0007x\u0002\u0002\u034c\u036c\u0007y\u0002\u0002\u034d\u034e",
    "\u0007z\u0002\u0002\u034e\u034f\u0007\u008b\u0002\u0002\u034f\u0350",
    "\u0005\u0094K\u0002\u0350\u0352\u0007\u0089\u0002\u0002\u0351\u0353",
    "\u0007p\u0002\u0002\u0352\u0351\u0003\u0002\u0002\u0002\u0352\u0353",
    "\u0003\u0002\u0002\u0002\u0353\u0357\u0003\u0002\u0002\u0002\u0354\u0355",
    "\u0005\u009cO\u0002\u0355\u0356\u0005\u009aN\u0002\u0356\u0358\u0003",
    "\u0002\u0002\u0002\u0357\u0354\u0003\u0002\u0002\u0002\u0357\u0358\u0003",
    "\u0002\u0002\u0002\u0358\u035a\u0003\u0002\u0002\u0002\u0359\u035b\u0005",
    "\u009eP\u0002\u035a\u0359\u0003\u0002\u0002\u0002\u035a\u035b\u0003",
    "\u0002\u0002\u0002\u035b\u036c\u0003\u0002\u0002\u0002\u035c\u035d\u0007",
    "v\u0002\u0002\u035d\u035e\u0007\u008b\u0002\u0002\u035e\u035f\u0005",
    "\u0094K\u0002\u035f\u0361\u0007\u0089\u0002\u0002\u0360\u0362\u0007",
    "p\u0002\u0002\u0361\u0360\u0003\u0002\u0002\u0002\u0361\u0362\u0003",
    "\u0002\u0002\u0002\u0362\u0366\u0003\u0002\u0002\u0002\u0363\u0364\u0005",
    "\u009cO\u0002\u0364\u0365\u0005\u009aN\u0002\u0365\u0367\u0003\u0002",
    "\u0002\u0002\u0366\u0363\u0003\u0002\u0002\u0002\u0366\u0367\u0003\u0002",
    "\u0002\u0002\u0367\u0369\u0003\u0002\u0002\u0002\u0368\u036a\u0005\u009e",
    "P\u0002\u0369\u0368\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002",
    "\u0002\u0002\u036a\u036c\u0003\u0002\u0002\u0002\u036b\u02ed\u0003\u0002",
    "\u0002\u0002\u036b\u02f9\u0003\u0002\u0002\u0002\u036b\u030a\u0003\u0002",
    "\u0002\u0002\u036b\u031b\u0003\u0002\u0002\u0002\u036b\u0321\u0003\u0002",
    "\u0002\u0002\u036b\u0322\u0003\u0002\u0002\u0002\u036b\u0331\u0003\u0002",
    "\u0002\u0002\u036b\u033e\u0003\u0002\u0002\u0002\u036b\u0342\u0003\u0002",
    "\u0002\u0002\u036b\u0344\u0003\u0002\u0002\u0002\u036b\u0345\u0003\u0002",
    "\u0002\u0002\u036b\u034b\u0003\u0002\u0002\u0002\u036b\u034c\u0003\u0002",
    "\u0002\u0002\u036b\u034d\u0003\u0002\u0002\u0002\u036b\u035c\u0003\u0002",
    "\u0002\u0002\u036c\u0085\u0003\u0002\u0002\u0002\u036d\u036e\t\t\u0002",
    "\u0002\u036e\u0087\u0003\u0002\u0002\u0002\u036f\u0375\u0007b\u0002",
    "\u0002\u0370\u0372\u0007c\u0002\u0002\u0371\u0373\u0007d\u0002\u0002",
    "\u0372\u0371\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002",
    "\u0373\u0375\u0003\u0002\u0002\u0002\u0374\u036f\u0003\u0002\u0002\u0002",
    "\u0374\u0370\u0003\u0002\u0002\u0002\u0375\u0089\u0003\u0002\u0002\u0002",
    "\u0376\u0377\t\n\u0002\u0002\u0377\u008b\u0003\u0002\u0002\u0002\u0378",
    "\u0380\u0007j\u0002\u0002\u0379\u037d\u0007k\u0002\u0002\u037a\u037b",
    "\u0007\u008b\u0002\u0002\u037b\u037c\u0007|\u0002\u0002\u037c\u037e",
    "\u0007\u0089\u0002\u0002\u037d\u037a\u0003\u0002\u0002\u0002\u037d\u037e",
    "\u0003\u0002\u0002\u0002\u037e\u0380\u0003\u0002\u0002\u0002\u037f\u0378",
    "\u0003\u0002\u0002\u0002\u037f\u0379\u0003\u0002\u0002\u0002\u0380\u008d",
    "\u0003\u0002\u0002\u0002\u0381\u0382\t\u000b\u0002\u0002\u0382\u008f",
    "\u0003\u0002\u0002\u0002\u0383\u0388\u0005\u008eH\u0002\u0384\u0388",
    "\u0007\u0083\u0002\u0002\u0385\u0388\u0007\u0082\u0002\u0002\u0386\u0388",
    "\u0007{\u0002\u0002\u0387\u0383\u0003\u0002\u0002\u0002\u0387\u0384",
    "\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0386",
    "\u0003\u0002\u0002\u0002\u0388\u0091\u0003\u0002\u0002\u0002\u0389\u038a",
    "\u0007\u008b\u0002\u0002\u038a\u038b\u0005\u008eH\u0002\u038b\u038c",
    "\u0007\u0089\u0002\u0002\u038c\u0093\u0003\u0002\u0002\u0002\u038d\u0392",
    "\u0005\u0096L\u0002\u038e\u038f\u0007\u008c\u0002\u0002\u038f\u0391",
    "\u0005\u0096L\u0002\u0390\u038e\u0003\u0002\u0002\u0002\u0391\u0394",
    "\u0003\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002\u0002\u0392\u0393",
    "\u0003\u0002\u0002\u0002\u0393\u0095\u0003\u0002\u0002\u0002\u0394\u0392",
    "\u0003\u0002\u0002\u0002\u0395\u0396\t\f\u0002\u0002\u0396\u0097\u0003",
    "\u0002\u0002\u0002\u0397\u0398\t\r\u0002\u0002\u0398\u0099\u0003\u0002",
    "\u0002\u0002\u0399\u039a\t\u000e\u0002\u0002\u039a\u009b\u0003\u0002",
    "\u0002\u0002\u039b\u039f\u0007w\u0002\u0002\u039c\u039d\u0007l\u0002",
    "\u0002\u039d\u039f\u0007v\u0002\u0002\u039e\u039b\u0003\u0002\u0002",
    "\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u009d\u0003\u0002\u0002",
    "\u0002\u03a0\u03a1\u0007u\u0002\u0002\u03a1\u03a2\u0005\u0098M\u0002",
    "\u03a2\u009f\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007I\u0002\u0002",
    "\u03a4\u03a7\u0005\u00a4S\u0002\u03a5\u03a6\u0007v\u0002\u0002\u03a6",
    "\u03a8\u0005\u00a6T\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a7",
    "\u03a8\u0003\u0002\u0002\u0002\u03a8\u00a1\u0003\u0002\u0002\u0002\u03a9",
    "\u03ab\u0007C\u0002\u0002\u03aa\u03ac\u0005\u00a4S\u0002\u03ab\u03aa",
    "\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u03af",
    "\u0003\u0002\u0002\u0002\u03ad\u03ae\u0007v\u0002\u0002\u03ae\u03b0",
    "\u0005\u00a6T\u0002\u03af\u03ad\u0003\u0002\u0002\u0002\u03af\u03b0",
    "\u0003\u0002\u0002\u0002\u03b0\u00a3\u0003\u0002\u0002\u0002\u03b1\u03b4",
    "\u0007\u0086\u0002\u0002\u03b2\u03b4\u0005d3\u0002\u03b3\u03b1\u0003",
    "\u0002\u0002\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b4\u00a5\u0003",
    "\u0002\u0002\u0002\u03b5\u03ba\u0005\u00a8U\u0002\u03b6\u03b7\u0007",
    "\u008c\u0002\u0002\u03b7\u03b9\u0005\u00a8U\u0002\u03b8\u03b6\u0003",
    "\u0002\u0002\u0002\u03b9\u03bc\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003",
    "\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u00a7\u0003",
    "\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bd\u03be\u0005",
    "\u00aeX\u0002\u03be\u03bf\u0007\u0096\u0002\u0002\u03bf\u03c0\u0005",
    "\u00aaV\u0002\u03c0\u00a9\u0003\u0002\u0002\u0002\u03c1\u03c5\u0005",
    "\u0090I\u0002\u03c2\u03c5\u0005\u00acW\u0002\u03c3\u03c5\u0005*\u0016",
    "\u0002\u03c4\u03c1\u0003\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002",
    "\u0002\u03c4\u03c3\u0003\u0002\u0002\u0002\u03c5\u00ab\u0003\u0002\u0002",
    "\u0002\u03c6\u03c7\t\u000f\u0002\u0002\u03c7\u00ad\u0003\u0002\u0002",
    "\u0002\u03c8\u03c9\t\u0010\u0002\u0002\u03c9\u00af\u0003\u0002\u0002",
    "\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u00b1\u0003\u0002\u0002",
    "\u0002i\u00ba\u00be\u00cb\u00d3\u00dd\u00e7\u00f1\u00fa\u0104\u010d",
    "\u0111\u011f\u0127\u012b\u0132\u0138\u0140\u0147\u014a\u0158\u015e\u0164",
    "\u0172\u0178\u0180\u0189\u018d\u0197\u01a3\u01a5\u01aa\u01b3\u01b8\u01bb",
    "\u01cb\u01d7\u01df\u01e8\u01ed\u01f7\u0200\u020e\u0217\u021f\u022d\u0230",
    "\u0238\u0246\u0252\u025a\u026d\u0276\u027f\u0283\u0287\u0293\u0297\u02a4",
    "\u02ae\u02b4\u02cc\u02d2\u02e1\u02e9\u02f1\u02f4\u02f7\u0302\u0305\u0308",
    "\u0313\u0316\u0319\u031f\u0324\u0327\u032c\u032f\u0334\u0339\u033c\u0340",
    "\u0349\u0352\u0357\u035a\u0361\u0366\u0369\u036b\u0372\u0374\u037d\u037f",
    "\u0387\u0392\u039e\u03a7\u03ab\u03af\u03b3\u03ba\u03c4"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'='", "';'" ];

var symbolicNames = [ null, "ALTER", "BEGIN_KEY", "BINARY_INTEGER", "BY", 
                      "CASE", "CALL", "CATALOG_NAME", "CLASS_ORIGIN", "CLOSE", 
                      "COLUMN_NAME", "COMMENT", "COMMIT", "CONDITION", "CONSTRAINT_CATALOG", 
                      "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONTINUE", 
                      "COUNT", "CREATE", "CURRENT_USER", "CURSOR", "CURSOR_NAME", 
                      "DECLARE", "DEFAULT", "DEFINER", "DETERMINISTIC", 
                      "DO", "DD", "DROP", "ELSE", "ELSEIF", "END_KEY", "EXISTS", 
                      "EXIT", "EXTEND", "FOR", "FOUND", "FROM", "FUNCTION", 
                      "HANDLER", "IF", "IN", "INTO", "IS", "INOUT", "ITERATE", 
                      "LEAVE", "LIMIT", "LONG", "LOOP", "MESSAGE_TEXT", 
                      "MYSQL_ERRNO", "NEXT", "NOT", "OF", "OPEN", "OUT", 
                      "PROCEDURE", "TABLE", "TABLE_NAME", "THEN", "TYPE", 
                      "RECORD", "REPEAT", "RESIGNAL", "RETURN", "RETURNS", 
                      "ROLLBACK", "SCHEMA_NAME", "SELECT", "SIGNAL", "SQLEXCEPTION", 
                      "SQLSTATE", "SQLWARNING", "SUBCLASS_ORIGIN", "UNTIL", 
                      "USING", "WHEN", "WHILE", "LANGUAGE", "SQL", "NO", 
                      "CONTAINS", "READS", "MODIFIES", "DATA", "CONSTRAINT_ORIGIN", 
                      "INVOKER", "SECURITY", "TINYINT", "SMALLINT", "MEDIUMINT", 
                      "INTEGER", "BIGINT", "FETCH", "FLOAT", "DOUBLE", "PRECISION", 
                      "NUMBER", "BIT", "DATETIME", "TIMESTAMP", "TIME", 
                      "DATE", "YEAR", "CHARACTER", "TEXT", "VALUE", "VARCHAR", 
                      "BINARY", "VARBINARY", "UNSIGNED", "SIGNED", "ZEROFILL", 
                      "COLLATE", "SET", "CHARSET", "BOOL", "BOOLEAN", "ENUM", 
                      "NULLX", "INTNUM", "DECIMAL_VAL", "NUMERIC", "SQL_TOKEN", 
                      "PARSER_SYNTAX_ERROR", "SQL_KEYWORD", "HEX_STRING_VALUE", 
                      "DATE_VALUE", "SYSTEM_VARIABLE", "USER_VARIABLE", 
                      "IDENT", "Or", "Dot", "RightParen", "Minus", "LeftParen", 
                      "Comma", "Star", "Div", "Plus", "Not", "And", "Caret", 
                      "Colon", "Mod", "Tilde", "Equal", "DELIMITER", "STRING", 
                      "In_c_comment", "ANTLR_SKIP", "Blank", "SQL_TOKEN_OR_UNKNOWN" ];

var ruleNames =  [ "stmt_block", "stmt_list", "stmt", "outer_stmt", "sql_keyword", 
                   "sql_stmt", "do_sp_stmt", "call_sp_stmt", "opt_sp_cparams", 
                   "opt_cexpr", "sp_name", "sp_call_name", "ident", "create_procedure_stmt", 
                   "create_function_stmt", "sp_param_list", "sp_param", 
                   "sp_fparam_list", "sp_fparam", "param_type", "simple_ident", 
                   "opt_sp_create_chistics", "sp_create_chistic", "sp_chistic", 
                   "procedure_body", "function_body", "alter_procedure_stmt", 
                   "alter_function_stmt", "opt_sp_alter_chistics", "sp_proc_stmt", 
                   "sp_proc_outer_statement", "sp_proc_inner_statement", 
                   "sp_proc_independent_statement", "sp_proc_stmt_if", "sp_if", 
                   "sp_proc_stmt_case", "sp_when_list", "sp_when", "sp_unlabeled_block", 
                   "sp_block_content", "sp_labeled_block", "label_ident", 
                   "sp_proc_stmts", "opt_sp_decls", "sp_decl", "sp_handler_type", 
                   "sp_hcond_list", "sp_hcond", "sp_cond", "sqlstate", "sp_proc_stmt_open", 
                   "sp_proc_stmt_close", "sp_proc_stmt_fetch", "into_clause", 
                   "sp_decl_idents", "sp_data_type", "expr_list", "expr", 
                   "sp_unlabeled_control", "sp_labeled_control", "sp_proc_stmt_return", 
                   "sp_proc_stmt_iterate", "sp_proc_stmt_leave", "drop_procedure_stmt", 
                   "drop_function_stmt", "scalar_data_type", "int_type_i", 
                   "float_type_i", "datetime_type_i", "date_year_type_i", 
                   "number_literal", "literal", "string_length_i", "string_list", 
                   "text_string", "collation_name", "charset_name", "charset_key", 
                   "collation", "signal_stmt", "resignal_stmt", "signal_value", 
                   "signal_information_item_list", "signal_information_item", 
                   "signal_allowed_expr", "variable", "scond_info_item_name", 
                   "empty" ];

function PLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	PLParser.prototype.expr2endTokens = {
	    "sql_stmt": new Set([PLParser.DELIMITER]),
	    "opt_cexpr": new Set([PLParser.Comma, PLParser.RightParen]),
	    "expr": new Set([PLParser.INTO, PLParser.USING, PLParser.WHEN, PLParser.THEN, PLParser.DELIMITER,
	        PLParser.LIMIT, PLParser.Comma, PLParser.END_KEY, PLParser.DO]),

	}
	class PLErrorListener extends antlr4.error.ErrorListener {
	    syntaxError(recognizer, offendingSymbol, line, column, msg, err) {
	        // console.error("line " + line + ":" + column + " " + msg);
	        if (err != null) {
	            throw err;
	        }
	    }
	}

	PLParser.prototype.addMoreLAT = function(text, exprName) {
	    let leftParenCount = 0;
	    let rightParenCount = 0;
	    let inSingleQuote = false;
	    let inDoubleQuote = false;
		let inEscape = false;
	    for (let i = 0; i < text.length; i++) {
	    	const c = text[i];
	        if (inEscape) {
	            inEscape = false;
	            continue;
	        }
	        if (c === '\\' && (inDoubleQuote || inSingleQuote)) {
	            inEscape = true;
	            continue;
	        }
	        if (c === '\'' && !inDoubleQuote) {
	            inSingleQuote = !inSingleQuote;
	        }
	        if (c === '"' && !inSingleQuote) {
	            inDoubleQuote = !inDoubleQuote;
	        }
	        if (!inSingleQuote && !inDoubleQuote && c === '(') {
	            leftParenCount++;
	        } else if (!inSingleQuote && !inDoubleQuote && c === ')') {
	            rightParenCount++;
	        }
	    }
	    // Refer from obpl_oracle_read_sql_construct in pl_parser_oracle_mode.y
	    const endTokens = this.expr2endTokens[exprName]
	    let isBreak = leftParenCount === rightParenCount;
	    while (!isBreak) {
	        // get the next lookahead token
	        const _la = this._input.LA(1);
	        if (_la === PLParser.EOF) {
	            isBreak = true;
	            break;
	        }
	        if (leftParenCount === rightParenCount && endTokens.has(_la)) {
	            isBreak = true;
	            break;
	        } else if (_la === PLParser.LeftParen) {
	            leftParenCount++;
	        } else if (_la === PLParser.RightParen) {
	            rightParenCount++;
	        }
	        text += this._input.LT(1).text;
	        // match and consume the current lookahead token
	        this._errHandler.reportMatch(this);
	        this.consume();
	    }
	    return text;
	}

	function PLReportError(recognizer, e) {
	    this.beginErrorCondition(recognizer);
	    if (e instanceof antlr4.error.NoViableAltException) {
	        this.reportNoViableAlternative(recognizer, e);
	    } else if (e instanceof antlr4.error.InputMismatchException) {
	        this.reportInputMismatch(recognizer, e);
	    } else if (e instanceof antlr4.error.FailedPredicateException) {
	        this.reportFailedPredicate(recognizer, e);
	    } else {
	        console.log("unknown recognition error type: " + e.constructor.name);
	        console.log(e.stack);
	        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
	    }
	}

	function PLRecoverInline(recognizer) {
	    throw new antlr4.error.InputMismatchException(recognizer);
	}

	PLParser.prototype.ForwardSQL = function(ctx, exprName) {
	    if (this._skipSQLParser) {
			return;
		}
	    let text = this._input.getText(new antlr4.Interval(ctx.start, this._input.LT(-1)));
	    text = this.addMoreLAT(text, exprName);
	    const chars = new antlr4.InputStream(text);
	    const lexer = new OBLexer.OBLexer(chars);
	    const tokens = new antlr4.CommonTokenStream(lexer);
	    const parser = new OBParser.OBParser(tokens);
	    parser.removeErrorListeners();
	    parser.addErrorListener(new PLErrorListener());
	    parser._errHandler.reportError = PLReportError;
	    parser._errHandler.recoverInline = PLRecoverInline;
	    parser.is_pl_parse_ = true;
	    parser.is_pl_parse_expr_ = false;
	    while(ctx.getChildCount() !== 0) {
	        ctx.removeLastChild();
	    }
	    ctx.addChild(parser.forward_sql_stmt());
	}


	PLParser.prototype.ForwardExpr = function(ctx, exprName) {
	    if (this._skipSQLParser) {
			return;
		}
	    let text = this._input.getText(new antlr4.Interval(ctx.start, this._input.LT(-1)));
	    if (text.length === 0) {
	        return;
	    }
	    text = this.addMoreLAT(text, exprName);
	    const chars = new antlr4.InputStream(text);
	    const lexer = new OBLexer.OBLexer(chars);
	    const tokens = new antlr4.CommonTokenStream(lexer);
	    const parser = new OBParser.OBParser(tokens);
	    parser.removeErrorListeners();
	    parser.addErrorListener(new PLErrorListener());
	    parser._errHandler.reportError = PLReportError;
	    parser._errHandler.recoverInline = PLRecoverInline;
	    parser.is_pl_parse_ = true;
	    parser.is_pl_parse_expr_ = true;
	    while(ctx.getChildCount() !== 0) {
	        ctx.removeLastChild();
	    }
	    ctx.addChild(parser.forward_expr());
	}

    return this;
}

PLParser.prototype = Object.create(antlr4.Parser.prototype);
PLParser.prototype.constructor = PLParser;

Object.defineProperty(PLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PLParser.EOF = antlr4.Token.EOF;
PLParser.ALTER = 1;
PLParser.BEGIN_KEY = 2;
PLParser.BINARY_INTEGER = 3;
PLParser.BY = 4;
PLParser.CASE = 5;
PLParser.CALL = 6;
PLParser.CATALOG_NAME = 7;
PLParser.CLASS_ORIGIN = 8;
PLParser.CLOSE = 9;
PLParser.COLUMN_NAME = 10;
PLParser.COMMENT = 11;
PLParser.COMMIT = 12;
PLParser.CONDITION = 13;
PLParser.CONSTRAINT_CATALOG = 14;
PLParser.CONSTRAINT_NAME = 15;
PLParser.CONSTRAINT_SCHEMA = 16;
PLParser.CONTINUE = 17;
PLParser.COUNT = 18;
PLParser.CREATE = 19;
PLParser.CURRENT_USER = 20;
PLParser.CURSOR = 21;
PLParser.CURSOR_NAME = 22;
PLParser.DECLARE = 23;
PLParser.DEFAULT = 24;
PLParser.DEFINER = 25;
PLParser.DETERMINISTIC = 26;
PLParser.DO = 27;
PLParser.DD = 28;
PLParser.DROP = 29;
PLParser.ELSE = 30;
PLParser.ELSEIF = 31;
PLParser.END_KEY = 32;
PLParser.EXISTS = 33;
PLParser.EXIT = 34;
PLParser.EXTEND = 35;
PLParser.FOR = 36;
PLParser.FOUND = 37;
PLParser.FROM = 38;
PLParser.FUNCTION = 39;
PLParser.HANDLER = 40;
PLParser.IF = 41;
PLParser.IN = 42;
PLParser.INTO = 43;
PLParser.IS = 44;
PLParser.INOUT = 45;
PLParser.ITERATE = 46;
PLParser.LEAVE = 47;
PLParser.LIMIT = 48;
PLParser.LONG = 49;
PLParser.LOOP = 50;
PLParser.MESSAGE_TEXT = 51;
PLParser.MYSQL_ERRNO = 52;
PLParser.NEXT = 53;
PLParser.NOT = 54;
PLParser.OF = 55;
PLParser.OPEN = 56;
PLParser.OUT = 57;
PLParser.PROCEDURE = 58;
PLParser.TABLE = 59;
PLParser.TABLE_NAME = 60;
PLParser.THEN = 61;
PLParser.TYPE = 62;
PLParser.RECORD = 63;
PLParser.REPEAT = 64;
PLParser.RESIGNAL = 65;
PLParser.RETURN = 66;
PLParser.RETURNS = 67;
PLParser.ROLLBACK = 68;
PLParser.SCHEMA_NAME = 69;
PLParser.SELECT = 70;
PLParser.SIGNAL = 71;
PLParser.SQLEXCEPTION = 72;
PLParser.SQLSTATE = 73;
PLParser.SQLWARNING = 74;
PLParser.SUBCLASS_ORIGIN = 75;
PLParser.UNTIL = 76;
PLParser.USING = 77;
PLParser.WHEN = 78;
PLParser.WHILE = 79;
PLParser.LANGUAGE = 80;
PLParser.SQL = 81;
PLParser.NO = 82;
PLParser.CONTAINS = 83;
PLParser.READS = 84;
PLParser.MODIFIES = 85;
PLParser.DATA = 86;
PLParser.CONSTRAINT_ORIGIN = 87;
PLParser.INVOKER = 88;
PLParser.SECURITY = 89;
PLParser.TINYINT = 90;
PLParser.SMALLINT = 91;
PLParser.MEDIUMINT = 92;
PLParser.INTEGER = 93;
PLParser.BIGINT = 94;
PLParser.FETCH = 95;
PLParser.FLOAT = 96;
PLParser.DOUBLE = 97;
PLParser.PRECISION = 98;
PLParser.NUMBER = 99;
PLParser.BIT = 100;
PLParser.DATETIME = 101;
PLParser.TIMESTAMP = 102;
PLParser.TIME = 103;
PLParser.DATE = 104;
PLParser.YEAR = 105;
PLParser.CHARACTER = 106;
PLParser.TEXT = 107;
PLParser.VALUE = 108;
PLParser.VARCHAR = 109;
PLParser.BINARY = 110;
PLParser.VARBINARY = 111;
PLParser.UNSIGNED = 112;
PLParser.SIGNED = 113;
PLParser.ZEROFILL = 114;
PLParser.COLLATE = 115;
PLParser.SET = 116;
PLParser.CHARSET = 117;
PLParser.BOOL = 118;
PLParser.BOOLEAN = 119;
PLParser.ENUM = 120;
PLParser.NULLX = 121;
PLParser.INTNUM = 122;
PLParser.DECIMAL_VAL = 123;
PLParser.NUMERIC = 124;
PLParser.SQL_TOKEN = 125;
PLParser.PARSER_SYNTAX_ERROR = 126;
PLParser.SQL_KEYWORD = 127;
PLParser.HEX_STRING_VALUE = 128;
PLParser.DATE_VALUE = 129;
PLParser.SYSTEM_VARIABLE = 130;
PLParser.USER_VARIABLE = 131;
PLParser.IDENT = 132;
PLParser.Or = 133;
PLParser.Dot = 134;
PLParser.RightParen = 135;
PLParser.Minus = 136;
PLParser.LeftParen = 137;
PLParser.Comma = 138;
PLParser.Star = 139;
PLParser.Div = 140;
PLParser.Plus = 141;
PLParser.Not = 142;
PLParser.And = 143;
PLParser.Caret = 144;
PLParser.Colon = 145;
PLParser.Mod = 146;
PLParser.Tilde = 147;
PLParser.Equal = 148;
PLParser.DELIMITER = 149;
PLParser.STRING = 150;
PLParser.In_c_comment = 151;
PLParser.ANTLR_SKIP = 152;
PLParser.Blank = 153;
PLParser.SQL_TOKEN_OR_UNKNOWN = 154;

PLParser.RULE_stmt_block = 0;
PLParser.RULE_stmt_list = 1;
PLParser.RULE_stmt = 2;
PLParser.RULE_outer_stmt = 3;
PLParser.RULE_sql_keyword = 4;
PLParser.RULE_sql_stmt = 5;
PLParser.RULE_do_sp_stmt = 6;
PLParser.RULE_call_sp_stmt = 7;
PLParser.RULE_opt_sp_cparams = 8;
PLParser.RULE_opt_cexpr = 9;
PLParser.RULE_sp_name = 10;
PLParser.RULE_sp_call_name = 11;
PLParser.RULE_ident = 12;
PLParser.RULE_create_procedure_stmt = 13;
PLParser.RULE_create_function_stmt = 14;
PLParser.RULE_sp_param_list = 15;
PLParser.RULE_sp_param = 16;
PLParser.RULE_sp_fparam_list = 17;
PLParser.RULE_sp_fparam = 18;
PLParser.RULE_param_type = 19;
PLParser.RULE_simple_ident = 20;
PLParser.RULE_opt_sp_create_chistics = 21;
PLParser.RULE_sp_create_chistic = 22;
PLParser.RULE_sp_chistic = 23;
PLParser.RULE_procedure_body = 24;
PLParser.RULE_function_body = 25;
PLParser.RULE_alter_procedure_stmt = 26;
PLParser.RULE_alter_function_stmt = 27;
PLParser.RULE_opt_sp_alter_chistics = 28;
PLParser.RULE_sp_proc_stmt = 29;
PLParser.RULE_sp_proc_outer_statement = 30;
PLParser.RULE_sp_proc_inner_statement = 31;
PLParser.RULE_sp_proc_independent_statement = 32;
PLParser.RULE_sp_proc_stmt_if = 33;
PLParser.RULE_sp_if = 34;
PLParser.RULE_sp_proc_stmt_case = 35;
PLParser.RULE_sp_when_list = 36;
PLParser.RULE_sp_when = 37;
PLParser.RULE_sp_unlabeled_block = 38;
PLParser.RULE_sp_block_content = 39;
PLParser.RULE_sp_labeled_block = 40;
PLParser.RULE_label_ident = 41;
PLParser.RULE_sp_proc_stmts = 42;
PLParser.RULE_opt_sp_decls = 43;
PLParser.RULE_sp_decl = 44;
PLParser.RULE_sp_handler_type = 45;
PLParser.RULE_sp_hcond_list = 46;
PLParser.RULE_sp_hcond = 47;
PLParser.RULE_sp_cond = 48;
PLParser.RULE_sqlstate = 49;
PLParser.RULE_sp_proc_stmt_open = 50;
PLParser.RULE_sp_proc_stmt_close = 51;
PLParser.RULE_sp_proc_stmt_fetch = 52;
PLParser.RULE_into_clause = 53;
PLParser.RULE_sp_decl_idents = 54;
PLParser.RULE_sp_data_type = 55;
PLParser.RULE_expr_list = 56;
PLParser.RULE_expr = 57;
PLParser.RULE_sp_unlabeled_control = 58;
PLParser.RULE_sp_labeled_control = 59;
PLParser.RULE_sp_proc_stmt_return = 60;
PLParser.RULE_sp_proc_stmt_iterate = 61;
PLParser.RULE_sp_proc_stmt_leave = 62;
PLParser.RULE_drop_procedure_stmt = 63;
PLParser.RULE_drop_function_stmt = 64;
PLParser.RULE_scalar_data_type = 65;
PLParser.RULE_int_type_i = 66;
PLParser.RULE_float_type_i = 67;
PLParser.RULE_datetime_type_i = 68;
PLParser.RULE_date_year_type_i = 69;
PLParser.RULE_number_literal = 70;
PLParser.RULE_literal = 71;
PLParser.RULE_string_length_i = 72;
PLParser.RULE_string_list = 73;
PLParser.RULE_text_string = 74;
PLParser.RULE_collation_name = 75;
PLParser.RULE_charset_name = 76;
PLParser.RULE_charset_key = 77;
PLParser.RULE_collation = 78;
PLParser.RULE_signal_stmt = 79;
PLParser.RULE_resignal_stmt = 80;
PLParser.RULE_signal_value = 81;
PLParser.RULE_signal_information_item_list = 82;
PLParser.RULE_signal_information_item = 83;
PLParser.RULE_signal_allowed_expr = 84;
PLParser.RULE_variable = 85;
PLParser.RULE_scond_info_item_name = 86;
PLParser.RULE_empty = 87;


function Stmt_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_stmt_block;
    return this;
}

Stmt_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stmt_blockContext.prototype.constructor = Stmt_blockContext;

Stmt_blockContext.prototype.stmt_list = function() {
    return this.getTypedRuleContext(Stmt_listContext,0);
};

Stmt_blockContext.prototype.EOF = function() {
    return this.getToken(PLParser.EOF, 0);
};

Stmt_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterStmt_block(this);
	}
};

Stmt_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitStmt_block(this);
	}
};

Stmt_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitStmt_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Stmt_blockContext = Stmt_blockContext;

PLParser.prototype.stmt_block = function() {

    var localctx = new Stmt_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PLParser.RULE_stmt_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this.stmt_list();
        this.state = 177;
        this.match(PLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Stmt_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_stmt_list;
    return this;
}

Stmt_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stmt_listContext.prototype.constructor = Stmt_listContext;

Stmt_listContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

Stmt_listContext.prototype.DELIMITER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.DELIMITER);
    } else {
        return this.getToken(PLParser.DELIMITER, i);
    }
};


Stmt_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterStmt_list(this);
	}
};

Stmt_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitStmt_list(this);
	}
};

Stmt_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitStmt_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Stmt_listContext = Stmt_listContext;

PLParser.prototype.stmt_list = function() {

    var localctx = new Stmt_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PLParser.RULE_stmt_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this.stmt();
        this.state = 184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.DELIMITER) {
            this.state = 180;
            this.match(PLParser.DELIMITER);
            this.state = 181;
            this.stmt();
            this.state = 186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.outer_stmt = function() {
    return this.getTypedRuleContext(Outer_stmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.StmtContext = StmtContext;

PLParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PLParser.RULE_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLParser.ALTER) | (1 << PLParser.CALL) | (1 << PLParser.COMMIT) | (1 << PLParser.CREATE) | (1 << PLParser.DO) | (1 << PLParser.DD) | (1 << PLParser.DROP))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (PLParser.TABLE - 59)) | (1 << (PLParser.RESIGNAL - 59)) | (1 << (PLParser.ROLLBACK - 59)) | (1 << (PLParser.SELECT - 59)) | (1 << (PLParser.SIGNAL - 59)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (PLParser.SET - 116)) | (1 << (PLParser.SQL_KEYWORD - 116)) | (1 << (PLParser.LeftParen - 116)))) !== 0)) {
            this.state = 187;
            this.outer_stmt();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Outer_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_outer_stmt;
    return this;
}

Outer_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Outer_stmtContext.prototype.constructor = Outer_stmtContext;

Outer_stmtContext.prototype.create_procedure_stmt = function() {
    return this.getTypedRuleContext(Create_procedure_stmtContext,0);
};

Outer_stmtContext.prototype.create_function_stmt = function() {
    return this.getTypedRuleContext(Create_function_stmtContext,0);
};

Outer_stmtContext.prototype.drop_procedure_stmt = function() {
    return this.getTypedRuleContext(Drop_procedure_stmtContext,0);
};

Outer_stmtContext.prototype.drop_function_stmt = function() {
    return this.getTypedRuleContext(Drop_function_stmtContext,0);
};

Outer_stmtContext.prototype.alter_procedure_stmt = function() {
    return this.getTypedRuleContext(Alter_procedure_stmtContext,0);
};

Outer_stmtContext.prototype.alter_function_stmt = function() {
    return this.getTypedRuleContext(Alter_function_stmtContext,0);
};

Outer_stmtContext.prototype.sql_stmt = function() {
    return this.getTypedRuleContext(Sql_stmtContext,0);
};

Outer_stmtContext.prototype.call_sp_stmt = function() {
    return this.getTypedRuleContext(Call_sp_stmtContext,0);
};

Outer_stmtContext.prototype.do_sp_stmt = function() {
    return this.getTypedRuleContext(Do_sp_stmtContext,0);
};

Outer_stmtContext.prototype.signal_stmt = function() {
    return this.getTypedRuleContext(Signal_stmtContext,0);
};

Outer_stmtContext.prototype.resignal_stmt = function() {
    return this.getTypedRuleContext(Resignal_stmtContext,0);
};

Outer_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOuter_stmt(this);
	}
};

Outer_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOuter_stmt(this);
	}
};

Outer_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOuter_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Outer_stmtContext = Outer_stmtContext;

PLParser.prototype.outer_stmt = function() {

    var localctx = new Outer_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PLParser.RULE_outer_stmt);
    try {
        this.state = 201;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 190;
            this.create_procedure_stmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 191;
            this.create_function_stmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 192;
            this.drop_procedure_stmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 193;
            this.drop_function_stmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 194;
            this.alter_procedure_stmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 195;
            this.alter_function_stmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 196;
            this.sql_stmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 197;
            this.call_sp_stmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 198;
            this.do_sp_stmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 199;
            this.signal_stmt();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 200;
            this.resignal_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sql_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sql_keyword;
    return this;
}

Sql_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_keywordContext.prototype.constructor = Sql_keywordContext;

Sql_keywordContext.prototype.SQL_KEYWORD = function() {
    return this.getToken(PLParser.SQL_KEYWORD, 0);
};

Sql_keywordContext.prototype.TABLE = function() {
    return this.getToken(PLParser.TABLE, 0);
};

Sql_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSql_keyword(this);
	}
};

Sql_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSql_keyword(this);
	}
};

Sql_keywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSql_keyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sql_keywordContext = Sql_keywordContext;

PLParser.prototype.sql_keyword = function() {

    var localctx = new Sql_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PLParser.RULE_sql_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 203;
        _la = this._input.LA(1);
        if(!(_la===PLParser.TABLE || _la===PLParser.SQL_KEYWORD)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sql_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sql_stmt;
    return this;
}

Sql_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_stmtContext.prototype.constructor = Sql_stmtContext;

Sql_stmtContext.prototype.sql_keyword = function() {
    return this.getTypedRuleContext(Sql_keywordContext,0);
};

Sql_stmtContext.prototype.DELIMITER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.DELIMITER);
    } else {
        return this.getToken(PLParser.DELIMITER, i);
    }
};


Sql_stmtContext.prototype.CREATE = function() {
    return this.getToken(PLParser.CREATE, 0);
};

Sql_stmtContext.prototype.DROP = function() {
    return this.getToken(PLParser.DROP, 0);
};

Sql_stmtContext.prototype.ALTER = function() {
    return this.getToken(PLParser.ALTER, 0);
};

Sql_stmtContext.prototype.SET = function() {
    return this.getToken(PLParser.SET, 0);
};

Sql_stmtContext.prototype.COMMIT = function() {
    return this.getToken(PLParser.COMMIT, 0);
};

Sql_stmtContext.prototype.ROLLBACK = function() {
    return this.getToken(PLParser.ROLLBACK, 0);
};

Sql_stmtContext.prototype.SELECT = function() {
    return this.getToken(PLParser.SELECT, 0);
};

Sql_stmtContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Sql_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSql_stmt(this);
	}
};

Sql_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSql_stmt(this);
	}
};

Sql_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSql_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sql_stmtContext = Sql_stmtContext;

PLParser.prototype.sql_stmt = function() {

    var localctx = new Sql_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PLParser.RULE_sql_stmt);
    var _la = 0; // Token type
    try {
        this.state = 271;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.TABLE:
        case PLParser.SQL_KEYWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 205;
            this.sql_keyword();
            this.state = 209;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 206;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 211;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.CREATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 214;
            this.match(PLParser.CREATE);
            this.state = 215;
            this.sql_keyword();
            this.state = 219;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 216;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 221;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.DROP:
            this.enterOuterAlt(localctx, 3);
            this.state = 224;
            this.match(PLParser.DROP);
            this.state = 225;
            this.sql_keyword();
            this.state = 229;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 226;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 231;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.ALTER:
            this.enterOuterAlt(localctx, 4);
            this.state = 234;
            this.match(PLParser.ALTER);
            this.state = 235;
            this.sql_keyword();
            this.state = 239;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 236;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 241;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.SET:
            this.enterOuterAlt(localctx, 5);
            this.state = 244;
            this.match(PLParser.SET);
            this.state = 248;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 245;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 250;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.COMMIT:
            this.enterOuterAlt(localctx, 6);
            this.state = 252;
            this.match(PLParser.COMMIT);
            break;
        case PLParser.ROLLBACK:
            this.enterOuterAlt(localctx, 7);
            this.state = 253;
            this.match(PLParser.ROLLBACK);
            break;
        case PLParser.SELECT:
            this.enterOuterAlt(localctx, 8);
            this.state = 254;
            this.match(PLParser.SELECT);
            this.state = 258;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 255;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 260;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        case PLParser.LeftParen:
            this.enterOuterAlt(localctx, 9);
            this.state = 262;
            this.match(PLParser.LeftParen);
            this.state = 263;
            this.match(PLParser.SELECT);
            this.state = 267;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 264;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===PLParser.DELIMITER) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    } 
                }
                this.state = 269;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
            }

            this.ForwardSQL(localctx, "sql_stmt");
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Do_sp_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_do_sp_stmt;
    return this;
}

Do_sp_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_sp_stmtContext.prototype.constructor = Do_sp_stmtContext;

Do_sp_stmtContext.prototype.DO = function() {
    return this.getToken(PLParser.DO, 0);
};

Do_sp_stmtContext.prototype.expr_list = function() {
    return this.getTypedRuleContext(Expr_listContext,0);
};

Do_sp_stmtContext.prototype.sp_unlabeled_block = function() {
    return this.getTypedRuleContext(Sp_unlabeled_blockContext,0);
};

Do_sp_stmtContext.prototype.DD = function() {
    return this.getToken(PLParser.DD, 0);
};

Do_sp_stmtContext.prototype.sp_proc_stmt_open = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_openContext,0);
};

Do_sp_stmtContext.prototype.sp_proc_stmt_fetch = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_fetchContext,0);
};

Do_sp_stmtContext.prototype.sp_proc_stmt_close = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_closeContext,0);
};

Do_sp_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterDo_sp_stmt(this);
	}
};

Do_sp_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitDo_sp_stmt(this);
	}
};

Do_sp_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitDo_sp_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Do_sp_stmtContext = Do_sp_stmtContext;

PLParser.prototype.do_sp_stmt = function() {

    var localctx = new Do_sp_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PLParser.RULE_do_sp_stmt);
    try {
        this.state = 285;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 273;
            this.match(PLParser.DO);
            this.state = 274;
            this.expr_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 275;
            this.match(PLParser.DO);
            this.state = 276;
            this.sp_unlabeled_block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 277;
            this.match(PLParser.DD);
            this.state = 278;
            this.sp_unlabeled_block();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 279;
            this.match(PLParser.DO);
            this.state = 280;
            this.sp_proc_stmt_open();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 281;
            this.match(PLParser.DO);
            this.state = 282;
            this.sp_proc_stmt_fetch();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 283;
            this.match(PLParser.DO);
            this.state = 284;
            this.sp_proc_stmt_close();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Call_sp_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_call_sp_stmt;
    return this;
}

Call_sp_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_sp_stmtContext.prototype.constructor = Call_sp_stmtContext;

Call_sp_stmtContext.prototype.CALL = function() {
    return this.getToken(PLParser.CALL, 0);
};

Call_sp_stmtContext.prototype.sp_call_name = function() {
    return this.getTypedRuleContext(Sp_call_nameContext,0);
};

Call_sp_stmtContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Call_sp_stmtContext.prototype.opt_sp_cparams = function() {
    return this.getTypedRuleContext(Opt_sp_cparamsContext,0);
};

Call_sp_stmtContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

Call_sp_stmtContext.prototype.sp_proc_stmt = function() {
    return this.getTypedRuleContext(Sp_proc_stmtContext,0);
};

Call_sp_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCall_sp_stmt(this);
	}
};

Call_sp_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCall_sp_stmt(this);
	}
};

Call_sp_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCall_sp_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Call_sp_stmtContext = Call_sp_stmtContext;

PLParser.prototype.call_sp_stmt = function() {

    var localctx = new Call_sp_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PLParser.RULE_call_sp_stmt);
    var _la = 0; // Token type
    try {
        this.state = 297;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 287;
            this.match(PLParser.CALL);
            this.state = 288;
            this.sp_call_name();
            this.state = 293;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PLParser.LeftParen) {
                this.state = 289;
                this.match(PLParser.LeftParen);
                this.state = 290;
                this.opt_sp_cparams();
                this.state = 291;
                this.match(PLParser.RightParen);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 295;
            this.match(PLParser.CALL);
            this.state = 296;
            this.sp_proc_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Opt_sp_cparamsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_opt_sp_cparams;
    return this;
}

Opt_sp_cparamsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_sp_cparamsContext.prototype.constructor = Opt_sp_cparamsContext;

Opt_sp_cparamsContext.prototype.opt_cexpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Opt_cexprContext);
    } else {
        return this.getTypedRuleContext(Opt_cexprContext,i);
    }
};

Opt_sp_cparamsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Opt_sp_cparamsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOpt_sp_cparams(this);
	}
};

Opt_sp_cparamsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOpt_sp_cparams(this);
	}
};

Opt_sp_cparamsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOpt_sp_cparams(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Opt_sp_cparamsContext = Opt_sp_cparamsContext;

PLParser.prototype.opt_sp_cparams = function() {

    var localctx = new Opt_sp_cparamsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PLParser.RULE_opt_sp_cparams);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.opt_cexpr();
        this.state = 304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 300;
            this.match(PLParser.Comma);
            this.state = 301;
            this.opt_cexpr();
            this.state = 306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Opt_cexprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_opt_cexpr;
    return this;
}

Opt_cexprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_cexprContext.prototype.constructor = Opt_cexprContext;

Opt_cexprContext.prototype.DELIMITER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.DELIMITER);
    } else {
        return this.getToken(PLParser.DELIMITER, i);
    }
};


Opt_cexprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOpt_cexpr(this);
	}
};

Opt_cexprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOpt_cexpr(this);
	}
};

Opt_cexprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOpt_cexpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Opt_cexprContext = Opt_cexprContext;

PLParser.prototype.opt_cexpr = function() {

    var localctx = new Opt_cexprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PLParser.RULE_opt_cexpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 307;
                _la = this._input.LA(1);
                if(_la<=0 || _la===PLParser.DELIMITER) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 312;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

        this.ForwardExpr(localctx, "opt_cexpr");
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_name;
    return this;
}

Sp_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_nameContext.prototype.constructor = Sp_nameContext;

Sp_nameContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

Sp_nameContext.prototype.Dot = function() {
    return this.getToken(PLParser.Dot, 0);
};

Sp_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_name(this);
	}
};

Sp_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_name(this);
	}
};

Sp_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_nameContext = Sp_nameContext;

PLParser.prototype.sp_name = function() {

    var localctx = new Sp_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PLParser.RULE_sp_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 315;
        this.ident();
        this.state = 318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        if(la_===1) {
            this.state = 316;
            this.match(PLParser.Dot);
            this.state = 317;
            this.ident();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_call_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_call_name;
    return this;
}

Sp_call_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_call_nameContext.prototype.constructor = Sp_call_nameContext;

Sp_call_nameContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

Sp_call_nameContext.prototype.Dot = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Dot);
    } else {
        return this.getToken(PLParser.Dot, i);
    }
};


Sp_call_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_call_name(this);
	}
};

Sp_call_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_call_name(this);
	}
};

Sp_call_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_call_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_call_nameContext = Sp_call_nameContext;

PLParser.prototype.sp_call_name = function() {

    var localctx = new Sp_call_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PLParser.RULE_sp_call_name);
    var _la = 0; // Token type
    try {
        this.state = 328;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 320;
            this.ident();
            this.state = 321;
            this.match(PLParser.Dot);
            this.state = 322;
            this.ident();
            this.state = 325;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PLParser.Dot) {
                this.state = 323;
                this.match(PLParser.Dot);
                this.state = 324;
                this.ident();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 327;
            this.ident();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_ident;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

IdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterIdent(this);
	}
};

IdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitIdent(this);
	}
};

IdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.IdentContext = IdentContext;

PLParser.prototype.ident = function() {

    var localctx = new IdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PLParser.RULE_ident);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 330;
        this.match(PLParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Create_procedure_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_create_procedure_stmt;
    return this;
}

Create_procedure_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_procedure_stmtContext.prototype.constructor = Create_procedure_stmtContext;

Create_procedure_stmtContext.prototype.CREATE = function() {
    return this.getToken(PLParser.CREATE, 0);
};

Create_procedure_stmtContext.prototype.PROCEDURE = function() {
    return this.getToken(PLParser.PROCEDURE, 0);
};

Create_procedure_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Create_procedure_stmtContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Create_procedure_stmtContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

Create_procedure_stmtContext.prototype.procedure_body = function() {
    return this.getTypedRuleContext(Procedure_bodyContext,0);
};

Create_procedure_stmtContext.prototype.sp_param_list = function() {
    return this.getTypedRuleContext(Sp_param_listContext,0);
};

Create_procedure_stmtContext.prototype.opt_sp_create_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_create_chisticsContext,0);
};

Create_procedure_stmtContext.prototype.sp_create_chistic = function() {
    return this.getTypedRuleContext(Sp_create_chisticContext,0);
};

Create_procedure_stmtContext.prototype.DEFINER = function() {
    return this.getToken(PLParser.DEFINER, 0);
};

Create_procedure_stmtContext.prototype.Equal = function() {
    return this.getToken(PLParser.Equal, 0);
};

Create_procedure_stmtContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Create_procedure_stmtContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Create_procedure_stmtContext.prototype.CURRENT_USER = function() {
    return this.getToken(PLParser.CURRENT_USER, 0);
};

Create_procedure_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCreate_procedure_stmt(this);
	}
};

Create_procedure_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCreate_procedure_stmt(this);
	}
};

Create_procedure_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCreate_procedure_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Create_procedure_stmtContext = Create_procedure_stmtContext;

PLParser.prototype.create_procedure_stmt = function() {

    var localctx = new Create_procedure_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PLParser.RULE_create_procedure_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(PLParser.CREATE);
        this.state = 342;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 333;
            this.match(PLParser.DEFINER);
            this.state = 334;
            this.match(PLParser.Equal);
            this.state = 335;
            this.match(PLParser.STRING);

        } else if(la_===2) {
            this.state = 336;
            this.match(PLParser.DEFINER);
            this.state = 337;
            this.match(PLParser.Equal);
            this.state = 338;
            this.match(PLParser.IDENT);

        } else if(la_===3) {
            this.state = 339;
            this.match(PLParser.DEFINER);
            this.state = 340;
            this.match(PLParser.Equal);
            this.state = 341;
            this.match(PLParser.CURRENT_USER);

        }
        this.state = 344;
        this.match(PLParser.PROCEDURE);
        this.state = 345;
        this.sp_name();
        this.state = 346;
        this.match(PLParser.LeftParen);
        this.state = 348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (PLParser.IN - 42)) | (1 << (PLParser.INOUT - 42)) | (1 << (PLParser.OUT - 42)))) !== 0) || _la===PLParser.IDENT) {
            this.state = 347;
            this.sp_param_list();
        }

        this.state = 350;
        this.match(PLParser.RightParen);
        this.state = 354;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
        if(la_===1) {
            this.state = 351;
            this.opt_sp_create_chistics(0);
            this.state = 352;
            this.sp_create_chistic();

        }
        this.state = 356;
        this.procedure_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Create_function_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_create_function_stmt;
    return this;
}

Create_function_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_function_stmtContext.prototype.constructor = Create_function_stmtContext;

Create_function_stmtContext.prototype.CREATE = function() {
    return this.getToken(PLParser.CREATE, 0);
};

Create_function_stmtContext.prototype.FUNCTION = function() {
    return this.getToken(PLParser.FUNCTION, 0);
};

Create_function_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Create_function_stmtContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Create_function_stmtContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

Create_function_stmtContext.prototype.RETURNS = function() {
    return this.getToken(PLParser.RETURNS, 0);
};

Create_function_stmtContext.prototype.sp_data_type = function() {
    return this.getTypedRuleContext(Sp_data_typeContext,0);
};

Create_function_stmtContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Create_function_stmtContext.prototype.sp_fparam_list = function() {
    return this.getTypedRuleContext(Sp_fparam_listContext,0);
};

Create_function_stmtContext.prototype.opt_sp_create_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_create_chisticsContext,0);
};

Create_function_stmtContext.prototype.sp_create_chistic = function() {
    return this.getTypedRuleContext(Sp_create_chisticContext,0);
};

Create_function_stmtContext.prototype.DEFINER = function() {
    return this.getToken(PLParser.DEFINER, 0);
};

Create_function_stmtContext.prototype.Equal = function() {
    return this.getToken(PLParser.Equal, 0);
};

Create_function_stmtContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Create_function_stmtContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Create_function_stmtContext.prototype.CURRENT_USER = function() {
    return this.getToken(PLParser.CURRENT_USER, 0);
};

Create_function_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCreate_function_stmt(this);
	}
};

Create_function_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCreate_function_stmt(this);
	}
};

Create_function_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCreate_function_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Create_function_stmtContext = Create_function_stmtContext;

PLParser.prototype.create_function_stmt = function() {

    var localctx = new Create_function_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PLParser.RULE_create_function_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(PLParser.CREATE);
        this.state = 368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 359;
            this.match(PLParser.DEFINER);
            this.state = 360;
            this.match(PLParser.Equal);
            this.state = 361;
            this.match(PLParser.STRING);

        } else if(la_===2) {
            this.state = 362;
            this.match(PLParser.DEFINER);
            this.state = 363;
            this.match(PLParser.Equal);
            this.state = 364;
            this.match(PLParser.IDENT);

        } else if(la_===3) {
            this.state = 365;
            this.match(PLParser.DEFINER);
            this.state = 366;
            this.match(PLParser.Equal);
            this.state = 367;
            this.match(PLParser.CURRENT_USER);

        }
        this.state = 370;
        this.match(PLParser.FUNCTION);
        this.state = 371;
        this.sp_name();
        this.state = 372;
        this.match(PLParser.LeftParen);
        this.state = 374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.IDENT) {
            this.state = 373;
            this.sp_fparam_list();
        }

        this.state = 376;
        this.match(PLParser.RightParen);
        this.state = 377;
        this.match(PLParser.RETURNS);
        this.state = 378;
        this.sp_data_type();
        this.state = 382;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 379;
            this.opt_sp_create_chistics(0);
            this.state = 380;
            this.sp_create_chistic();

        }
        this.state = 384;
        this.function_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_param_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_param_list;
    return this;
}

Sp_param_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_param_listContext.prototype.constructor = Sp_param_listContext;

Sp_param_listContext.prototype.sp_param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sp_paramContext);
    } else {
        return this.getTypedRuleContext(Sp_paramContext,i);
    }
};

Sp_param_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Sp_param_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_param_list(this);
	}
};

Sp_param_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_param_list(this);
	}
};

Sp_param_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_param_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_param_listContext = Sp_param_listContext;

PLParser.prototype.sp_param_list = function() {

    var localctx = new Sp_param_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PLParser.RULE_sp_param_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.sp_param();
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 387;
            this.match(PLParser.Comma);
            this.state = 388;
            this.sp_param();
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_param;
    return this;
}

Sp_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_paramContext.prototype.constructor = Sp_paramContext;

Sp_paramContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Sp_paramContext.prototype.param_type = function() {
    return this.getTypedRuleContext(Param_typeContext,0);
};

Sp_paramContext.prototype.IN = function() {
    return this.getToken(PLParser.IN, 0);
};

Sp_paramContext.prototype.OUT = function() {
    return this.getToken(PLParser.OUT, 0);
};

Sp_paramContext.prototype.INOUT = function() {
    return this.getToken(PLParser.INOUT, 0);
};

Sp_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_param(this);
	}
};

Sp_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_param(this);
	}
};

Sp_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_paramContext = Sp_paramContext;

PLParser.prototype.sp_param = function() {

    var localctx = new Sp_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PLParser.RULE_sp_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (PLParser.IN - 42)) | (1 << (PLParser.INOUT - 42)) | (1 << (PLParser.OUT - 42)))) !== 0)) {
            this.state = 394;
            _la = this._input.LA(1);
            if(!(((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (PLParser.IN - 42)) | (1 << (PLParser.INOUT - 42)) | (1 << (PLParser.OUT - 42)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 397;
        this.ident();
        this.state = 398;
        this.param_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_fparam_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_fparam_list;
    return this;
}

Sp_fparam_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_fparam_listContext.prototype.constructor = Sp_fparam_listContext;

Sp_fparam_listContext.prototype.sp_fparam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sp_fparamContext);
    } else {
        return this.getTypedRuleContext(Sp_fparamContext,i);
    }
};

Sp_fparam_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Sp_fparam_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_fparam_list(this);
	}
};

Sp_fparam_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_fparam_list(this);
	}
};

Sp_fparam_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_fparam_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_fparam_listContext = Sp_fparam_listContext;

PLParser.prototype.sp_fparam_list = function() {

    var localctx = new Sp_fparam_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PLParser.RULE_sp_fparam_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.sp_fparam();
        this.state = 405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 401;
            this.match(PLParser.Comma);
            this.state = 402;
            this.sp_fparam();
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_fparamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_fparam;
    return this;
}

Sp_fparamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_fparamContext.prototype.constructor = Sp_fparamContext;

Sp_fparamContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Sp_fparamContext.prototype.param_type = function() {
    return this.getTypedRuleContext(Param_typeContext,0);
};

Sp_fparamContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_fparam(this);
	}
};

Sp_fparamContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_fparam(this);
	}
};

Sp_fparamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_fparam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_fparamContext = Sp_fparamContext;

PLParser.prototype.sp_fparam = function() {

    var localctx = new Sp_fparamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PLParser.RULE_sp_fparam);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 408;
        this.ident();
        this.state = 409;
        this.param_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Param_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_param_type;
    return this;
}

Param_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Param_typeContext.prototype.constructor = Param_typeContext;

Param_typeContext.prototype.sp_data_type = function() {
    return this.getTypedRuleContext(Sp_data_typeContext,0);
};

Param_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterParam_type(this);
	}
};

Param_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitParam_type(this);
	}
};

Param_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitParam_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Param_typeContext = Param_typeContext;

PLParser.prototype.param_type = function() {

    var localctx = new Param_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PLParser.RULE_param_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.sp_data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_identContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_simple_ident;
    return this;
}

Simple_identContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_identContext.prototype.constructor = Simple_identContext;

Simple_identContext.prototype.IDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.IDENT);
    } else {
        return this.getToken(PLParser.IDENT, i);
    }
};


Simple_identContext.prototype.Dot = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Dot);
    } else {
        return this.getToken(PLParser.Dot, i);
    }
};


Simple_identContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSimple_ident(this);
	}
};

Simple_identContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSimple_ident(this);
	}
};

Simple_identContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSimple_ident(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Simple_identContext = Simple_identContext;

PLParser.prototype.simple_ident = function() {

    var localctx = new Simple_identContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PLParser.RULE_simple_ident);
    var _la = 0; // Token type
    try {
        this.state = 424;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this.match(PLParser.IDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            switch(la_) {
            case 1:
                this.state = 414;
                this.match(PLParser.IDENT);
                this.state = 415;
                this.match(PLParser.Dot);
                break;

            case 2:
                this.state = 417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===PLParser.Dot) {
                    this.state = 416;
                    this.match(PLParser.Dot);
                }

                break;

            }
            this.state = 421;
            this.match(PLParser.IDENT);
            this.state = 422;
            this.match(PLParser.Dot);
            this.state = 423;
            this.match(PLParser.IDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Opt_sp_create_chisticsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_opt_sp_create_chistics;
    return this;
}

Opt_sp_create_chisticsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_sp_create_chisticsContext.prototype.constructor = Opt_sp_create_chisticsContext;

Opt_sp_create_chisticsContext.prototype.empty = function() {
    return this.getTypedRuleContext(EmptyContext,0);
};

Opt_sp_create_chisticsContext.prototype.opt_sp_create_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_create_chisticsContext,0);
};

Opt_sp_create_chisticsContext.prototype.sp_create_chistic = function() {
    return this.getTypedRuleContext(Sp_create_chisticContext,0);
};

Opt_sp_create_chisticsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOpt_sp_create_chistics(this);
	}
};

Opt_sp_create_chisticsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOpt_sp_create_chistics(this);
	}
};

Opt_sp_create_chisticsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOpt_sp_create_chistics(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PLParser.prototype.opt_sp_create_chistics = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Opt_sp_create_chisticsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 42;
    this.enterRecursionRule(localctx, 42, PLParser.RULE_opt_sp_create_chistics, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.empty();
        this._ctx.stop = this._input.LT(-1);
        this.state = 433;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Opt_sp_create_chisticsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PLParser.RULE_opt_sp_create_chistics);
                this.state = 429;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 430;
                this.sp_create_chistic(); 
            }
            this.state = 435;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Sp_create_chisticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_create_chistic;
    return this;
}

Sp_create_chisticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_create_chisticContext.prototype.constructor = Sp_create_chisticContext;

Sp_create_chisticContext.prototype.sp_chistic = function() {
    return this.getTypedRuleContext(Sp_chisticContext,0);
};

Sp_create_chisticContext.prototype.DETERMINISTIC = function() {
    return this.getToken(PLParser.DETERMINISTIC, 0);
};

Sp_create_chisticContext.prototype.NOT = function() {
    return this.getToken(PLParser.NOT, 0);
};

Sp_create_chisticContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_create_chistic(this);
	}
};

Sp_create_chisticContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_create_chistic(this);
	}
};

Sp_create_chisticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_create_chistic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_create_chisticContext = Sp_create_chisticContext;

PLParser.prototype.sp_create_chistic = function() {

    var localctx = new Sp_create_chisticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PLParser.RULE_sp_create_chistic);
    var _la = 0; // Token type
    try {
        this.state = 441;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.COMMENT:
        case PLParser.LANGUAGE:
        case PLParser.SQL:
        case PLParser.NO:
        case PLParser.CONTAINS:
        case PLParser.READS:
        case PLParser.MODIFIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 436;
            this.sp_chistic();
            break;
        case PLParser.DETERMINISTIC:
        case PLParser.NOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PLParser.NOT) {
                this.state = 437;
                this.match(PLParser.NOT);
            }

            this.state = 440;
            this.match(PLParser.DETERMINISTIC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_chisticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_chistic;
    return this;
}

Sp_chisticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_chisticContext.prototype.constructor = Sp_chisticContext;

Sp_chisticContext.prototype.COMMENT = function() {
    return this.getToken(PLParser.COMMENT, 0);
};

Sp_chisticContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Sp_chisticContext.prototype.LANGUAGE = function() {
    return this.getToken(PLParser.LANGUAGE, 0);
};

Sp_chisticContext.prototype.SQL = function() {
    return this.getToken(PLParser.SQL, 0);
};

Sp_chisticContext.prototype.NO = function() {
    return this.getToken(PLParser.NO, 0);
};

Sp_chisticContext.prototype.CONTAINS = function() {
    return this.getToken(PLParser.CONTAINS, 0);
};

Sp_chisticContext.prototype.DATA = function() {
    return this.getToken(PLParser.DATA, 0);
};

Sp_chisticContext.prototype.MODIFIES = function() {
    return this.getToken(PLParser.MODIFIES, 0);
};

Sp_chisticContext.prototype.READS = function() {
    return this.getToken(PLParser.READS, 0);
};

Sp_chisticContext.prototype.SECURITY = function() {
    return this.getToken(PLParser.SECURITY, 0);
};

Sp_chisticContext.prototype.DEFINER = function() {
    return this.getToken(PLParser.DEFINER, 0);
};

Sp_chisticContext.prototype.INVOKER = function() {
    return this.getToken(PLParser.INVOKER, 0);
};

Sp_chisticContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_chistic(this);
	}
};

Sp_chisticContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_chistic(this);
	}
};

Sp_chisticContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_chistic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_chisticContext = Sp_chisticContext;

PLParser.prototype.sp_chistic = function() {

    var localctx = new Sp_chisticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PLParser.RULE_sp_chistic);
    var _la = 0; // Token type
    try {
        this.state = 457;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.COMMENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 443;
            this.match(PLParser.COMMENT);
            this.state = 444;
            this.match(PLParser.STRING);
            break;
        case PLParser.LANGUAGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 445;
            this.match(PLParser.LANGUAGE);
            this.state = 446;
            this.match(PLParser.SQL);
            break;
        case PLParser.NO:
            this.enterOuterAlt(localctx, 3);
            this.state = 447;
            this.match(PLParser.NO);
            this.state = 448;
            this.match(PLParser.SQL);
            break;
        case PLParser.CONTAINS:
            this.enterOuterAlt(localctx, 4);
            this.state = 449;
            this.match(PLParser.CONTAINS);
            this.state = 450;
            this.match(PLParser.SQL);
            break;
        case PLParser.READS:
        case PLParser.MODIFIES:
            this.enterOuterAlt(localctx, 5);
            this.state = 451;
            _la = this._input.LA(1);
            if(!(_la===PLParser.READS || _la===PLParser.MODIFIES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 452;
            this.match(PLParser.SQL);
            this.state = 453;
            this.match(PLParser.DATA);
            break;
        case PLParser.SQL:
            this.enterOuterAlt(localctx, 6);
            this.state = 454;
            this.match(PLParser.SQL);
            this.state = 455;
            this.match(PLParser.SECURITY);
            this.state = 456;
            _la = this._input.LA(1);
            if(!(_la===PLParser.DEFINER || _la===PLParser.INVOKER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_procedure_body;
    return this;
}

Procedure_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_bodyContext.prototype.constructor = Procedure_bodyContext;

Procedure_bodyContext.prototype.sp_proc_stmt = function() {
    return this.getTypedRuleContext(Sp_proc_stmtContext,0);
};

Procedure_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterProcedure_body(this);
	}
};

Procedure_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitProcedure_body(this);
	}
};

Procedure_bodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitProcedure_body(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Procedure_bodyContext = Procedure_bodyContext;

PLParser.prototype.procedure_body = function() {

    var localctx = new Procedure_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PLParser.RULE_procedure_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.sp_proc_stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_function_body;
    return this;
}

Function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_bodyContext.prototype.constructor = Function_bodyContext;

Function_bodyContext.prototype.sp_proc_independent_statement = function() {
    return this.getTypedRuleContext(Sp_proc_independent_statementContext,0);
};

Function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterFunction_body(this);
	}
};

Function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitFunction_body(this);
	}
};

Function_bodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitFunction_body(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Function_bodyContext = Function_bodyContext;

PLParser.prototype.function_body = function() {

    var localctx = new Function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PLParser.RULE_function_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.sp_proc_independent_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Alter_procedure_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_alter_procedure_stmt;
    return this;
}

Alter_procedure_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_procedure_stmtContext.prototype.constructor = Alter_procedure_stmtContext;

Alter_procedure_stmtContext.prototype.ALTER = function() {
    return this.getToken(PLParser.ALTER, 0);
};

Alter_procedure_stmtContext.prototype.PROCEDURE = function() {
    return this.getToken(PLParser.PROCEDURE, 0);
};

Alter_procedure_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Alter_procedure_stmtContext.prototype.opt_sp_alter_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_alter_chisticsContext,0);
};

Alter_procedure_stmtContext.prototype.sp_chistic = function() {
    return this.getTypedRuleContext(Sp_chisticContext,0);
};

Alter_procedure_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterAlter_procedure_stmt(this);
	}
};

Alter_procedure_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitAlter_procedure_stmt(this);
	}
};

Alter_procedure_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitAlter_procedure_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Alter_procedure_stmtContext = Alter_procedure_stmtContext;

PLParser.prototype.alter_procedure_stmt = function() {

    var localctx = new Alter_procedure_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PLParser.RULE_alter_procedure_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(PLParser.ALTER);
        this.state = 464;
        this.match(PLParser.PROCEDURE);
        this.state = 465;
        this.sp_name();
        this.state = 469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 466;
            this.opt_sp_alter_chistics(0);
            this.state = 467;
            this.sp_chistic();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Alter_function_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_alter_function_stmt;
    return this;
}

Alter_function_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_function_stmtContext.prototype.constructor = Alter_function_stmtContext;

Alter_function_stmtContext.prototype.ALTER = function() {
    return this.getToken(PLParser.ALTER, 0);
};

Alter_function_stmtContext.prototype.FUNCTION = function() {
    return this.getToken(PLParser.FUNCTION, 0);
};

Alter_function_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Alter_function_stmtContext.prototype.opt_sp_alter_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_alter_chisticsContext,0);
};

Alter_function_stmtContext.prototype.sp_chistic = function() {
    return this.getTypedRuleContext(Sp_chisticContext,0);
};

Alter_function_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterAlter_function_stmt(this);
	}
};

Alter_function_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitAlter_function_stmt(this);
	}
};

Alter_function_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitAlter_function_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Alter_function_stmtContext = Alter_function_stmtContext;

PLParser.prototype.alter_function_stmt = function() {

    var localctx = new Alter_function_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PLParser.RULE_alter_function_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(PLParser.ALTER);
        this.state = 472;
        this.match(PLParser.FUNCTION);
        this.state = 473;
        this.sp_name();
        this.state = 477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 474;
            this.opt_sp_alter_chistics(0);
            this.state = 475;
            this.sp_chistic();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Opt_sp_alter_chisticsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_opt_sp_alter_chistics;
    return this;
}

Opt_sp_alter_chisticsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_sp_alter_chisticsContext.prototype.constructor = Opt_sp_alter_chisticsContext;

Opt_sp_alter_chisticsContext.prototype.empty = function() {
    return this.getTypedRuleContext(EmptyContext,0);
};

Opt_sp_alter_chisticsContext.prototype.opt_sp_alter_chistics = function() {
    return this.getTypedRuleContext(Opt_sp_alter_chisticsContext,0);
};

Opt_sp_alter_chisticsContext.prototype.sp_chistic = function() {
    return this.getTypedRuleContext(Sp_chisticContext,0);
};

Opt_sp_alter_chisticsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOpt_sp_alter_chistics(this);
	}
};

Opt_sp_alter_chisticsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOpt_sp_alter_chistics(this);
	}
};

Opt_sp_alter_chisticsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOpt_sp_alter_chistics(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PLParser.prototype.opt_sp_alter_chistics = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Opt_sp_alter_chisticsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 56;
    this.enterRecursionRule(localctx, 56, PLParser.RULE_opt_sp_alter_chistics, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.empty();
        this._ctx.stop = this._input.LT(-1);
        this.state = 486;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Opt_sp_alter_chisticsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PLParser.RULE_opt_sp_alter_chistics);
                this.state = 482;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 483;
                this.sp_chistic(); 
            }
            this.state = 488;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Sp_proc_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt;
    return this;
}

Sp_proc_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmtContext.prototype.constructor = Sp_proc_stmtContext;

Sp_proc_stmtContext.prototype.sp_proc_outer_statement = function() {
    return this.getTypedRuleContext(Sp_proc_outer_statementContext,0);
};

Sp_proc_stmtContext.prototype.sp_proc_inner_statement = function() {
    return this.getTypedRuleContext(Sp_proc_inner_statementContext,0);
};

Sp_proc_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt(this);
	}
};

Sp_proc_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt(this);
	}
};

Sp_proc_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmtContext = Sp_proc_stmtContext;

PLParser.prototype.sp_proc_stmt = function() {

    var localctx = new Sp_proc_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PLParser.RULE_sp_proc_stmt);
    try {
        this.state = 491;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.ALTER:
        case PLParser.CALL:
        case PLParser.COMMIT:
        case PLParser.CREATE:
        case PLParser.DO:
        case PLParser.DD:
        case PLParser.DROP:
        case PLParser.TABLE:
        case PLParser.RESIGNAL:
        case PLParser.ROLLBACK:
        case PLParser.SELECT:
        case PLParser.SIGNAL:
        case PLParser.SET:
        case PLParser.SQL_KEYWORD:
        case PLParser.LeftParen:
            this.enterOuterAlt(localctx, 1);
            this.state = 489;
            this.sp_proc_outer_statement();
            break;
        case PLParser.BEGIN_KEY:
        case PLParser.CASE:
        case PLParser.CLOSE:
        case PLParser.IF:
        case PLParser.ITERATE:
        case PLParser.LEAVE:
        case PLParser.LOOP:
        case PLParser.OPEN:
        case PLParser.REPEAT:
        case PLParser.RETURN:
        case PLParser.WHILE:
        case PLParser.FETCH:
        case PLParser.IDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 490;
            this.sp_proc_inner_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_outer_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_outer_statement;
    return this;
}

Sp_proc_outer_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_outer_statementContext.prototype.constructor = Sp_proc_outer_statementContext;

Sp_proc_outer_statementContext.prototype.outer_stmt = function() {
    return this.getTypedRuleContext(Outer_stmtContext,0);
};

Sp_proc_outer_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_outer_statement(this);
	}
};

Sp_proc_outer_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_outer_statement(this);
	}
};

Sp_proc_outer_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_outer_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_outer_statementContext = Sp_proc_outer_statementContext;

PLParser.prototype.sp_proc_outer_statement = function() {

    var localctx = new Sp_proc_outer_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PLParser.RULE_sp_proc_outer_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.outer_stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_inner_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_inner_statement;
    return this;
}

Sp_proc_inner_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_inner_statementContext.prototype.constructor = Sp_proc_inner_statementContext;

Sp_proc_inner_statementContext.prototype.sp_proc_independent_statement = function() {
    return this.getTypedRuleContext(Sp_proc_independent_statementContext,0);
};

Sp_proc_inner_statementContext.prototype.sp_proc_stmt_iterate = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_iterateContext,0);
};

Sp_proc_inner_statementContext.prototype.sp_proc_stmt_leave = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_leaveContext,0);
};

Sp_proc_inner_statementContext.prototype.sp_proc_stmt_open = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_openContext,0);
};

Sp_proc_inner_statementContext.prototype.sp_proc_stmt_fetch = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_fetchContext,0);
};

Sp_proc_inner_statementContext.prototype.sp_proc_stmt_close = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_closeContext,0);
};

Sp_proc_inner_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_inner_statement(this);
	}
};

Sp_proc_inner_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_inner_statement(this);
	}
};

Sp_proc_inner_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_inner_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_inner_statementContext = Sp_proc_inner_statementContext;

PLParser.prototype.sp_proc_inner_statement = function() {

    var localctx = new Sp_proc_inner_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PLParser.RULE_sp_proc_inner_statement);
    try {
        this.state = 501;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.BEGIN_KEY:
        case PLParser.CASE:
        case PLParser.IF:
        case PLParser.LOOP:
        case PLParser.REPEAT:
        case PLParser.RETURN:
        case PLParser.WHILE:
        case PLParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.sp_proc_independent_statement();
            break;
        case PLParser.ITERATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 496;
            this.sp_proc_stmt_iterate();
            break;
        case PLParser.LEAVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 497;
            this.sp_proc_stmt_leave();
            break;
        case PLParser.OPEN:
            this.enterOuterAlt(localctx, 4);
            this.state = 498;
            this.sp_proc_stmt_open();
            break;
        case PLParser.FETCH:
            this.enterOuterAlt(localctx, 5);
            this.state = 499;
            this.sp_proc_stmt_fetch();
            break;
        case PLParser.CLOSE:
            this.enterOuterAlt(localctx, 6);
            this.state = 500;
            this.sp_proc_stmt_close();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_independent_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_independent_statement;
    return this;
}

Sp_proc_independent_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_independent_statementContext.prototype.constructor = Sp_proc_independent_statementContext;

Sp_proc_independent_statementContext.prototype.sp_proc_stmt_if = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_ifContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_proc_stmt_case = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_caseContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_unlabeled_block = function() {
    return this.getTypedRuleContext(Sp_unlabeled_blockContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_labeled_block = function() {
    return this.getTypedRuleContext(Sp_labeled_blockContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_unlabeled_control = function() {
    return this.getTypedRuleContext(Sp_unlabeled_controlContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_labeled_control = function() {
    return this.getTypedRuleContext(Sp_labeled_controlContext,0);
};

Sp_proc_independent_statementContext.prototype.sp_proc_stmt_return = function() {
    return this.getTypedRuleContext(Sp_proc_stmt_returnContext,0);
};

Sp_proc_independent_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_independent_statement(this);
	}
};

Sp_proc_independent_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_independent_statement(this);
	}
};

Sp_proc_independent_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_independent_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_independent_statementContext = Sp_proc_independent_statementContext;

PLParser.prototype.sp_proc_independent_statement = function() {

    var localctx = new Sp_proc_independent_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PLParser.RULE_sp_proc_independent_statement);
    try {
        this.state = 510;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.sp_proc_stmt_if();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 504;
            this.sp_proc_stmt_case();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 505;
            this.sp_unlabeled_block();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 506;
            this.sp_labeled_block();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 507;
            this.sp_unlabeled_control();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 508;
            this.sp_labeled_control();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 509;
            this.sp_proc_stmt_return();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_if;
    return this;
}

Sp_proc_stmt_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_ifContext.prototype.constructor = Sp_proc_stmt_ifContext;

Sp_proc_stmt_ifContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.IF);
    } else {
        return this.getToken(PLParser.IF, i);
    }
};


Sp_proc_stmt_ifContext.prototype.sp_if = function() {
    return this.getTypedRuleContext(Sp_ifContext,0);
};

Sp_proc_stmt_ifContext.prototype.END_KEY = function() {
    return this.getToken(PLParser.END_KEY, 0);
};

Sp_proc_stmt_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_if(this);
	}
};

Sp_proc_stmt_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_if(this);
	}
};

Sp_proc_stmt_ifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_if(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_ifContext = Sp_proc_stmt_ifContext;

PLParser.prototype.sp_proc_stmt_if = function() {

    var localctx = new Sp_proc_stmt_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PLParser.RULE_sp_proc_stmt_if);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.match(PLParser.IF);
        this.state = 513;
        this.sp_if();
        this.state = 514;
        this.match(PLParser.END_KEY);
        this.state = 515;
        this.match(PLParser.IF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_if;
    return this;
}

Sp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_ifContext.prototype.constructor = Sp_ifContext;

Sp_ifContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_ifContext.prototype.THEN = function() {
    return this.getToken(PLParser.THEN, 0);
};

Sp_ifContext.prototype.sp_proc_stmts = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sp_proc_stmtsContext);
    } else {
        return this.getTypedRuleContext(Sp_proc_stmtsContext,i);
    }
};

Sp_ifContext.prototype.ELSEIF = function() {
    return this.getToken(PLParser.ELSEIF, 0);
};

Sp_ifContext.prototype.sp_if = function() {
    return this.getTypedRuleContext(Sp_ifContext,0);
};

Sp_ifContext.prototype.ELSE = function() {
    return this.getToken(PLParser.ELSE, 0);
};

Sp_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_if(this);
	}
};

Sp_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_if(this);
	}
};

Sp_ifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_if(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_ifContext = Sp_ifContext;

PLParser.prototype.sp_if = function() {

    var localctx = new Sp_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PLParser.RULE_sp_if);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.expr();
        this.state = 518;
        this.match(PLParser.THEN);
        this.state = 519;
        this.sp_proc_stmts(0);
        this.state = 524;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PLParser.ELSEIF:
        	this.state = 520;
        	this.match(PLParser.ELSEIF);
        	this.state = 521;
        	this.sp_if();
        	break;
        case PLParser.ELSE:
        	this.state = 522;
        	this.match(PLParser.ELSE);
        	this.state = 523;
        	this.sp_proc_stmts(0);
        	break;
        case PLParser.END_KEY:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_case;
    return this;
}

Sp_proc_stmt_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_caseContext.prototype.constructor = Sp_proc_stmt_caseContext;

Sp_proc_stmt_caseContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.CASE);
    } else {
        return this.getToken(PLParser.CASE, i);
    }
};


Sp_proc_stmt_caseContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_proc_stmt_caseContext.prototype.sp_when_list = function() {
    return this.getTypedRuleContext(Sp_when_listContext,0);
};

Sp_proc_stmt_caseContext.prototype.END_KEY = function() {
    return this.getToken(PLParser.END_KEY, 0);
};

Sp_proc_stmt_caseContext.prototype.ELSEIF = function() {
    return this.getToken(PLParser.ELSEIF, 0);
};

Sp_proc_stmt_caseContext.prototype.sp_if = function() {
    return this.getTypedRuleContext(Sp_ifContext,0);
};

Sp_proc_stmt_caseContext.prototype.ELSE = function() {
    return this.getToken(PLParser.ELSE, 0);
};

Sp_proc_stmt_caseContext.prototype.sp_proc_stmts = function() {
    return this.getTypedRuleContext(Sp_proc_stmtsContext,0);
};

Sp_proc_stmt_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_case(this);
	}
};

Sp_proc_stmt_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_case(this);
	}
};

Sp_proc_stmt_caseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_case(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_caseContext = Sp_proc_stmt_caseContext;

PLParser.prototype.sp_proc_stmt_case = function() {

    var localctx = new Sp_proc_stmt_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PLParser.RULE_sp_proc_stmt_case);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(PLParser.CASE);
        this.state = 527;
        this.expr();
        this.state = 528;
        this.sp_when_list();
        this.state = 533;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case PLParser.ELSEIF:
        	this.state = 529;
        	this.match(PLParser.ELSEIF);
        	this.state = 530;
        	this.sp_if();
        	break;
        case PLParser.ELSE:
        	this.state = 531;
        	this.match(PLParser.ELSE);
        	this.state = 532;
        	this.sp_proc_stmts(0);
        	break;
        case PLParser.END_KEY:
        	break;
        default:
        	break;
        }
        this.state = 535;
        this.match(PLParser.END_KEY);
        this.state = 536;
        this.match(PLParser.CASE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_when_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_when_list;
    return this;
}

Sp_when_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_when_listContext.prototype.constructor = Sp_when_listContext;

Sp_when_listContext.prototype.sp_when = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sp_whenContext);
    } else {
        return this.getTypedRuleContext(Sp_whenContext,i);
    }
};

Sp_when_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_when_list(this);
	}
};

Sp_when_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_when_list(this);
	}
};

Sp_when_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_when_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_when_listContext = Sp_when_listContext;

PLParser.prototype.sp_when_list = function() {

    var localctx = new Sp_when_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PLParser.RULE_sp_when_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 538;
            this.sp_when();
            this.state = 541; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PLParser.WHEN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_whenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_when;
    return this;
}

Sp_whenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_whenContext.prototype.constructor = Sp_whenContext;

Sp_whenContext.prototype.WHEN = function() {
    return this.getToken(PLParser.WHEN, 0);
};

Sp_whenContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_whenContext.prototype.THEN = function() {
    return this.getToken(PLParser.THEN, 0);
};

Sp_whenContext.prototype.sp_proc_stmts = function() {
    return this.getTypedRuleContext(Sp_proc_stmtsContext,0);
};

Sp_whenContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_when(this);
	}
};

Sp_whenContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_when(this);
	}
};

Sp_whenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_when(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_whenContext = Sp_whenContext;

PLParser.prototype.sp_when = function() {

    var localctx = new Sp_whenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PLParser.RULE_sp_when);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(PLParser.WHEN);
        this.state = 544;
        this.expr();
        this.state = 545;
        this.match(PLParser.THEN);
        this.state = 546;
        this.sp_proc_stmts(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_unlabeled_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_unlabeled_block;
    return this;
}

Sp_unlabeled_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_unlabeled_blockContext.prototype.constructor = Sp_unlabeled_blockContext;

Sp_unlabeled_blockContext.prototype.sp_block_content = function() {
    return this.getTypedRuleContext(Sp_block_contentContext,0);
};

Sp_unlabeled_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_unlabeled_block(this);
	}
};

Sp_unlabeled_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_unlabeled_block(this);
	}
};

Sp_unlabeled_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_unlabeled_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_unlabeled_blockContext = Sp_unlabeled_blockContext;

PLParser.prototype.sp_unlabeled_block = function() {

    var localctx = new Sp_unlabeled_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PLParser.RULE_sp_unlabeled_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.sp_block_content();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_block_contentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_block_content;
    return this;
}

Sp_block_contentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_block_contentContext.prototype.constructor = Sp_block_contentContext;

Sp_block_contentContext.prototype.BEGIN_KEY = function() {
    return this.getToken(PLParser.BEGIN_KEY, 0);
};

Sp_block_contentContext.prototype.END_KEY = function() {
    return this.getToken(PLParser.END_KEY, 0);
};

Sp_block_contentContext.prototype.opt_sp_decls = function() {
    return this.getTypedRuleContext(Opt_sp_declsContext,0);
};

Sp_block_contentContext.prototype.sp_decl = function() {
    return this.getTypedRuleContext(Sp_declContext,0);
};

Sp_block_contentContext.prototype.DELIMITER = function() {
    return this.getToken(PLParser.DELIMITER, 0);
};

Sp_block_contentContext.prototype.sp_proc_stmts = function() {
    return this.getTypedRuleContext(Sp_proc_stmtsContext,0);
};

Sp_block_contentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_block_content(this);
	}
};

Sp_block_contentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_block_content(this);
	}
};

Sp_block_contentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_block_content(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_block_contentContext = Sp_block_contentContext;

PLParser.prototype.sp_block_content = function() {

    var localctx = new Sp_block_contentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PLParser.RULE_sp_block_content);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 550;
        this.match(PLParser.BEGIN_KEY);
        this.state = 555;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 551;
            this.opt_sp_decls(0);
            this.state = 552;
            this.sp_decl();
            this.state = 553;
            this.match(PLParser.DELIMITER);

        }
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLParser.ALTER) | (1 << PLParser.BEGIN_KEY) | (1 << PLParser.CASE) | (1 << PLParser.CALL) | (1 << PLParser.CLOSE) | (1 << PLParser.COMMIT) | (1 << PLParser.CREATE) | (1 << PLParser.DO) | (1 << PLParser.DD) | (1 << PLParser.DROP))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (PLParser.IF - 41)) | (1 << (PLParser.ITERATE - 41)) | (1 << (PLParser.LEAVE - 41)) | (1 << (PLParser.LOOP - 41)) | (1 << (PLParser.OPEN - 41)) | (1 << (PLParser.TABLE - 41)) | (1 << (PLParser.REPEAT - 41)) | (1 << (PLParser.RESIGNAL - 41)) | (1 << (PLParser.RETURN - 41)) | (1 << (PLParser.ROLLBACK - 41)) | (1 << (PLParser.SELECT - 41)) | (1 << (PLParser.SIGNAL - 41)))) !== 0) || _la===PLParser.WHILE || _la===PLParser.FETCH || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (PLParser.SET - 116)) | (1 << (PLParser.SQL_KEYWORD - 116)) | (1 << (PLParser.IDENT - 116)) | (1 << (PLParser.LeftParen - 116)))) !== 0)) {
            this.state = 557;
            this.sp_proc_stmts(0);
        }

        this.state = 560;
        this.match(PLParser.END_KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_labeled_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_labeled_block;
    return this;
}

Sp_labeled_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_labeled_blockContext.prototype.constructor = Sp_labeled_blockContext;

Sp_labeled_blockContext.prototype.label_ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_identContext);
    } else {
        return this.getTypedRuleContext(Label_identContext,i);
    }
};

Sp_labeled_blockContext.prototype.Colon = function() {
    return this.getToken(PLParser.Colon, 0);
};

Sp_labeled_blockContext.prototype.sp_block_content = function() {
    return this.getTypedRuleContext(Sp_block_contentContext,0);
};

Sp_labeled_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_labeled_block(this);
	}
};

Sp_labeled_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_labeled_block(this);
	}
};

Sp_labeled_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_labeled_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_labeled_blockContext = Sp_labeled_blockContext;

PLParser.prototype.sp_labeled_block = function() {

    var localctx = new Sp_labeled_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PLParser.RULE_sp_labeled_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.label_ident();
        this.state = 563;
        this.match(PLParser.Colon);
        this.state = 564;
        this.sp_block_content();
        this.state = 566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.IDENT) {
            this.state = 565;
            this.label_ident();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Label_identContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_label_ident;
    return this;
}

Label_identContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_identContext.prototype.constructor = Label_identContext;

Label_identContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

Label_identContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterLabel_ident(this);
	}
};

Label_identContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitLabel_ident(this);
	}
};

Label_identContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitLabel_ident(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Label_identContext = Label_identContext;

PLParser.prototype.label_ident = function() {

    var localctx = new Label_identContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PLParser.RULE_label_ident);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 568;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmtsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmts;
    return this;
}

Sp_proc_stmtsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmtsContext.prototype.constructor = Sp_proc_stmtsContext;

Sp_proc_stmtsContext.prototype.sp_proc_stmt = function() {
    return this.getTypedRuleContext(Sp_proc_stmtContext,0);
};

Sp_proc_stmtsContext.prototype.DELIMITER = function() {
    return this.getToken(PLParser.DELIMITER, 0);
};

Sp_proc_stmtsContext.prototype.sp_proc_stmts = function() {
    return this.getTypedRuleContext(Sp_proc_stmtsContext,0);
};

Sp_proc_stmtsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmts(this);
	}
};

Sp_proc_stmtsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmts(this);
	}
};

Sp_proc_stmtsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmts(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PLParser.prototype.sp_proc_stmts = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Sp_proc_stmtsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 84;
    this.enterRecursionRule(localctx, 84, PLParser.RULE_sp_proc_stmts, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.sp_proc_stmt();
        this.state = 572;
        this.match(PLParser.DELIMITER);
        this._ctx.stop = this._input.LT(-1);
        this.state = 580;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Sp_proc_stmtsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PLParser.RULE_sp_proc_stmts);
                this.state = 574;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 575;
                this.sp_proc_stmt();
                this.state = 576;
                this.match(PLParser.DELIMITER); 
            }
            this.state = 582;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Opt_sp_declsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_opt_sp_decls;
    return this;
}

Opt_sp_declsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_sp_declsContext.prototype.constructor = Opt_sp_declsContext;

Opt_sp_declsContext.prototype.empty = function() {
    return this.getTypedRuleContext(EmptyContext,0);
};

Opt_sp_declsContext.prototype.opt_sp_decls = function() {
    return this.getTypedRuleContext(Opt_sp_declsContext,0);
};

Opt_sp_declsContext.prototype.sp_decl = function() {
    return this.getTypedRuleContext(Sp_declContext,0);
};

Opt_sp_declsContext.prototype.DELIMITER = function() {
    return this.getToken(PLParser.DELIMITER, 0);
};

Opt_sp_declsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterOpt_sp_decls(this);
	}
};

Opt_sp_declsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitOpt_sp_decls(this);
	}
};

Opt_sp_declsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitOpt_sp_decls(this);
    } else {
        return visitor.visitChildren(this);
    }
};



PLParser.prototype.opt_sp_decls = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Opt_sp_declsContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 86;
    this.enterRecursionRule(localctx, 86, PLParser.RULE_opt_sp_decls, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 584;
        this.empty();
        this._ctx.stop = this._input.LT(-1);
        this.state = 592;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Opt_sp_declsContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, PLParser.RULE_opt_sp_decls);
                this.state = 586;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 587;
                this.sp_decl();
                this.state = 588;
                this.match(PLParser.DELIMITER); 
            }
            this.state = 594;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Sp_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_decl;
    return this;
}

Sp_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_declContext.prototype.constructor = Sp_declContext;

Sp_declContext.prototype.DECLARE = function() {
    return this.getToken(PLParser.DECLARE, 0);
};

Sp_declContext.prototype.sp_decl_idents = function() {
    return this.getTypedRuleContext(Sp_decl_identsContext,0);
};

Sp_declContext.prototype.sp_data_type = function() {
    return this.getTypedRuleContext(Sp_data_typeContext,0);
};

Sp_declContext.prototype.DEFAULT = function() {
    return this.getToken(PLParser.DEFAULT, 0);
};

Sp_declContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_declContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Sp_declContext.prototype.CONDITION = function() {
    return this.getToken(PLParser.CONDITION, 0);
};

Sp_declContext.prototype.FOR = function() {
    return this.getToken(PLParser.FOR, 0);
};

Sp_declContext.prototype.sp_cond = function() {
    return this.getTypedRuleContext(Sp_condContext,0);
};

Sp_declContext.prototype.sp_handler_type = function() {
    return this.getTypedRuleContext(Sp_handler_typeContext,0);
};

Sp_declContext.prototype.HANDLER = function() {
    return this.getToken(PLParser.HANDLER, 0);
};

Sp_declContext.prototype.sp_hcond_list = function() {
    return this.getTypedRuleContext(Sp_hcond_listContext,0);
};

Sp_declContext.prototype.sp_proc_stmt = function() {
    return this.getTypedRuleContext(Sp_proc_stmtContext,0);
};

Sp_declContext.prototype.CURSOR = function() {
    return this.getToken(PLParser.CURSOR, 0);
};

Sp_declContext.prototype.sql_stmt = function() {
    return this.getTypedRuleContext(Sql_stmtContext,0);
};

Sp_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_decl(this);
	}
};

Sp_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_decl(this);
	}
};

Sp_declContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_decl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_declContext = Sp_declContext;

PLParser.prototype.sp_decl = function() {

    var localctx = new Sp_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PLParser.RULE_sp_decl);
    var _la = 0; // Token type
    try {
        this.state = 619;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 595;
            this.match(PLParser.DECLARE);
            this.state = 596;
            this.sp_decl_idents();
            this.state = 597;
            this.sp_data_type();
            this.state = 600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PLParser.DEFAULT) {
                this.state = 598;
                this.match(PLParser.DEFAULT);
                this.state = 599;
                this.expr();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 602;
            this.match(PLParser.DECLARE);
            this.state = 603;
            this.match(PLParser.IDENT);
            this.state = 604;
            this.match(PLParser.CONDITION);
            this.state = 605;
            this.match(PLParser.FOR);
            this.state = 606;
            this.sp_cond();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 607;
            this.match(PLParser.DECLARE);
            this.state = 608;
            this.sp_handler_type();
            this.state = 609;
            this.match(PLParser.HANDLER);
            this.state = 610;
            this.match(PLParser.FOR);
            this.state = 611;
            this.sp_hcond_list();
            this.state = 612;
            this.sp_proc_stmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 614;
            this.match(PLParser.DECLARE);
            this.state = 615;
            this.match(PLParser.IDENT);
            this.state = 616;
            this.match(PLParser.CURSOR);
            this.state = 617;
            this.match(PLParser.FOR);
            this.state = 618;
            this.sql_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_handler_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_handler_type;
    return this;
}

Sp_handler_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_handler_typeContext.prototype.constructor = Sp_handler_typeContext;

Sp_handler_typeContext.prototype.EXIT = function() {
    return this.getToken(PLParser.EXIT, 0);
};

Sp_handler_typeContext.prototype.CONTINUE = function() {
    return this.getToken(PLParser.CONTINUE, 0);
};

Sp_handler_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_handler_type(this);
	}
};

Sp_handler_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_handler_type(this);
	}
};

Sp_handler_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_handler_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_handler_typeContext = Sp_handler_typeContext;

PLParser.prototype.sp_handler_type = function() {

    var localctx = new Sp_handler_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PLParser.RULE_sp_handler_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        _la = this._input.LA(1);
        if(!(_la===PLParser.CONTINUE || _la===PLParser.EXIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_hcond_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_hcond_list;
    return this;
}

Sp_hcond_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_hcond_listContext.prototype.constructor = Sp_hcond_listContext;

Sp_hcond_listContext.prototype.sp_hcond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sp_hcondContext);
    } else {
        return this.getTypedRuleContext(Sp_hcondContext,i);
    }
};

Sp_hcond_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Sp_hcond_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_hcond_list(this);
	}
};

Sp_hcond_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_hcond_list(this);
	}
};

Sp_hcond_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_hcond_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_hcond_listContext = Sp_hcond_listContext;

PLParser.prototype.sp_hcond_list = function() {

    var localctx = new Sp_hcond_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PLParser.RULE_sp_hcond_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 623;
        this.sp_hcond();
        this.state = 628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 624;
            this.match(PLParser.Comma);
            this.state = 625;
            this.sp_hcond();
            this.state = 630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_hcondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_hcond;
    return this;
}

Sp_hcondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_hcondContext.prototype.constructor = Sp_hcondContext;

Sp_hcondContext.prototype.sp_cond = function() {
    return this.getTypedRuleContext(Sp_condContext,0);
};

Sp_hcondContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Sp_hcondContext.prototype.SQLWARNING = function() {
    return this.getToken(PLParser.SQLWARNING, 0);
};

Sp_hcondContext.prototype.NOT = function() {
    return this.getToken(PLParser.NOT, 0);
};

Sp_hcondContext.prototype.FOUND = function() {
    return this.getToken(PLParser.FOUND, 0);
};

Sp_hcondContext.prototype.SQLEXCEPTION = function() {
    return this.getToken(PLParser.SQLEXCEPTION, 0);
};

Sp_hcondContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_hcond(this);
	}
};

Sp_hcondContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_hcond(this);
	}
};

Sp_hcondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_hcond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_hcondContext = Sp_hcondContext;

PLParser.prototype.sp_hcond = function() {

    var localctx = new Sp_hcondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PLParser.RULE_sp_hcond);
    try {
        this.state = 637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.SQLSTATE:
        case PLParser.INTNUM:
        case PLParser.DECIMAL_VAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 631;
            this.sp_cond();
            break;
        case PLParser.IDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 632;
            this.match(PLParser.IDENT);
            break;
        case PLParser.SQLWARNING:
            this.enterOuterAlt(localctx, 3);
            this.state = 633;
            this.match(PLParser.SQLWARNING);
            break;
        case PLParser.NOT:
            this.enterOuterAlt(localctx, 4);
            this.state = 634;
            this.match(PLParser.NOT);
            this.state = 635;
            this.match(PLParser.FOUND);
            break;
        case PLParser.SQLEXCEPTION:
            this.enterOuterAlt(localctx, 5);
            this.state = 636;
            this.match(PLParser.SQLEXCEPTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_condContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_cond;
    return this;
}

Sp_condContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_condContext.prototype.constructor = Sp_condContext;

Sp_condContext.prototype.number_literal = function() {
    return this.getTypedRuleContext(Number_literalContext,0);
};

Sp_condContext.prototype.sqlstate = function() {
    return this.getTypedRuleContext(SqlstateContext,0);
};

Sp_condContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_cond(this);
	}
};

Sp_condContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_cond(this);
	}
};

Sp_condContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_cond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_condContext = Sp_condContext;

PLParser.prototype.sp_cond = function() {

    var localctx = new Sp_condContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PLParser.RULE_sp_cond);
    try {
        this.state = 641;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.INTNUM:
        case PLParser.DECIMAL_VAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 639;
            this.number_literal();
            break;
        case PLParser.SQLSTATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 640;
            this.sqlstate();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SqlstateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sqlstate;
    return this;
}

SqlstateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlstateContext.prototype.constructor = SqlstateContext;

SqlstateContext.prototype.SQLSTATE = function() {
    return this.getToken(PLParser.SQLSTATE, 0);
};

SqlstateContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

SqlstateContext.prototype.VALUE = function() {
    return this.getToken(PLParser.VALUE, 0);
};

SqlstateContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSqlstate(this);
	}
};

SqlstateContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSqlstate(this);
	}
};

SqlstateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSqlstate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.SqlstateContext = SqlstateContext;

PLParser.prototype.sqlstate = function() {

    var localctx = new SqlstateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PLParser.RULE_sqlstate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this.match(PLParser.SQLSTATE);
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.VALUE) {
            this.state = 644;
            this.match(PLParser.VALUE);
        }

        this.state = 647;
        this.match(PLParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_openContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_open;
    return this;
}

Sp_proc_stmt_openContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_openContext.prototype.constructor = Sp_proc_stmt_openContext;

Sp_proc_stmt_openContext.prototype.OPEN = function() {
    return this.getToken(PLParser.OPEN, 0);
};

Sp_proc_stmt_openContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Sp_proc_stmt_openContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_open(this);
	}
};

Sp_proc_stmt_openContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_open(this);
	}
};

Sp_proc_stmt_openContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_open(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_openContext = Sp_proc_stmt_openContext;

PLParser.prototype.sp_proc_stmt_open = function() {

    var localctx = new Sp_proc_stmt_openContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PLParser.RULE_sp_proc_stmt_open);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this.match(PLParser.OPEN);
        this.state = 650;
        this.match(PLParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_closeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_close;
    return this;
}

Sp_proc_stmt_closeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_closeContext.prototype.constructor = Sp_proc_stmt_closeContext;

Sp_proc_stmt_closeContext.prototype.CLOSE = function() {
    return this.getToken(PLParser.CLOSE, 0);
};

Sp_proc_stmt_closeContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Sp_proc_stmt_closeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_close(this);
	}
};

Sp_proc_stmt_closeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_close(this);
	}
};

Sp_proc_stmt_closeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_close(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_closeContext = Sp_proc_stmt_closeContext;

PLParser.prototype.sp_proc_stmt_close = function() {

    var localctx = new Sp_proc_stmt_closeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PLParser.RULE_sp_proc_stmt_close);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.match(PLParser.CLOSE);
        this.state = 653;
        this.match(PLParser.IDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_fetchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_fetch;
    return this;
}

Sp_proc_stmt_fetchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_fetchContext.prototype.constructor = Sp_proc_stmt_fetchContext;

Sp_proc_stmt_fetchContext.prototype.FETCH = function() {
    return this.getToken(PLParser.FETCH, 0);
};

Sp_proc_stmt_fetchContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Sp_proc_stmt_fetchContext.prototype.into_clause = function() {
    return this.getTypedRuleContext(Into_clauseContext,0);
};

Sp_proc_stmt_fetchContext.prototype.NEXT = function() {
    return this.getToken(PLParser.NEXT, 0);
};

Sp_proc_stmt_fetchContext.prototype.FROM = function() {
    return this.getToken(PLParser.FROM, 0);
};

Sp_proc_stmt_fetchContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_fetch(this);
	}
};

Sp_proc_stmt_fetchContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_fetch(this);
	}
};

Sp_proc_stmt_fetchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_fetch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_fetchContext = Sp_proc_stmt_fetchContext;

PLParser.prototype.sp_proc_stmt_fetch = function() {

    var localctx = new Sp_proc_stmt_fetchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PLParser.RULE_sp_proc_stmt_fetch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 655;
        this.match(PLParser.FETCH);
        this.state = 661;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.FROM:
        case PLParser.IDENT:
            this.state = 657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===PLParser.FROM) {
                this.state = 656;
                this.match(PLParser.FROM);
            }

            break;
        case PLParser.NEXT:
            this.state = 659;
            this.match(PLParser.NEXT);
            this.state = 660;
            this.match(PLParser.FROM);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 663;
        this.match(PLParser.IDENT);
        this.state = 664;
        this.into_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Into_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_into_clause;
    return this;
}

Into_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Into_clauseContext.prototype.constructor = Into_clauseContext;

Into_clauseContext.prototype.INTO = function() {
    return this.getToken(PLParser.INTO, 0);
};

Into_clauseContext.prototype.expr_list = function() {
    return this.getTypedRuleContext(Expr_listContext,0);
};

Into_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterInto_clause(this);
	}
};

Into_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitInto_clause(this);
	}
};

Into_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitInto_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Into_clauseContext = Into_clauseContext;

PLParser.prototype.into_clause = function() {

    var localctx = new Into_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PLParser.RULE_into_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.match(PLParser.INTO);
        this.state = 667;
        this.expr_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_decl_identsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_decl_idents;
    return this;
}

Sp_decl_identsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_decl_identsContext.prototype.constructor = Sp_decl_identsContext;

Sp_decl_identsContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

Sp_decl_identsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Sp_decl_identsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_decl_idents(this);
	}
};

Sp_decl_identsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_decl_idents(this);
	}
};

Sp_decl_identsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_decl_idents(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_decl_identsContext = Sp_decl_identsContext;

PLParser.prototype.sp_decl_idents = function() {

    var localctx = new Sp_decl_identsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PLParser.RULE_sp_decl_idents);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this.ident();
        this.state = 674;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 670;
            this.match(PLParser.Comma);
            this.state = 671;
            this.ident();
            this.state = 676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_data_type;
    return this;
}

Sp_data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_data_typeContext.prototype.constructor = Sp_data_typeContext;

Sp_data_typeContext.prototype.scalar_data_type = function() {
    return this.getTypedRuleContext(Scalar_data_typeContext,0);
};

Sp_data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_data_type(this);
	}
};

Sp_data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_data_type(this);
	}
};

Sp_data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_data_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_data_typeContext = Sp_data_typeContext;

PLParser.prototype.sp_data_type = function() {

    var localctx = new Sp_data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PLParser.RULE_sp_data_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 677;
        this.scalar_data_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expr_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_expr_list;
    return this;
}

Expr_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_listContext.prototype.constructor = Expr_listContext;

Expr_listContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Expr_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Expr_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterExpr_list(this);
	}
};

Expr_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitExpr_list(this);
	}
};

Expr_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitExpr_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Expr_listContext = Expr_listContext;

PLParser.prototype.expr_list = function() {

    var localctx = new Expr_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PLParser.RULE_expr_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.expr();
        this.state = 684;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 680;
            this.match(PLParser.Comma);
            this.state = 681;
            this.expr();
            this.state = 686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.DELIMITER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.DELIMITER);
    } else {
        return this.getToken(PLParser.DELIMITER, i);
    }
};


ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.ExprContext = ExprContext;

PLParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PLParser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,59,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 687;
                _la = this._input.LA(1);
                if(_la<=0 || _la===PLParser.DELIMITER) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 692;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,59,this._ctx);
        }

        this.ForwardExpr(localctx, "expr");
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_unlabeled_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_unlabeled_control;
    return this;
}

Sp_unlabeled_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_unlabeled_controlContext.prototype.constructor = Sp_unlabeled_controlContext;

Sp_unlabeled_controlContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.LOOP);
    } else {
        return this.getToken(PLParser.LOOP, i);
    }
};


Sp_unlabeled_controlContext.prototype.sp_proc_stmts = function() {
    return this.getTypedRuleContext(Sp_proc_stmtsContext,0);
};

Sp_unlabeled_controlContext.prototype.END_KEY = function() {
    return this.getToken(PLParser.END_KEY, 0);
};

Sp_unlabeled_controlContext.prototype.WHILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.WHILE);
    } else {
        return this.getToken(PLParser.WHILE, i);
    }
};


Sp_unlabeled_controlContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_unlabeled_controlContext.prototype.DO = function() {
    return this.getToken(PLParser.DO, 0);
};

Sp_unlabeled_controlContext.prototype.REPEAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.REPEAT);
    } else {
        return this.getToken(PLParser.REPEAT, i);
    }
};


Sp_unlabeled_controlContext.prototype.UNTIL = function() {
    return this.getToken(PLParser.UNTIL, 0);
};

Sp_unlabeled_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_unlabeled_control(this);
	}
};

Sp_unlabeled_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_unlabeled_control(this);
	}
};

Sp_unlabeled_controlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_unlabeled_control(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_unlabeled_controlContext = Sp_unlabeled_controlContext;

PLParser.prototype.sp_unlabeled_control = function() {

    var localctx = new Sp_unlabeled_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PLParser.RULE_sp_unlabeled_control);
    try {
        this.state = 714;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.LOOP:
            this.enterOuterAlt(localctx, 1);
            this.state = 695;
            this.match(PLParser.LOOP);
            this.state = 696;
            this.sp_proc_stmts(0);
            this.state = 697;
            this.match(PLParser.END_KEY);
            this.state = 698;
            this.match(PLParser.LOOP);
            break;
        case PLParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 700;
            this.match(PLParser.WHILE);
            this.state = 701;
            this.expr();
            this.state = 702;
            this.match(PLParser.DO);
            this.state = 703;
            this.sp_proc_stmts(0);
            this.state = 704;
            this.match(PLParser.END_KEY);
            this.state = 705;
            this.match(PLParser.WHILE);
            break;
        case PLParser.REPEAT:
            this.enterOuterAlt(localctx, 3);
            this.state = 707;
            this.match(PLParser.REPEAT);
            this.state = 708;
            this.sp_proc_stmts(0);
            this.state = 709;
            this.match(PLParser.UNTIL);
            this.state = 710;
            this.expr();
            this.state = 711;
            this.match(PLParser.END_KEY);
            this.state = 712;
            this.match(PLParser.REPEAT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_labeled_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_labeled_control;
    return this;
}

Sp_labeled_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_labeled_controlContext.prototype.constructor = Sp_labeled_controlContext;

Sp_labeled_controlContext.prototype.label_ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Label_identContext);
    } else {
        return this.getTypedRuleContext(Label_identContext,i);
    }
};

Sp_labeled_controlContext.prototype.Colon = function() {
    return this.getToken(PLParser.Colon, 0);
};

Sp_labeled_controlContext.prototype.sp_unlabeled_control = function() {
    return this.getTypedRuleContext(Sp_unlabeled_controlContext,0);
};

Sp_labeled_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_labeled_control(this);
	}
};

Sp_labeled_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_labeled_control(this);
	}
};

Sp_labeled_controlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_labeled_control(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_labeled_controlContext = Sp_labeled_controlContext;

PLParser.prototype.sp_labeled_control = function() {

    var localctx = new Sp_labeled_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PLParser.RULE_sp_labeled_control);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 716;
        this.label_ident();
        this.state = 717;
        this.match(PLParser.Colon);
        this.state = 718;
        this.sp_unlabeled_control();
        this.state = 720;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.IDENT) {
            this.state = 719;
            this.label_ident();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_returnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_return;
    return this;
}

Sp_proc_stmt_returnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_returnContext.prototype.constructor = Sp_proc_stmt_returnContext;

Sp_proc_stmt_returnContext.prototype.RETURN = function() {
    return this.getToken(PLParser.RETURN, 0);
};

Sp_proc_stmt_returnContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Sp_proc_stmt_returnContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_return(this);
	}
};

Sp_proc_stmt_returnContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_return(this);
	}
};

Sp_proc_stmt_returnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_return(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_returnContext = Sp_proc_stmt_returnContext;

PLParser.prototype.sp_proc_stmt_return = function() {

    var localctx = new Sp_proc_stmt_returnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PLParser.RULE_sp_proc_stmt_return);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 722;
        this.match(PLParser.RETURN);
        this.state = 723;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_iterateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_iterate;
    return this;
}

Sp_proc_stmt_iterateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_iterateContext.prototype.constructor = Sp_proc_stmt_iterateContext;

Sp_proc_stmt_iterateContext.prototype.ITERATE = function() {
    return this.getToken(PLParser.ITERATE, 0);
};

Sp_proc_stmt_iterateContext.prototype.label_ident = function() {
    return this.getTypedRuleContext(Label_identContext,0);
};

Sp_proc_stmt_iterateContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_iterate(this);
	}
};

Sp_proc_stmt_iterateContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_iterate(this);
	}
};

Sp_proc_stmt_iterateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_iterate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_iterateContext = Sp_proc_stmt_iterateContext;

PLParser.prototype.sp_proc_stmt_iterate = function() {

    var localctx = new Sp_proc_stmt_iterateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PLParser.RULE_sp_proc_stmt_iterate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.match(PLParser.ITERATE);
        this.state = 726;
        this.label_ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sp_proc_stmt_leaveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_sp_proc_stmt_leave;
    return this;
}

Sp_proc_stmt_leaveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sp_proc_stmt_leaveContext.prototype.constructor = Sp_proc_stmt_leaveContext;

Sp_proc_stmt_leaveContext.prototype.LEAVE = function() {
    return this.getToken(PLParser.LEAVE, 0);
};

Sp_proc_stmt_leaveContext.prototype.label_ident = function() {
    return this.getTypedRuleContext(Label_identContext,0);
};

Sp_proc_stmt_leaveContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSp_proc_stmt_leave(this);
	}
};

Sp_proc_stmt_leaveContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSp_proc_stmt_leave(this);
	}
};

Sp_proc_stmt_leaveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSp_proc_stmt_leave(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Sp_proc_stmt_leaveContext = Sp_proc_stmt_leaveContext;

PLParser.prototype.sp_proc_stmt_leave = function() {

    var localctx = new Sp_proc_stmt_leaveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PLParser.RULE_sp_proc_stmt_leave);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.match(PLParser.LEAVE);
        this.state = 729;
        this.label_ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Drop_procedure_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_drop_procedure_stmt;
    return this;
}

Drop_procedure_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_procedure_stmtContext.prototype.constructor = Drop_procedure_stmtContext;

Drop_procedure_stmtContext.prototype.DROP = function() {
    return this.getToken(PLParser.DROP, 0);
};

Drop_procedure_stmtContext.prototype.PROCEDURE = function() {
    return this.getToken(PLParser.PROCEDURE, 0);
};

Drop_procedure_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Drop_procedure_stmtContext.prototype.IF = function() {
    return this.getToken(PLParser.IF, 0);
};

Drop_procedure_stmtContext.prototype.EXISTS = function() {
    return this.getToken(PLParser.EXISTS, 0);
};

Drop_procedure_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterDrop_procedure_stmt(this);
	}
};

Drop_procedure_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitDrop_procedure_stmt(this);
	}
};

Drop_procedure_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitDrop_procedure_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Drop_procedure_stmtContext = Drop_procedure_stmtContext;

PLParser.prototype.drop_procedure_stmt = function() {

    var localctx = new Drop_procedure_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PLParser.RULE_drop_procedure_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(PLParser.DROP);
        this.state = 732;
        this.match(PLParser.PROCEDURE);
        this.state = 735;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.IF) {
            this.state = 733;
            this.match(PLParser.IF);
            this.state = 734;
            this.match(PLParser.EXISTS);
        }

        this.state = 737;
        this.sp_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Drop_function_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_drop_function_stmt;
    return this;
}

Drop_function_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_function_stmtContext.prototype.constructor = Drop_function_stmtContext;

Drop_function_stmtContext.prototype.DROP = function() {
    return this.getToken(PLParser.DROP, 0);
};

Drop_function_stmtContext.prototype.FUNCTION = function() {
    return this.getToken(PLParser.FUNCTION, 0);
};

Drop_function_stmtContext.prototype.sp_name = function() {
    return this.getTypedRuleContext(Sp_nameContext,0);
};

Drop_function_stmtContext.prototype.IF = function() {
    return this.getToken(PLParser.IF, 0);
};

Drop_function_stmtContext.prototype.EXISTS = function() {
    return this.getToken(PLParser.EXISTS, 0);
};

Drop_function_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterDrop_function_stmt(this);
	}
};

Drop_function_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitDrop_function_stmt(this);
	}
};

Drop_function_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitDrop_function_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Drop_function_stmtContext = Drop_function_stmtContext;

PLParser.prototype.drop_function_stmt = function() {

    var localctx = new Drop_function_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PLParser.RULE_drop_function_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;
        this.match(PLParser.DROP);
        this.state = 740;
        this.match(PLParser.FUNCTION);
        this.state = 743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.IF) {
            this.state = 741;
            this.match(PLParser.IF);
            this.state = 742;
            this.match(PLParser.EXISTS);
        }

        this.state = 745;
        this.sp_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scalar_data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_scalar_data_type;
    return this;
}

Scalar_data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_data_typeContext.prototype.constructor = Scalar_data_typeContext;

Scalar_data_typeContext.prototype.int_type_i = function() {
    return this.getTypedRuleContext(Int_type_iContext,0);
};

Scalar_data_typeContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Scalar_data_typeContext.prototype.INTNUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.INTNUM);
    } else {
        return this.getToken(PLParser.INTNUM, i);
    }
};


Scalar_data_typeContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

Scalar_data_typeContext.prototype.ZEROFILL = function() {
    return this.getToken(PLParser.ZEROFILL, 0);
};

Scalar_data_typeContext.prototype.UNSIGNED = function() {
    return this.getToken(PLParser.UNSIGNED, 0);
};

Scalar_data_typeContext.prototype.SIGNED = function() {
    return this.getToken(PLParser.SIGNED, 0);
};

Scalar_data_typeContext.prototype.float_type_i = function() {
    return this.getTypedRuleContext(Float_type_iContext,0);
};

Scalar_data_typeContext.prototype.Comma = function() {
    return this.getToken(PLParser.Comma, 0);
};

Scalar_data_typeContext.prototype.NUMBER = function() {
    return this.getToken(PLParser.NUMBER, 0);
};

Scalar_data_typeContext.prototype.datetime_type_i = function() {
    return this.getTypedRuleContext(Datetime_type_iContext,0);
};

Scalar_data_typeContext.prototype.date_year_type_i = function() {
    return this.getTypedRuleContext(Date_year_type_iContext,0);
};

Scalar_data_typeContext.prototype.CHARACTER = function() {
    return this.getToken(PLParser.CHARACTER, 0);
};

Scalar_data_typeContext.prototype.string_length_i = function() {
    return this.getTypedRuleContext(String_length_iContext,0);
};

Scalar_data_typeContext.prototype.BINARY = function() {
    return this.getToken(PLParser.BINARY, 0);
};

Scalar_data_typeContext.prototype.charset_key = function() {
    return this.getTypedRuleContext(Charset_keyContext,0);
};

Scalar_data_typeContext.prototype.charset_name = function() {
    return this.getTypedRuleContext(Charset_nameContext,0);
};

Scalar_data_typeContext.prototype.collation = function() {
    return this.getTypedRuleContext(CollationContext,0);
};

Scalar_data_typeContext.prototype.VARCHAR = function() {
    return this.getToken(PLParser.VARCHAR, 0);
};

Scalar_data_typeContext.prototype.VARBINARY = function() {
    return this.getToken(PLParser.VARBINARY, 0);
};

Scalar_data_typeContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Scalar_data_typeContext.prototype.BIT = function() {
    return this.getToken(PLParser.BIT, 0);
};

Scalar_data_typeContext.prototype.BOOL = function() {
    return this.getToken(PLParser.BOOL, 0);
};

Scalar_data_typeContext.prototype.BOOLEAN = function() {
    return this.getToken(PLParser.BOOLEAN, 0);
};

Scalar_data_typeContext.prototype.ENUM = function() {
    return this.getToken(PLParser.ENUM, 0);
};

Scalar_data_typeContext.prototype.string_list = function() {
    return this.getTypedRuleContext(String_listContext,0);
};

Scalar_data_typeContext.prototype.SET = function() {
    return this.getToken(PLParser.SET, 0);
};

Scalar_data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterScalar_data_type(this);
	}
};

Scalar_data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitScalar_data_type(this);
	}
};

Scalar_data_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitScalar_data_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Scalar_data_typeContext = Scalar_data_typeContext;

PLParser.prototype.scalar_data_type = function() {

    var localctx = new Scalar_data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PLParser.RULE_scalar_data_type);
    var _la = 0; // Token type
    try {
        this.state = 873;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.TINYINT:
        case PLParser.SMALLINT:
        case PLParser.MEDIUMINT:
        case PLParser.INTEGER:
        case PLParser.BIGINT:
            this.enterOuterAlt(localctx, 1);
            this.state = 747;
            this.int_type_i();
            this.state = 751;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 748;
                this.match(PLParser.LeftParen);
                this.state = 749;
                this.match(PLParser.INTNUM);
                this.state = 750;
                this.match(PLParser.RightParen);

            }
            this.state = 754;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
            if(la_===1) {
                this.state = 753;
                _la = this._input.LA(1);
                if(!(_la===PLParser.UNSIGNED || _la===PLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 757;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 756;
                this.match(PLParser.ZEROFILL);

            }
            break;
        case PLParser.FLOAT:
        case PLParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 759;
            this.float_type_i();
            this.state = 768;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
            if(la_===1) {
                this.state = 760;
                this.match(PLParser.LeftParen);
                this.state = 761;
                this.match(PLParser.INTNUM);
                this.state = 762;
                this.match(PLParser.Comma);
                this.state = 763;
                this.match(PLParser.INTNUM);
                this.state = 764;
                this.match(PLParser.RightParen);

            } else if(la_===2) {
                this.state = 765;
                this.match(PLParser.LeftParen);
                this.state = 766;
                this.match(PLParser.INTNUM);
                this.state = 767;
                this.match(PLParser.RightParen);

            }
            this.state = 771;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
            if(la_===1) {
                this.state = 770;
                _la = this._input.LA(1);
                if(!(_la===PLParser.UNSIGNED || _la===PLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 774;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
            if(la_===1) {
                this.state = 773;
                this.match(PLParser.ZEROFILL);

            }
            break;
        case PLParser.NUMBER:
            this.enterOuterAlt(localctx, 3);
            this.state = 776;
            this.match(PLParser.NUMBER);
            this.state = 785;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
            if(la_===1) {
                this.state = 777;
                this.match(PLParser.LeftParen);
                this.state = 778;
                this.match(PLParser.INTNUM);
                this.state = 779;
                this.match(PLParser.Comma);
                this.state = 780;
                this.match(PLParser.INTNUM);
                this.state = 781;
                this.match(PLParser.RightParen);

            } else if(la_===2) {
                this.state = 782;
                this.match(PLParser.LeftParen);
                this.state = 783;
                this.match(PLParser.INTNUM);
                this.state = 784;
                this.match(PLParser.RightParen);

            }
            this.state = 788;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
            if(la_===1) {
                this.state = 787;
                _la = this._input.LA(1);
                if(!(_la===PLParser.UNSIGNED || _la===PLParser.SIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 791;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
            if(la_===1) {
                this.state = 790;
                this.match(PLParser.ZEROFILL);

            }
            break;
        case PLParser.DATETIME:
        case PLParser.TIMESTAMP:
        case PLParser.TIME:
            this.enterOuterAlt(localctx, 4);
            this.state = 793;
            this.datetime_type_i();
            this.state = 797;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 794;
                this.match(PLParser.LeftParen);
                this.state = 795;
                this.match(PLParser.INTNUM);
                this.state = 796;
                this.match(PLParser.RightParen);

            }
            break;
        case PLParser.DATE:
        case PLParser.YEAR:
            this.enterOuterAlt(localctx, 5);
            this.state = 799;
            this.date_year_type_i();
            break;
        case PLParser.CHARACTER:
            this.enterOuterAlt(localctx, 6);
            this.state = 800;
            this.match(PLParser.CHARACTER);
            this.state = 802;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            if(la_===1) {
                this.state = 801;
                this.string_length_i();

            }
            this.state = 805;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            if(la_===1) {
                this.state = 804;
                this.match(PLParser.BINARY);

            }
            this.state = 810;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 807;
                this.charset_key();
                this.state = 808;
                this.charset_name();

            }
            this.state = 813;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 812;
                this.collation();

            }
            break;
        case PLParser.VARCHAR:
            this.enterOuterAlt(localctx, 7);
            this.state = 815;
            this.match(PLParser.VARCHAR);
            this.state = 816;
            this.string_length_i();
            this.state = 818;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
            if(la_===1) {
                this.state = 817;
                this.match(PLParser.BINARY);

            }
            this.state = 823;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
            if(la_===1) {
                this.state = 820;
                this.charset_key();
                this.state = 821;
                this.charset_name();

            }
            this.state = 826;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 825;
                this.collation();

            }
            break;
        case PLParser.BINARY:
            this.enterOuterAlt(localctx, 8);
            this.state = 828;
            this.match(PLParser.BINARY);
            this.state = 830;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
            if(la_===1) {
                this.state = 829;
                this.string_length_i();

            }
            break;
        case PLParser.VARBINARY:
            this.enterOuterAlt(localctx, 9);
            this.state = 832;
            this.match(PLParser.VARBINARY);
            this.state = 833;
            this.string_length_i();
            break;
        case PLParser.STRING:
            this.enterOuterAlt(localctx, 10);
            this.state = 834;
            this.match(PLParser.STRING);
            break;
        case PLParser.BIT:
            this.enterOuterAlt(localctx, 11);
            this.state = 835;
            this.match(PLParser.BIT);
            this.state = 839;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 836;
                this.match(PLParser.LeftParen);
                this.state = 837;
                this.match(PLParser.INTNUM);
                this.state = 838;
                this.match(PLParser.RightParen);

            }
            break;
        case PLParser.BOOL:
            this.enterOuterAlt(localctx, 12);
            this.state = 841;
            this.match(PLParser.BOOL);
            break;
        case PLParser.BOOLEAN:
            this.enterOuterAlt(localctx, 13);
            this.state = 842;
            this.match(PLParser.BOOLEAN);
            break;
        case PLParser.ENUM:
            this.enterOuterAlt(localctx, 14);
            this.state = 843;
            this.match(PLParser.ENUM);
            this.state = 844;
            this.match(PLParser.LeftParen);
            this.state = 845;
            this.string_list();
            this.state = 846;
            this.match(PLParser.RightParen);
            this.state = 848;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 847;
                this.match(PLParser.BINARY);

            }
            this.state = 853;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 850;
                this.charset_key();
                this.state = 851;
                this.charset_name();

            }
            this.state = 856;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 855;
                this.collation();

            }
            break;
        case PLParser.SET:
            this.enterOuterAlt(localctx, 15);
            this.state = 858;
            this.match(PLParser.SET);
            this.state = 859;
            this.match(PLParser.LeftParen);
            this.state = 860;
            this.string_list();
            this.state = 861;
            this.match(PLParser.RightParen);
            this.state = 863;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 862;
                this.match(PLParser.BINARY);

            }
            this.state = 868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
            if(la_===1) {
                this.state = 865;
                this.charset_key();
                this.state = 866;
                this.charset_name();

            }
            this.state = 871;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 870;
                this.collation();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Int_type_iContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_int_type_i;
    return this;
}

Int_type_iContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Int_type_iContext.prototype.constructor = Int_type_iContext;

Int_type_iContext.prototype.TINYINT = function() {
    return this.getToken(PLParser.TINYINT, 0);
};

Int_type_iContext.prototype.SMALLINT = function() {
    return this.getToken(PLParser.SMALLINT, 0);
};

Int_type_iContext.prototype.MEDIUMINT = function() {
    return this.getToken(PLParser.MEDIUMINT, 0);
};

Int_type_iContext.prototype.INTEGER = function() {
    return this.getToken(PLParser.INTEGER, 0);
};

Int_type_iContext.prototype.BIGINT = function() {
    return this.getToken(PLParser.BIGINT, 0);
};

Int_type_iContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterInt_type_i(this);
	}
};

Int_type_iContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitInt_type_i(this);
	}
};

Int_type_iContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitInt_type_i(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Int_type_iContext = Int_type_iContext;

PLParser.prototype.int_type_i = function() {

    var localctx = new Int_type_iContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PLParser.RULE_int_type_i);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        _la = this._input.LA(1);
        if(!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (PLParser.TINYINT - 90)) | (1 << (PLParser.SMALLINT - 90)) | (1 << (PLParser.MEDIUMINT - 90)) | (1 << (PLParser.INTEGER - 90)) | (1 << (PLParser.BIGINT - 90)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Float_type_iContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_float_type_i;
    return this;
}

Float_type_iContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Float_type_iContext.prototype.constructor = Float_type_iContext;

Float_type_iContext.prototype.FLOAT = function() {
    return this.getToken(PLParser.FLOAT, 0);
};

Float_type_iContext.prototype.DOUBLE = function() {
    return this.getToken(PLParser.DOUBLE, 0);
};

Float_type_iContext.prototype.PRECISION = function() {
    return this.getToken(PLParser.PRECISION, 0);
};

Float_type_iContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterFloat_type_i(this);
	}
};

Float_type_iContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitFloat_type_i(this);
	}
};

Float_type_iContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitFloat_type_i(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Float_type_iContext = Float_type_iContext;

PLParser.prototype.float_type_i = function() {

    var localctx = new Float_type_iContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PLParser.RULE_float_type_i);
    try {
        this.state = 882;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.FLOAT:
            this.enterOuterAlt(localctx, 1);
            this.state = 877;
            this.match(PLParser.FLOAT);
            break;
        case PLParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 878;
            this.match(PLParser.DOUBLE);
            this.state = 880;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
            if(la_===1) {
                this.state = 879;
                this.match(PLParser.PRECISION);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Datetime_type_iContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_datetime_type_i;
    return this;
}

Datetime_type_iContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_type_iContext.prototype.constructor = Datetime_type_iContext;

Datetime_type_iContext.prototype.DATETIME = function() {
    return this.getToken(PLParser.DATETIME, 0);
};

Datetime_type_iContext.prototype.TIMESTAMP = function() {
    return this.getToken(PLParser.TIMESTAMP, 0);
};

Datetime_type_iContext.prototype.TIME = function() {
    return this.getToken(PLParser.TIME, 0);
};

Datetime_type_iContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterDatetime_type_i(this);
	}
};

Datetime_type_iContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitDatetime_type_i(this);
	}
};

Datetime_type_iContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitDatetime_type_i(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Datetime_type_iContext = Datetime_type_iContext;

PLParser.prototype.datetime_type_i = function() {

    var localctx = new Datetime_type_iContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PLParser.RULE_datetime_type_i);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 884;
        _la = this._input.LA(1);
        if(!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (PLParser.DATETIME - 101)) | (1 << (PLParser.TIMESTAMP - 101)) | (1 << (PLParser.TIME - 101)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Date_year_type_iContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_date_year_type_i;
    return this;
}

Date_year_type_iContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_year_type_iContext.prototype.constructor = Date_year_type_iContext;

Date_year_type_iContext.prototype.DATE = function() {
    return this.getToken(PLParser.DATE, 0);
};

Date_year_type_iContext.prototype.YEAR = function() {
    return this.getToken(PLParser.YEAR, 0);
};

Date_year_type_iContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

Date_year_type_iContext.prototype.INTNUM = function() {
    return this.getToken(PLParser.INTNUM, 0);
};

Date_year_type_iContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

Date_year_type_iContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterDate_year_type_i(this);
	}
};

Date_year_type_iContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitDate_year_type_i(this);
	}
};

Date_year_type_iContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitDate_year_type_i(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Date_year_type_iContext = Date_year_type_iContext;

PLParser.prototype.date_year_type_i = function() {

    var localctx = new Date_year_type_iContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PLParser.RULE_date_year_type_i);
    try {
        this.state = 893;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.DATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 886;
            this.match(PLParser.DATE);
            break;
        case PLParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 887;
            this.match(PLParser.YEAR);
            this.state = 891;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
            if(la_===1) {
                this.state = 888;
                this.match(PLParser.LeftParen);
                this.state = 889;
                this.match(PLParser.INTNUM);
                this.state = 890;
                this.match(PLParser.RightParen);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Number_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_number_literal;
    return this;
}

Number_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Number_literalContext.prototype.constructor = Number_literalContext;

Number_literalContext.prototype.INTNUM = function() {
    return this.getToken(PLParser.INTNUM, 0);
};

Number_literalContext.prototype.DECIMAL_VAL = function() {
    return this.getToken(PLParser.DECIMAL_VAL, 0);
};

Number_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterNumber_literal(this);
	}
};

Number_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitNumber_literal(this);
	}
};

Number_literalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitNumber_literal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Number_literalContext = Number_literalContext;

PLParser.prototype.number_literal = function() {

    var localctx = new Number_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PLParser.RULE_number_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        _la = this._input.LA(1);
        if(!(_la===PLParser.INTNUM || _la===PLParser.DECIMAL_VAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.number_literal = function() {
    return this.getTypedRuleContext(Number_literalContext,0);
};

LiteralContext.prototype.DATE_VALUE = function() {
    return this.getToken(PLParser.DATE_VALUE, 0);
};

LiteralContext.prototype.HEX_STRING_VALUE = function() {
    return this.getToken(PLParser.HEX_STRING_VALUE, 0);
};

LiteralContext.prototype.NULLX = function() {
    return this.getToken(PLParser.NULLX, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.LiteralContext = LiteralContext;

PLParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PLParser.RULE_literal);
    try {
        this.state = 901;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.INTNUM:
        case PLParser.DECIMAL_VAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 897;
            this.number_literal();
            break;
        case PLParser.DATE_VALUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 898;
            this.match(PLParser.DATE_VALUE);
            break;
        case PLParser.HEX_STRING_VALUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 899;
            this.match(PLParser.HEX_STRING_VALUE);
            break;
        case PLParser.NULLX:
            this.enterOuterAlt(localctx, 4);
            this.state = 900;
            this.match(PLParser.NULLX);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_length_iContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_string_length_i;
    return this;
}

String_length_iContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_length_iContext.prototype.constructor = String_length_iContext;

String_length_iContext.prototype.LeftParen = function() {
    return this.getToken(PLParser.LeftParen, 0);
};

String_length_iContext.prototype.number_literal = function() {
    return this.getTypedRuleContext(Number_literalContext,0);
};

String_length_iContext.prototype.RightParen = function() {
    return this.getToken(PLParser.RightParen, 0);
};

String_length_iContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterString_length_i(this);
	}
};

String_length_iContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitString_length_i(this);
	}
};

String_length_iContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitString_length_i(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.String_length_iContext = String_length_iContext;

PLParser.prototype.string_length_i = function() {

    var localctx = new String_length_iContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PLParser.RULE_string_length_i);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.match(PLParser.LeftParen);
        this.state = 904;
        this.number_literal();
        this.state = 905;
        this.match(PLParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_string_list;
    return this;
}

String_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_listContext.prototype.constructor = String_listContext;

String_listContext.prototype.text_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Text_stringContext);
    } else {
        return this.getTypedRuleContext(Text_stringContext,i);
    }
};

String_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


String_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterString_list(this);
	}
};

String_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitString_list(this);
	}
};

String_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitString_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.String_listContext = String_listContext;

PLParser.prototype.string_list = function() {

    var localctx = new String_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PLParser.RULE_string_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.text_string();
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 908;
            this.match(PLParser.Comma);
            this.state = 909;
            this.text_string();
            this.state = 914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Text_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_text_string;
    return this;
}

Text_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Text_stringContext.prototype.constructor = Text_stringContext;

Text_stringContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Text_stringContext.prototype.HEX_STRING_VALUE = function() {
    return this.getToken(PLParser.HEX_STRING_VALUE, 0);
};

Text_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterText_string(this);
	}
};

Text_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitText_string(this);
	}
};

Text_stringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitText_string(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Text_stringContext = Text_stringContext;

PLParser.prototype.text_string = function() {

    var localctx = new Text_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PLParser.RULE_text_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 915;
        _la = this._input.LA(1);
        if(!(_la===PLParser.HEX_STRING_VALUE || _la===PLParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Collation_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_collation_name;
    return this;
}

Collation_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collation_nameContext.prototype.constructor = Collation_nameContext;

Collation_nameContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Collation_nameContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Collation_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCollation_name(this);
	}
};

Collation_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCollation_name(this);
	}
};

Collation_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCollation_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Collation_nameContext = Collation_nameContext;

PLParser.prototype.collation_name = function() {

    var localctx = new Collation_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PLParser.RULE_collation_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        _la = this._input.LA(1);
        if(!(_la===PLParser.IDENT || _la===PLParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Charset_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_charset_name;
    return this;
}

Charset_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Charset_nameContext.prototype.constructor = Charset_nameContext;

Charset_nameContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Charset_nameContext.prototype.STRING = function() {
    return this.getToken(PLParser.STRING, 0);
};

Charset_nameContext.prototype.BINARY = function() {
    return this.getToken(PLParser.BINARY, 0);
};

Charset_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCharset_name(this);
	}
};

Charset_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCharset_name(this);
	}
};

Charset_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCharset_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Charset_nameContext = Charset_nameContext;

PLParser.prototype.charset_name = function() {

    var localctx = new Charset_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PLParser.RULE_charset_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        _la = this._input.LA(1);
        if(!(_la===PLParser.BINARY || _la===PLParser.IDENT || _la===PLParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Charset_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_charset_key;
    return this;
}

Charset_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Charset_keyContext.prototype.constructor = Charset_keyContext;

Charset_keyContext.prototype.CHARSET = function() {
    return this.getToken(PLParser.CHARSET, 0);
};

Charset_keyContext.prototype.CHARACTER = function() {
    return this.getToken(PLParser.CHARACTER, 0);
};

Charset_keyContext.prototype.SET = function() {
    return this.getToken(PLParser.SET, 0);
};

Charset_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCharset_key(this);
	}
};

Charset_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCharset_key(this);
	}
};

Charset_keyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCharset_key(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Charset_keyContext = Charset_keyContext;

PLParser.prototype.charset_key = function() {

    var localctx = new Charset_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PLParser.RULE_charset_key);
    try {
        this.state = 924;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.CHARSET:
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.match(PLParser.CHARSET);
            break;
        case PLParser.CHARACTER:
            this.enterOuterAlt(localctx, 2);
            this.state = 922;
            this.match(PLParser.CHARACTER);
            this.state = 923;
            this.match(PLParser.SET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CollationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_collation;
    return this;
}

CollationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollationContext.prototype.constructor = CollationContext;

CollationContext.prototype.COLLATE = function() {
    return this.getToken(PLParser.COLLATE, 0);
};

CollationContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

CollationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterCollation(this);
	}
};

CollationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitCollation(this);
	}
};

CollationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitCollation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.CollationContext = CollationContext;

PLParser.prototype.collation = function() {

    var localctx = new CollationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PLParser.RULE_collation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 926;
        this.match(PLParser.COLLATE);
        this.state = 927;
        this.collation_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_signal_stmt;
    return this;
}

Signal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_stmtContext.prototype.constructor = Signal_stmtContext;

Signal_stmtContext.prototype.SIGNAL = function() {
    return this.getToken(PLParser.SIGNAL, 0);
};

Signal_stmtContext.prototype.signal_value = function() {
    return this.getTypedRuleContext(Signal_valueContext,0);
};

Signal_stmtContext.prototype.SET = function() {
    return this.getToken(PLParser.SET, 0);
};

Signal_stmtContext.prototype.signal_information_item_list = function() {
    return this.getTypedRuleContext(Signal_information_item_listContext,0);
};

Signal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSignal_stmt(this);
	}
};

Signal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSignal_stmt(this);
	}
};

Signal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSignal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Signal_stmtContext = Signal_stmtContext;

PLParser.prototype.signal_stmt = function() {

    var localctx = new Signal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PLParser.RULE_signal_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 929;
        this.match(PLParser.SIGNAL);
        this.state = 930;
        this.signal_value();
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.SET) {
            this.state = 931;
            this.match(PLParser.SET);
            this.state = 932;
            this.signal_information_item_list();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resignal_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_resignal_stmt;
    return this;
}

Resignal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resignal_stmtContext.prototype.constructor = Resignal_stmtContext;

Resignal_stmtContext.prototype.RESIGNAL = function() {
    return this.getToken(PLParser.RESIGNAL, 0);
};

Resignal_stmtContext.prototype.signal_value = function() {
    return this.getTypedRuleContext(Signal_valueContext,0);
};

Resignal_stmtContext.prototype.SET = function() {
    return this.getToken(PLParser.SET, 0);
};

Resignal_stmtContext.prototype.signal_information_item_list = function() {
    return this.getTypedRuleContext(Signal_information_item_listContext,0);
};

Resignal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterResignal_stmt(this);
	}
};

Resignal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitResignal_stmt(this);
	}
};

Resignal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitResignal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Resignal_stmtContext = Resignal_stmtContext;

PLParser.prototype.resignal_stmt = function() {

    var localctx = new Resignal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PLParser.RULE_resignal_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.match(PLParser.RESIGNAL);
        this.state = 937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.SQLSTATE || _la===PLParser.IDENT) {
            this.state = 936;
            this.signal_value();
        }

        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PLParser.SET) {
            this.state = 939;
            this.match(PLParser.SET);
            this.state = 940;
            this.signal_information_item_list();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_signal_value;
    return this;
}

Signal_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_valueContext.prototype.constructor = Signal_valueContext;

Signal_valueContext.prototype.IDENT = function() {
    return this.getToken(PLParser.IDENT, 0);
};

Signal_valueContext.prototype.sqlstate = function() {
    return this.getTypedRuleContext(SqlstateContext,0);
};

Signal_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSignal_value(this);
	}
};

Signal_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSignal_value(this);
	}
};

Signal_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSignal_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Signal_valueContext = Signal_valueContext;

PLParser.prototype.signal_value = function() {

    var localctx = new Signal_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PLParser.RULE_signal_value);
    try {
        this.state = 945;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 943;
            this.match(PLParser.IDENT);
            break;
        case PLParser.SQLSTATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 944;
            this.sqlstate();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_information_item_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_signal_information_item_list;
    return this;
}

Signal_information_item_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_information_item_listContext.prototype.constructor = Signal_information_item_listContext;

Signal_information_item_listContext.prototype.signal_information_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Signal_information_itemContext);
    } else {
        return this.getTypedRuleContext(Signal_information_itemContext,i);
    }
};

Signal_information_item_listContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PLParser.Comma);
    } else {
        return this.getToken(PLParser.Comma, i);
    }
};


Signal_information_item_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSignal_information_item_list(this);
	}
};

Signal_information_item_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSignal_information_item_list(this);
	}
};

Signal_information_item_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSignal_information_item_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Signal_information_item_listContext = Signal_information_item_listContext;

PLParser.prototype.signal_information_item_list = function() {

    var localctx = new Signal_information_item_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PLParser.RULE_signal_information_item_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.signal_information_item();
        this.state = 952;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PLParser.Comma) {
            this.state = 948;
            this.match(PLParser.Comma);
            this.state = 949;
            this.signal_information_item();
            this.state = 954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_information_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_signal_information_item;
    return this;
}

Signal_information_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_information_itemContext.prototype.constructor = Signal_information_itemContext;

Signal_information_itemContext.prototype.scond_info_item_name = function() {
    return this.getTypedRuleContext(Scond_info_item_nameContext,0);
};

Signal_information_itemContext.prototype.Equal = function() {
    return this.getToken(PLParser.Equal, 0);
};

Signal_information_itemContext.prototype.signal_allowed_expr = function() {
    return this.getTypedRuleContext(Signal_allowed_exprContext,0);
};

Signal_information_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSignal_information_item(this);
	}
};

Signal_information_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSignal_information_item(this);
	}
};

Signal_information_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSignal_information_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Signal_information_itemContext = Signal_information_itemContext;

PLParser.prototype.signal_information_item = function() {

    var localctx = new Signal_information_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PLParser.RULE_signal_information_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        this.scond_info_item_name();
        this.state = 956;
        this.match(PLParser.Equal);
        this.state = 957;
        this.signal_allowed_expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_allowed_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_signal_allowed_expr;
    return this;
}

Signal_allowed_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_allowed_exprContext.prototype.constructor = Signal_allowed_exprContext;

Signal_allowed_exprContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Signal_allowed_exprContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

Signal_allowed_exprContext.prototype.simple_ident = function() {
    return this.getTypedRuleContext(Simple_identContext,0);
};

Signal_allowed_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterSignal_allowed_expr(this);
	}
};

Signal_allowed_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitSignal_allowed_expr(this);
	}
};

Signal_allowed_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitSignal_allowed_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Signal_allowed_exprContext = Signal_allowed_exprContext;

PLParser.prototype.signal_allowed_expr = function() {

    var localctx = new Signal_allowed_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PLParser.RULE_signal_allowed_expr);
    try {
        this.state = 962;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PLParser.NULLX:
        case PLParser.INTNUM:
        case PLParser.DECIMAL_VAL:
        case PLParser.HEX_STRING_VALUE:
        case PLParser.DATE_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 959;
            this.literal();
            break;
        case PLParser.SYSTEM_VARIABLE:
        case PLParser.USER_VARIABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 960;
            this.variable();
            break;
        case PLParser.IDENT:
        case PLParser.Dot:
            this.enterOuterAlt(localctx, 3);
            this.state = 961;
            this.simple_ident();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.SYSTEM_VARIABLE = function() {
    return this.getToken(PLParser.SYSTEM_VARIABLE, 0);
};

VariableContext.prototype.USER_VARIABLE = function() {
    return this.getToken(PLParser.USER_VARIABLE, 0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitVariable(this);
	}
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.VariableContext = VariableContext;

PLParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PLParser.RULE_variable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        _la = this._input.LA(1);
        if(!(_la===PLParser.SYSTEM_VARIABLE || _la===PLParser.USER_VARIABLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scond_info_item_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_scond_info_item_name;
    return this;
}

Scond_info_item_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scond_info_item_nameContext.prototype.constructor = Scond_info_item_nameContext;

Scond_info_item_nameContext.prototype.CLASS_ORIGIN = function() {
    return this.getToken(PLParser.CLASS_ORIGIN, 0);
};

Scond_info_item_nameContext.prototype.SUBCLASS_ORIGIN = function() {
    return this.getToken(PLParser.SUBCLASS_ORIGIN, 0);
};

Scond_info_item_nameContext.prototype.CONSTRAINT_CATALOG = function() {
    return this.getToken(PLParser.CONSTRAINT_CATALOG, 0);
};

Scond_info_item_nameContext.prototype.CONSTRAINT_SCHEMA = function() {
    return this.getToken(PLParser.CONSTRAINT_SCHEMA, 0);
};

Scond_info_item_nameContext.prototype.CONSTRAINT_NAME = function() {
    return this.getToken(PLParser.CONSTRAINT_NAME, 0);
};

Scond_info_item_nameContext.prototype.CATALOG_NAME = function() {
    return this.getToken(PLParser.CATALOG_NAME, 0);
};

Scond_info_item_nameContext.prototype.SCHEMA_NAME = function() {
    return this.getToken(PLParser.SCHEMA_NAME, 0);
};

Scond_info_item_nameContext.prototype.TABLE_NAME = function() {
    return this.getToken(PLParser.TABLE_NAME, 0);
};

Scond_info_item_nameContext.prototype.COLUMN_NAME = function() {
    return this.getToken(PLParser.COLUMN_NAME, 0);
};

Scond_info_item_nameContext.prototype.CURSOR_NAME = function() {
    return this.getToken(PLParser.CURSOR_NAME, 0);
};

Scond_info_item_nameContext.prototype.MESSAGE_TEXT = function() {
    return this.getToken(PLParser.MESSAGE_TEXT, 0);
};

Scond_info_item_nameContext.prototype.MYSQL_ERRNO = function() {
    return this.getToken(PLParser.MYSQL_ERRNO, 0);
};

Scond_info_item_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterScond_info_item_name(this);
	}
};

Scond_info_item_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitScond_info_item_name(this);
	}
};

Scond_info_item_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitScond_info_item_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.Scond_info_item_nameContext = Scond_info_item_nameContext;

PLParser.prototype.scond_info_item_name = function() {

    var localctx = new Scond_info_item_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, PLParser.RULE_scond_info_item_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PLParser.CATALOG_NAME) | (1 << PLParser.CLASS_ORIGIN) | (1 << PLParser.COLUMN_NAME) | (1 << PLParser.CONSTRAINT_CATALOG) | (1 << PLParser.CONSTRAINT_NAME) | (1 << PLParser.CONSTRAINT_SCHEMA) | (1 << PLParser.CURSOR_NAME))) !== 0) || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (PLParser.MESSAGE_TEXT - 51)) | (1 << (PLParser.MYSQL_ERRNO - 51)) | (1 << (PLParser.TABLE_NAME - 51)) | (1 << (PLParser.SCHEMA_NAME - 51)) | (1 << (PLParser.SUBCLASS_ORIGIN - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PLParser.RULE_empty;
    return this;
}

EmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyContext.prototype.constructor = EmptyContext;


EmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.enterEmpty(this);
	}
};

EmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof PLParserListener ) {
        listener.exitEmpty(this);
	}
};

EmptyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PLParserVisitor ) {
        return visitor.visitEmpty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PLParser.EmptyContext = EmptyContext;

PLParser.prototype.empty = function() {

    var localctx = new EmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, PLParser.RULE_empty);
    try {
        this.enterOuterAlt(localctx, 1);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


PLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 21:
			return this.opt_sp_create_chistics_sempred(localctx, predIndex);
	case 28:
			return this.opt_sp_alter_chistics_sempred(localctx, predIndex);
	case 42:
			return this.sp_proc_stmts_sempred(localctx, predIndex);
	case 43:
			return this.opt_sp_decls_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

PLParser.prototype.opt_sp_create_chistics_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PLParser.prototype.opt_sp_alter_chistics_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PLParser.prototype.sp_proc_stmts_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PLParser.prototype.opt_sp_decls_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.PLParser = PLParser;
