
/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
var oraclePL = (function () {


    // See also:
    // http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
    // but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
    // with userland code which might access the derived class in a 'classic' way.
    function JisonParserError(msg, hash) {
        Object.defineProperty(this, 'name', {
            enumerable: false,
            writable: false,
            value: 'JisonParserError'
        });
    
        if (msg == null) msg = '???';
    
        Object.defineProperty(this, 'message', {
            enumerable: false,
            writable: true,
            value: msg
        });
    
        this.hash = hash;
    
        var stacktrace;
        if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
        }
        if (!stacktrace) {
            if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
                Error.captureStackTrace(this, this.constructor);
            } else {
                stacktrace = (new Error(msg)).stack;
            }
        }
        if (stacktrace) {
            Object.defineProperty(this, 'stack', {
                enumerable: false,
                writable: false,
                value: stacktrace
            });
        }
    }
    
    if (typeof Object.setPrototypeOf === 'function') {
        Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
    } else {
        JisonParserError.prototype = Object.create(Error.prototype);
    }
    JisonParserError.prototype.constructor = JisonParserError;
    JisonParserError.prototype.name = 'JisonParserError';
    
    
    
    
            // helper: reconstruct the productions[] table
            function bp(s) {
                var rv = [];
                var p = s.pop;
                var r = s.rule;
                for (var i = 0, l = p.length; i < l; i++) {
                    rv.push([
                        p[i],
                        r[i]
                    ]);
                }
                return rv;
            }
        
    
    
            // helper: reconstruct the defaultActions[] table
            function bda(s) {
                var rv = {};
                var d = s.idx;
                var g = s.goto;
                for (var i = 0, l = d.length; i < l; i++) {
                    var j = d[i];
                    rv[j] = g[i];
                }
                return rv;
            }
        
    
    
            // helper: reconstruct the 'goto' table
            function bt(s) {
                var rv = [];
                var d = s.len;
                var y = s.symbol;
                var t = s.type;
                var a = s.state;
                var m = s.mode;
                var g = s.goto;
                for (var i = 0, l = d.length; i < l; i++) {
                    var n = d[i];
                    var q = {};
                    for (var j = 0; j < n; j++) {
                        var z = y.shift();
                        switch (t.shift()) {
                        case 2:
                            q[z] = [
                                m.shift(),
                                g.shift()
                            ];
                            break;
    
                        case 0:
                            q[z] = a.shift();
                            break;
    
                        default:
                            // type === 1: accept
                            q[z] = [
                                3
                            ];
                        }
                    }
                    rv.push(q);
                }
                return rv;
            }
        
    
    
            // helper: runlength encoding with increment step: code, length: step (default step = 0)
            // `this` references an array
            function s(c, l, a) {
                a = a || 0;
                for (var i = 0; i < l; i++) {
                    this.push(c);
                    c += a;
                }
            }
    
            // helper: duplicate sequence from *relative* offset and length.
            // `this` references an array
            function c(i, l) {
                i = this.length - i;
                for (l += i; i < l; i++) {
                    this.push(this[i]);
                }
            }
    
            // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
            function u(a) {
                var rv = [];
                for (var i = 0, l = a.length; i < l; i++) {
                    var e = a[i];
                    // Is this entry a helper function?
                    if (typeof e === 'function') {
                        i++;
                        e.apply(rv, a[i]);
                    } else {
                        rv.push(e);
                    }
                }
                return rv;
            }
        
    
    var parser = {
        // Code Generator Information Report
        // ---------------------------------
        //
        // Options:
        //
        //   default action mode: ............. ["none","none"]
        //   test-compile action mode: ........ "parser:*,lexer:*"
        //   try..catch: ...................... true
        //   default resolve on conflict: ..... true
        //   on-demand look-ahead: ............ false
        //   error recovery token skip maximum: 3
        //   yyerror in parse actions is: ..... NOT recoverable,
        //   yyerror in lexer actions and other non-fatal lexer are:
        //   .................................. NOT recoverable,
        //   debug grammar/output: ............ false
        //   has partial LR conflict upgrade:   true
        //   rudimentary token-stack support:   false
        //   parser table compression mode: ... 2
        //   export debug tables: ............. false
        //   export *all* tables: ............. false
        //   module type: ..................... commonjs
        //   parser engine type: .............. lalr
        //   output main() in the module: ..... true
        //   has user-specified main(): ....... false
        //   has user-specified require()/import modules for main():
        //   .................................. false
        //   number of expected conflicts: .... 0
        //
        //
        // Parser Analysis flags:
        //
        //   no significant actions (parser is a language matcher only):
        //   .................................. false
        //   uses yyleng: ..................... false
        //   uses yylineno: ................... false
        //   uses yytext: ..................... false
        //   uses yylloc: ..................... false
        //   uses ParseError API: ............. false
        //   uses YYERROR: .................... false
        //   uses YYRECOVERING: ............... false
        //   uses YYERROK: .................... false
        //   uses YYCLEARIN: .................. false
        //   tracks rule values: .............. true
        //   assigns rule values: ............. true
        //   uses location tracking: .......... true
        //   assigns location: ................ true
        //   uses yystack: .................... true
        //   uses yysstack: ................... false
        //   uses yysp: ....................... true
        //   uses yyrulelength: ............... true
        //   uses yyMergeLocationInfo API: .... false
        //   has error recovery: .............. false
        //   has error reporting: ............. false
        //
        // --------- END OF REPORT -----------
    
    trace: function no_op_trace() { },
    JisonParserError: JisonParserError,
    yy: {},
    options: {
      type: "lalr",
      hasPartialLrUpgradeOnConflict: true,
      errorRecoveryTokenDiscardCount: 3
    },
    symbols_: {
      "$accept": 0,
      "$end": 1,
      "%": 7,
      "(": 3,
      ")": 4,
      ",": 5,
      "-": 9,
      ".": 6,
      "=": 10,
      "ACCESSIBLE": 22,
      "AFTER": 62,
      "AGGREGATE": 55,
      "ALTER": 40,
      "AND": 104,
      "ANY": 30,
      "ARRAY": 136,
      "AS": 53,
      "ASSIGN_OPERATOR": 84,
      "AUTHID": 14,
      "AUTONOMOUS_TRANSACTION": 122,
      "BEFORE": 61,
      "BEGIN_KEY": 91,
      "BETWEEN": 103,
      "BINARY": 183,
      "BINARY_DOUBLE": 176,
      "BINARY_FLOAT": 177,
      "BINARY_INTEGER": 162,
      "BLOB": 155,
      "BODY": 39,
      "BOOL": 159,
      "BOOLEAN": 160,
      "BULK": 190,
      "BY": 23,
      "BYTE": 182,
      "C": 8,
      "CALL": 228,
      "CASE": 87,
      "CHARACTER": 146,
      "CHARSET": 184,
      "CLOB": 156,
      "CLOSE": 193,
      "CLUSTER": 29,
      "COLLATE": 186,
      "COLLATION": 58,
      "COLLECT": 191,
      "COMMIT": 200,
      "COMPILE": 41,
      "COMPOUND": 76,
      "CONSTANT": 93,
      "CONSTRUCTOR": 224,
      "CONTINUE": 110,
      "CREATE": 37,
      "CURRENT_USER": 15,
      "CURSOR": 94,
      "CUSTOMDATUM": 209,
      "DATE": 180,
      "DAY": 153,
      "DEBUG": 44,
      "DECIMAL": 173,
      "DECIMAL_VAL": 181,
      "DECLARE": 90,
      "DEFAULT": 57,
      "DEFINER": 16,
      "DELETE": 49,
      "DELIMITER": 12,
      "DETERMINISTIC": 24,
      "DISABLE": 74,
      "DROP": 48,
      "EACH": 71,
      "EDITIONABLE": 42,
      "ELSE": 89,
      "ELSIF": 88,
      "ENABLE": 73,
      "END_KEY": 38,
      "END_P": 11,
      "EOF": 1,
      "EXCEPTION": 92,
      "EXCEPTIONS": 102,
      "EXCEPTION_INIT": 117,
      "EXECUTE": 194,
      "EXISTS": 125,
      "EXIT": 111,
      "EXTERNAL": 82,
      "FETCH": 188,
      "FINAL": 211,
      "FLOAT": 139,
      "FOR": 60,
      "FORALL": 99,
      "FORCE": 202,
      "FUNCTION": 17,
      "GOTO": 109,
      "HASH": 25,
      "HOUR": 230,
      "IDENT": 27,
      "IF": 85,
      "IMMEDIATE": 195,
      "IN": 79,
      "INDEX": 130,
      "INDICES": 105,
      "INLINE": 115,
      "INSERT": 64,
      "INSTANTIABLE": 212,
      "INSTEAD": 78,
      "INT": 170,
      "INTEGER": 171,
      "INTERFACE": 121,
      "INTERVAL": 149,
      "INTNUM": 123,
      "INTO": 189,
      "IS": 52,
      "JAVA": 207,
      "LABEL_LEFT": 107,
      "LABEL_RIGHT": 108,
      "LANGUAGE": 83,
      "LIMIT": 192,
      "LOCAL": 145,
      "LONG": 133,
      "LOOP": 96,
      "MAP": 225,
      "MEMBER": 219,
      "MINUTE": 231,
      "MONTH": 152,
      "NAME": 206,
      "NATURAL": 163,
      "NATURALN": 164,
      "NCHAR": 147,
      "NEW": 69,
      "NO": 229,
      "NOCOPY": 81,
      "NONEDITIONABLE": 43,
      "NOT": 134,
      "NULLX": 112,
      "NUMBER": 138,
      "NUMERIC": 172,
      "NVARCHAR": 174,
      "NVARCHAR2": 175,
      "OBJECT": 204,
      "OF": 66,
      "OID": 203,
      "OLD": 68,
      "ON": 63,
      "OPEN": 187,
      "OR": 50,
      "ORADATA": 210,
      "ORDER": 28,
      "OTHERS": 124,
      "OUT": 80,
      "OVERRIDING": 213,
      "PACKAGE_P": 19,
      "PARALLEL_ENABLE": 32,
      "PARAM_ASSIGN_OPERATOR": 13,
      "PARENT": 70,
      "PARTITION": 33,
      "PIPE": 113,
      "PIPELINED": 36,
      "PLS_INTEGER": 161,
      "POSITIVE": 165,
      "POSITIVEN": 166,
      "PRAGMA": 114,
      "PROCEDURE": 18,
      "RAISE": 196,
      "RANGE": 26,
      "RANGE_OPERATOR": 98,
      "RAW": 148,
      "REAL": 140,
      "RECORD": 128,
      "REF": 127,
      "REFERENCING": 67,
      "RELIES_ON": 34,
      "REPLACE": 51,
      "RESTRICT_REFERENCES": 120,
      "RESULT": 222,
      "RESULT_CACHE": 35,
      "RETURN": 54,
      "RETURNING": 197,
      "REUSE": 46,
      "REVERSE": 100,
      "RNDS": 215,
      "RNPS": 217,
      "ROLLBACK": 201,
      "ROW": 72,
      "ROWID": 158,
      "ROWTYPE": 95,
      "SAVE": 101,
      "SAVEPOINT": 199,
      "SECOND": 154,
      "SELF": 221,
      "SERIALLY_REUSABLE": 119,
      "SET": 185,
      "SETTINGS": 47,
      "SIGNTYPE": 167,
      "SIMPLE_DOUBLE": 178,
      "SIMPLE_FLOAT": 179,
      "SIMPLE_INTEGER": 168,
      "SMALLINT": 169,
      "SPECIFICATION": 45,
      "SQLDATA": 208,
      "SQL_KEYWORD": 198,
      "STATEMENT": 77,
      "STATIC": 220,
      "STRING": 116,
      "SUBTYPE": 126,
      "TABLE": 129,
      "THEN": 86,
      "TIME": 143,
      "TIMESTAMP": 141,
      "TO": 151,
      "TRIGGER": 20,
      "TRUST": 214,
      "TYPE": 21,
      "UDF": 118,
      "UNDER": 205,
      "UPDATE": 65,
      "UROWID": 157,
      "USING": 56,
      "USING_NLS_COMP": 59,
      "VALIDATE": 226,
      "VALUE": 31,
      "VALUES": 106,
      "VARCHAR": 132,
      "VARCHAR2": 131,
      "VARIABLE": 223,
      "VARRAY": 135,
      "VARYING": 137,
      "WHEN": 75,
      "WHILE": 97,
      "WITH": 142,
      "WNDS": 216,
      "WNPS": 218,
      "YEAR": 150,
      "YES": 227,
      "ZONE": 144,
      "accessible_by": 249,
      "accessor": 247,
      "accessor_list": 248,
      "alter_function_stmt": 498,
      "alter_package_clause": 278,
      "alter_package_stmt": 277,
      "alter_procedure_stmt": 497,
      "anonymous_stmt": 243,
      "argument": 256,
      "assert_item": 538,
      "assert_list": 537,
      "assign_stmt": 338,
      "assoc_array_type_def": 441,
      "attr_and_element_spec": 525,
      "attr_list": 526,
      "attr_spec": 527,
      "autonomous_transaction_pragma": 419,
      "basetype_of_subtype": 433,
      "basic_loop_stmt": 387,
      "before_or_after": 310,
      "bool_expr": 385,
      "bound_clause": 400,
      "bulk_collect_into_clause": 482,
      "call_spec": 335,
      "case_stmt": 347,
      "charset_key": 475,
      "charset_name": 473,
      "close_stmt": 484,
      "coll_type_def": 439,
      "collation": 476,
      "collation_name": 472,
      "collection_type_def": 438,
      "column": 257,
      "column_list": 258,
      "compiler_parameter": 500,
      "compiler_parameter_list": 501,
      "compound_dml_trigger": 309,
      "compound_trigger_body": 324,
      "constant_decl": 365,
      "constr_param": 550,
      "constr_param_list": 549,
      "constructor_def_in_type": 514,
      "constructor_spec": 546,
      "continue_stmt": 408,
      "create_function_stmt": 301,
      "create_package_body_stmt": 275,
      "create_package_stmt": 273,
      "create_procedure_stmt": 300,
      "create_trigger_stmt": 302,
      "create_type_body_stmt": 507,
      "create_type_stmt": 505,
      "cursor_decl": 376,
      "cursor_def": 379,
      "cursor_for_loop_sql": 401,
      "cursor_for_loop_stmt": 390,
      "cursor_name": 292,
      "data_source": 263,
      "data_source_list": 264,
      "datetime_type_i": 458,
      "decl_stmt": 362,
      "decl_stmt_ext": 370,
      "decl_stmt_ext_list": 369,
      "decl_stmt_ext_without_semicolon": 371,
      "decl_stmt_list": 361,
      "decl_stmt_without_semicolon": 363,
      "declare_section": 354,
      "default_expr": 383,
      "default_or_string": 536,
      "dml_event": 314,
      "dml_event_list": 312,
      "dml_event_option": 311,
      "dml_event_tree": 313,
      "double_type_i": 456,
      "drop_function_stmt": 425,
      "drop_package_stmt": 282,
      "drop_procedure_stmt": 424,
      "drop_trigger_stmt": 427,
      "drop_type_stmt": 554,
      "el_element_spec": 533,
      "el_element_spec_list_cc": 532,
      "element_spec": 530,
      "element_spec_long": 531,
      "error": 2,
      "error_code": 420,
      "exception_decl": 366,
      "exception_handler": 421,
      "exception_init_pragma": 414,
      "exception_list": 423,
      "exception_name": 295,
      "exception_pattern": 422,
      "exception_section": 358,
      "execute_immediate_stmt": 485,
      "execute_section": 356,
      "exit_stmt": 409,
      "expr": 384,
      "fetch_stmt": 480,
      "field_name": 287,
      "final_inst_list": 524,
      "final_or_inst": 522,
      "for_expr": 394,
      "for_loop_stmt": 389,
      "for_sql": 479,
      "for_start": 395,
      "forall_sql_stmt": 392,
      "forall_stmt": 391,
      "func_decl": 372,
      "func_def": 373,
      "func_name": 289,
      "goto_stmt": 407,
      "hash_or_range": 254,
      "identifier": 255,
      "if_stmt": 345,
      "index_type": 442,
      "inheritance_clauses": 535,
      "inheritance_clauses_list": 534,
      "inline_pragma": 413,
      "inner_call_stmt": 236,
      "int_type_i": 452,
      "interface_pragma": 418,
      "into_clause": 481,
      "invoke_right": 244,
      "is_or_as": 299,
      "item_decl": 364,
      "label_def": 405,
      "label_list": 404,
      "label_name": 294,
      "labeled_pl_lang_stmt": 402,
      "lower_bound": 396,
      "map_or_order": 553,
      "map_order_function_spec": 552,
      "member_or_static": 540,
      "nested_table_type_def": 440,
      "normal_into_clause": 488,
      "null_stmt": 410,
      "number_literal": 465,
      "number_precision": 459,
      "number_type_i": 455,
      "nvarchar_type_i": 454,
      "ob_unreserved_keyword": 558,
      "object_or_under": 519,
      "object_type_def": 518,
      "open_stmt": 478,
      "opt_between_bound": 399,
      "opt_binary": 469,
      "opt_body": 283,
      "opt_cexpr": 242,
      "opt_charset": 474,
      "opt_collation": 477,
      "opt_column_list": 329,
      "opt_compile_unit": 280,
      "opt_compiler_parameters_clause": 502,
      "opt_constructor_impl": 551,
      "opt_constructor_param": 547,
      "opt_data_source_list": 265,
      "opt_datetime_fsp_i": 463,
      "opt_debug": 279,
      "opt_decl_stmt_ext_list": 368,
      "opt_decl_stmt_list": 360,
      "opt_declare_section": 352,
      "opt_default": 382,
      "opt_default_collation": 306,
      "opt_dynamic_returning_clause": 494,
      "opt_editionable": 298,
      "opt_element_spec": 529,
      "opt_enable_or_disable": 321,
      "opt_exception_name": 487,
      "opt_exception_section": 357,
      "opt_execute_section": 355,
      "opt_final_inst_list": 523,
      "opt_float_precision": 461,
      "opt_for_each_row": 320,
      "opt_force": 515,
      "opt_force_or_validate": 555,
      "opt_if_exists": 426,
      "opt_interval_leading_fsp_i": 464,
      "opt_invoke_right": 245,
      "opt_label": 293,
      "opt_label_list": 403,
      "opt_length_semantics_i": 467,
      "opt_limit": 483,
      "opt_normal_into_clause": 489,
      "opt_not_null": 443,
      "opt_number_precision": 460,
      "opt_oid_clause": 516,
      "opt_pipelined": 272,
      "opt_proc_clause": 252,
      "opt_record_member_default": 430,
      "opt_referencing_list": 316,
      "opt_relies_on_clause": 267,
      "opt_replace": 297,
      "opt_return_type": 378,
      "opt_reuse_settings": 281,
      "opt_reverse": 393,
      "opt_save_exception": 398,
      "opt_sf_clause": 271,
      "opt_sp_cparam_list": 238,
      "opt_sp_cparam_with_assign": 241,
      "opt_sp_cparams": 239,
      "opt_sp_elseifs": 350,
      "opt_sp_inout": 333,
      "opt_sp_param_list": 330,
      "opt_sqlj_obj_type": 520,
      "opt_sqlj_obj_type_attr": 528,
      "opt_string_length_i": 468,
      "opt_subtype_constraint": 434,
      "opt_tail_name": 296,
      "opt_type_def": 517,
      "opt_urowid_length_i": 471,
      "opt_using_clause": 490,
      "opt_varying": 446,
      "opt_when_condition": 322,
      "oracle_unreserved_keyword": 557,
      "order_or_cluster": 259,
      "package_block": 274,
      "package_body_block": 276,
      "parallel_enable": 262,
      "param_name": 291,
      "partition_by": 261,
      "pipe_row_stmt": 411,
      "pl_access_name": 285,
      "pl_block": 351,
      "pl_body": 353,
      "pl_common_scalar_data_type": 450,
      "pl_ddl_stmt": 235,
      "pl_entry": 232,
      "pl_entry_stmt": 234,
      "pl_entry_stmt_list": 233,
      "pl_impl_body": 334,
      "pl_inner_data_type": 380,
      "pl_inner_scalar_data_type": 447,
      "pl_inner_simple_not_null_type": 448,
      "pl_int_type_i": 451,
      "pl_lang_stmt": 336,
      "pl_lang_stmt_list": 359,
      "pl_lang_stmt_without_semicolon": 337,
      "pl_left_value": 340,
      "pl_left_value_list": 339,
      "pl_obj_access_ref": 341,
      "pl_obj_access_ref_suffix": 343,
      "pl_obj_access_ref_suffix_list": 342,
      "pl_outer_data_type": 381,
      "pl_outer_scalar_data_type": 449,
      "pl_right_value": 344,
      "pl_schema_name": 284,
      "plsql_function_source": 304,
      "plsql_procedure_source": 303,
      "plsql_trigger_source": 305,
      "plsql_type_body_decl": 511,
      "plsql_type_body_decl_list": 510,
      "plsql_type_body_decl_list_semicolon": 509,
      "plsql_type_body_source": 508,
      "plsql_type_spec_source": 506,
      "pragma_stmt": 412,
      "pre_varray": 445,
      "proc_clause": 250,
      "proc_clause_list": 251,
      "proc_decl": 374,
      "proc_def": 375,
      "proc_name": 290,
      "proc_or_func_def_in_type": 513,
      "proc_or_func_spec": 541,
      "procedure_compile_clause": 499,
      "raise_stmt": 486,
      "record_member": 429,
      "record_member_list": 428,
      "record_type_def": 437,
      "ref_cursor_type_def": 436,
      "ref_name": 319,
      "referencing_list": 317,
      "referencing_node": 318,
      "relies_on_clause": 266,
      "restrict_references_pragma": 417,
      "result_cache": 268,
      "return_expr": 386,
      "return_stmt": 406,
      "return_type": 377,
      "self_inout": 548,
      "serially_reusable_pragma": 416,
      "sf_clause": 269,
      "sf_clause_list": 270,
      "signed_int_num": 462,
      "simple_dml_trigger": 308,
      "simple_trigger_body": 323,
      "simple_type_i": 457,
      "sp_alter_clause": 504,
      "sp_cparam": 240,
      "sp_cparam_list": 237,
      "sp_deterministic": 253,
      "sp_editionable": 503,
      "sp_if": 346,
      "sp_param": 332,
      "sp_param_list": 331,
      "sp_when": 349,
      "sp_when_list": 348,
      "sql_keyword": 495,
      "sql_stmt": 496,
      "sqlj_func_decl": 542,
      "sqlj_obj_type_sig": 543,
      "sqlj_using": 521,
      "stream_clause": 260,
      "string_length_i": 466,
      "subprog_decl_in_type": 512,
      "subprogram_spec": 539,
      "subtype_def": 432,
      "subtype_range": 435,
      "timing_point": 327,
      "timing_point_section": 326,
      "timing_point_section_list": 325,
      "tps_body": 328,
      "trigger_definition": 307,
      "type_def": 431,
      "type_name": 288,
      "type_or_self": 544,
      "udf_pragma": 415,
      "unit_kind": 246,
      "unreserved_keyword": 556,
      "update_column_list": 315,
      "upper_bound": 397,
      "urowid_length_i": 470,
      "using_list": 491,
      "using_param": 493,
      "using_params": 492,
      "var_decl": 367,
      "var_name": 286,
      "varchar_type_i": 453,
      "varname_or_name": 545,
      "varray_type_def": 444,
      "while_loop_stmt": 388
    },
    terminals_: {
      1: "EOF",
      2: "error",
      3: "(",
      4: ")",
      5: ",",
      6: ".",
      7: "%",
      8: "C",
      9: "-",
      10: "=",
      11: "END_P",
      12: "DELIMITER",
      13: "PARAM_ASSIGN_OPERATOR",
      14: "AUTHID",
      15: "CURRENT_USER",
      16: "DEFINER",
      17: "FUNCTION",
      18: "PROCEDURE",
      19: "PACKAGE_P",
      20: "TRIGGER",
      21: "TYPE",
      22: "ACCESSIBLE",
      23: "BY",
      24: "DETERMINISTIC",
      25: "HASH",
      26: "RANGE",
      27: "IDENT",
      28: "ORDER",
      29: "CLUSTER",
      30: "ANY",
      31: "VALUE",
      32: "PARALLEL_ENABLE",
      33: "PARTITION",
      34: "RELIES_ON",
      35: "RESULT_CACHE",
      36: "PIPELINED",
      37: "CREATE",
      38: "END_KEY",
      39: "BODY",
      40: "ALTER",
      41: "COMPILE",
      42: "EDITIONABLE",
      43: "NONEDITIONABLE",
      44: "DEBUG",
      45: "SPECIFICATION",
      46: "REUSE",
      47: "SETTINGS",
      48: "DROP",
      49: "DELETE",
      50: "OR",
      51: "REPLACE",
      52: "IS",
      53: "AS",
      54: "RETURN",
      55: "AGGREGATE",
      56: "USING",
      57: "DEFAULT",
      58: "COLLATION",
      59: "USING_NLS_COMP",
      60: "FOR",
      61: "BEFORE",
      62: "AFTER",
      63: "ON",
      64: "INSERT",
      65: "UPDATE",
      66: "OF",
      67: "REFERENCING",
      68: "OLD",
      69: "NEW",
      70: "PARENT",
      71: "EACH",
      72: "ROW",
      73: "ENABLE",
      74: "DISABLE",
      75: "WHEN",
      76: "COMPOUND",
      77: "STATEMENT",
      78: "INSTEAD",
      79: "IN",
      80: "OUT",
      81: "NOCOPY",
      82: "EXTERNAL",
      83: "LANGUAGE",
      84: "ASSIGN_OPERATOR",
      85: "IF",
      86: "THEN",
      87: "CASE",
      88: "ELSIF",
      89: "ELSE",
      90: "DECLARE",
      91: "BEGIN_KEY",
      92: "EXCEPTION",
      93: "CONSTANT",
      94: "CURSOR",
      95: "ROWTYPE",
      96: "LOOP",
      97: "WHILE",
      98: "RANGE_OPERATOR",
      99: "FORALL",
      100: "REVERSE",
      101: "SAVE",
      102: "EXCEPTIONS",
      103: "BETWEEN",
      104: "AND",
      105: "INDICES",
      106: "VALUES",
      107: "LABEL_LEFT",
      108: "LABEL_RIGHT",
      109: "GOTO",
      110: "CONTINUE",
      111: "EXIT",
      112: "NULLX",
      113: "PIPE",
      114: "PRAGMA",
      115: "INLINE",
      116: "STRING",
      117: "EXCEPTION_INIT",
      118: "UDF",
      119: "SERIALLY_REUSABLE",
      120: "RESTRICT_REFERENCES",
      121: "INTERFACE",
      122: "AUTONOMOUS_TRANSACTION",
      123: "INTNUM",
      124: "OTHERS",
      125: "EXISTS",
      126: "SUBTYPE",
      127: "REF",
      128: "RECORD",
      129: "TABLE",
      130: "INDEX",
      131: "VARCHAR2",
      132: "VARCHAR",
      133: "LONG",
      134: "NOT",
      135: "VARRAY",
      136: "ARRAY",
      137: "VARYING",
      138: "NUMBER",
      139: "FLOAT",
      140: "REAL",
      141: "TIMESTAMP",
      142: "WITH",
      143: "TIME",
      144: "ZONE",
      145: "LOCAL",
      146: "CHARACTER",
      147: "NCHAR",
      148: "RAW",
      149: "INTERVAL",
      150: "YEAR",
      151: "TO",
      152: "MONTH",
      153: "DAY",
      154: "SECOND",
      155: "BLOB",
      156: "CLOB",
      157: "UROWID",
      158: "ROWID",
      159: "BOOL",
      160: "BOOLEAN",
      161: "PLS_INTEGER",
      162: "BINARY_INTEGER",
      163: "NATURAL",
      164: "NATURALN",
      165: "POSITIVE",
      166: "POSITIVEN",
      167: "SIGNTYPE",
      168: "SIMPLE_INTEGER",
      169: "SMALLINT",
      170: "INT",
      171: "INTEGER",
      172: "NUMERIC",
      173: "DECIMAL",
      174: "NVARCHAR",
      175: "NVARCHAR2",
      176: "BINARY_DOUBLE",
      177: "BINARY_FLOAT",
      178: "SIMPLE_DOUBLE",
      179: "SIMPLE_FLOAT",
      180: "DATE",
      181: "DECIMAL_VAL",
      182: "BYTE",
      183: "BINARY",
      184: "CHARSET",
      185: "SET",
      186: "COLLATE",
      187: "OPEN",
      188: "FETCH",
      189: "INTO",
      190: "BULK",
      191: "COLLECT",
      192: "LIMIT",
      193: "CLOSE",
      194: "EXECUTE",
      195: "IMMEDIATE",
      196: "RAISE",
      197: "RETURNING",
      198: "SQL_KEYWORD",
      199: "SAVEPOINT",
      200: "COMMIT",
      201: "ROLLBACK",
      202: "FORCE",
      203: "OID",
      204: "OBJECT",
      205: "UNDER",
      206: "NAME",
      207: "JAVA",
      208: "SQLDATA",
      209: "CUSTOMDATUM",
      210: "ORADATA",
      211: "FINAL",
      212: "INSTANTIABLE",
      213: "OVERRIDING",
      214: "TRUST",
      215: "RNDS",
      216: "WNDS",
      217: "RNPS",
      218: "WNPS",
      219: "MEMBER",
      220: "STATIC",
      221: "SELF",
      222: "RESULT",
      223: "VARIABLE",
      224: "CONSTRUCTOR",
      225: "MAP",
      226: "VALIDATE",
      227: "YES",
      228: "CALL",
      229: "NO",
      230: "HOUR",
      231: "MINUTE"
    },
    TERROR: 2,
        EOF: 1,
    
        // internals: defined here so the object *structure* doesn't get modified by parse() et al,
        // thus helping JIT compilers like Chrome V8.
        originalQuoteName: null,
        originalParseError: null,
        cleanupAfterParse: null,
        constructParseErrorInfo: null,
        yyMergeLocationInfo: null,
    
        __reentrant_call_depth: 0,      // INTERNAL USE ONLY
        __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
        __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    
        // APIs which will be set up depending on user action code analysis:
        //yyRecovering: 0,
        //yyErrOk: 0,
        //yyClearIn: 0,
    
        // Helper APIs
        // -----------
    
        // Helper function which can be overridden by user code later on: put suitable quotes around
        // literal IDs in a description string.
        quoteName: function parser_quoteName(id_str) {
            return '"' + id_str + '"';
        },
    
        // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
        //
        // Return NULL when the symbol is unknown to the parser.
        getSymbolName: function parser_getSymbolName(symbol) {
            if (this.terminals_[symbol]) {
                return this.terminals_[symbol];
            }
    
            // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
            //
            // An example of this may be where a rule's action code contains a call like this:
            //
            //      parser.getSymbolName(#$)
            //
            // to obtain a human-readable name of the current grammar rule.
            var s = this.symbols_;
            for (var key in s) {
                if (s[key] === symbol) {
                    return key;
                }
            }
            return null;
        },
    
        // Return a more-or-less human-readable description of the given symbol, when available,
        // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
        //
        // Return NULL when the symbol is unknown to the parser.
        describeSymbol: function parser_describeSymbol(symbol) {
            if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
                return this.terminal_descriptions_[symbol];
            }
            else if (symbol === this.EOF) {
                return 'end of input';
            }
            var id = this.getSymbolName(symbol);
            if (id) {
                return this.quoteName(id);
            }
            return null;
        },
    
        // Produce a (more or less) human-readable list of expected tokens at the point of failure.
        //
        // The produced list may contain token or token set descriptions instead of the tokens
        // themselves to help turning this output into something that easier to read by humans
        // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
        // expected terminals and nonterminals is produced.
        //
        // The returned list (array) will not contain any duplicate entries.
        collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
            var TERROR = this.TERROR;
            var tokenset = [];
            var check = {};
            // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
            // If so, use that one instead of the less palatable token set.
            if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
                return [
                    this.state_descriptions_[state]
                ];
            }
            for (var p in this.table[state]) {
                p = +p;
                if (p !== TERROR) {
                    var d = do_not_describe ? p : this.describeSymbol(p);
                    if (d && !check[d]) {
                        tokenset.push(d);
                        check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                    }
                }
            }
            return tokenset;
        },
    productions_: bp({
      pop: u([
      232,
      233,
      233,
      s,
      [234, 6],
      s,
      [235, 19],
      236,
      237,
      238,
      238,
      239,
      239,
      240,
      241,
      s,
      [241, 4, 1],
      244,
      245,
      245,
      s,
      [246, 5],
      247,
      247,
      248,
      248,
      249,
      250,
      250,
      251,
      251,
      252,
      252,
      253,
      254,
      254,
      255,
      s,
      [255, 4, 1],
      258,
      259,
      259,
      260,
      s,
      [261, 4],
      262,
      262,
      263,
      264,
      264,
      265,
      265,
      266,
      267,
      267,
      268,
      s,
      [269, 5],
      270,
      270,
      271,
      271,
      272,
      s,
      [272, 7, 1],
      278,
      278,
      279,
      279,
      s,
      [280, 4],
      281,
      281,
      282,
      283,
      283,
      284,
      284,
      s,
      [285, 5],
      s,
      [286, 8, 1],
      s,
      [293, 4, 1],
      296,
      297,
      297,
      s,
      [298, 3],
      299,
      s,
      [299, 6, 1],
      304,
      305,
      306,
      306,
      307,
      s,
      [307, 4, 1],
      s,
      [310, 4, 1],
      313,
      s,
      [314, 3],
      315,
      316,
      316,
      317,
      317,
      s,
      [318, 3],
      319,
      320,
      320,
      s,
      [321, 3],
      322,
      s,
      [322, 4, 1],
      325,
      326,
      s,
      [327, 5],
      328,
      329,
      329,
      330,
      330,
      331,
      331,
      332,
      s,
      [333, 6],
      s,
      [334, 3],
      335,
      336,
      s,
      [337, 23],
      338,
      339,
      339,
      340,
      341,
      341,
      342,
      342,
      s,
      [343, 3],
      s,
      [344, 5, 1],
      348,
      349,
      s,
      [350, 3],
      351,
      s,
      [352, 3],
      353,
      353,
      354,
      355,
      355,
      356,
      357,
      357,
      358,
      358,
      359,
      359,
      360,
      360,
      361,
      361,
      362,
      s,
      [363, 7],
      s,
      [364, 4],
      365,
      365,
      366,
      367,
      367,
      368,
      368,
      369,
      369,
      370,
      s,
      [371, 3],
      s,
      [372, 7, 1],
      378,
      379,
      s,
      [380, 4],
      s,
      [381, 4],
      382,
      382,
      383,
      s,
      [383, 8, 1],
      390,
      391,
      392,
      392,
      393,
      393,
      394,
      s,
      [395, 3],
      396,
      397,
      398,
      398,
      399,
      399,
      s,
      [400, 3],
      401,
      402,
      403,
      403,
      404,
      s,
      [404, 5, 1],
      408,
      409,
      s,
      [409, 4, 1],
      s,
      [412, 6],
      s,
      [413, 8, 1],
      420,
      421,
      422,
      422,
      423,
      s,
      [423, 4, 1],
      426,
      427,
      428,
      428,
      429,
      429,
      430,
      430,
      s,
      [431, 3],
      432,
      433,
      434,
      s,
      [434, 6, 1],
      439,
      439,
      440,
      440,
      441,
      441,
      s,
      [442, 7],
      443,
      443,
      444,
      444,
      445,
      445,
      446,
      446,
      s,
      [447, 22],
      448,
      s,
      [449, 21],
      s,
      [450, 3],
      s,
      [451, 8],
      s,
      [452, 5],
      453,
      453,
      454,
      454,
      455,
      455,
      456,
      456,
      457,
      457,
      458,
      459,
      459,
      460,
      460,
      s,
      [461, 3],
      462,
      462,
      463,
      463,
      464,
      464,
      465,
      465,
      466,
      s,
      [467, 3],
      468,
      468,
      469,
      469,
      470,
      471,
      471,
      472,
      472,
      s,
      [473, 3],
      474,
      474,
      475,
      475,
      476,
      477,
      477,
      478,
      478,
      479,
      479,
      480,
      s,
      [480, 4, 1],
      s,
      [483, 5, 1],
      487,
      488,
      488,
      489,
      489,
      490,
      490,
      491,
      492,
      492,
      493,
      s,
      [494, 3],
      s,
      [495, 8],
      s,
      [496, 5],
      s,
      [497, 5, 1],
      501,
      502,
      502,
      503,
      503,
      504,
      s,
      [504, 7, 1],
      510,
      511,
      511,
      512,
      512,
      513,
      513,
      514,
      515,
      515,
      516,
      516,
      s,
      [517, 4],
      518,
      519,
      519,
      520,
      520,
      s,
      [521, 3],
      s,
      [522, 4],
      523,
      523,
      524,
      524,
      525,
      526,
      526,
      527,
      527,
      528,
      528,
      529,
      529,
      530,
      s,
      [531, 3],
      532,
      532,
      s,
      [533, 3],
      534,
      534,
      s,
      [535, 6],
      536,
      536,
      537,
      537,
      s,
      [538, 5],
      539,
      540,
      540,
      s,
      [541, 5],
      542,
      543,
      544,
      544,
      545,
      545,
      546,
      s,
      [547, 3],
      548,
      549,
      s,
      [549, 4, 1],
      552,
      552,
      553,
      553,
      554,
      s,
      [555, 3],
      556,
      556,
      s,
      [557, 17],
      s,
      [558, 71]
    ]),
      rule: u([
      1,
      2,
      3,
      s,
      [1, 26],
      3,
      0,
      1,
      3,
      1,
      2,
      0,
      2,
      0,
      s,
      [2, 3],
      0,
      s,
      [1, 7],
      c,
      [48, 3],
      5,
      c,
      [6, 3],
      1,
      c,
      [16, 8],
      c,
      [38, 3],
      1,
      1,
      6,
      1,
      4,
      5,
      4,
      1,
      7,
      c,
      [11, 3],
      0,
      1,
      4,
      0,
      c,
      [30, 3],
      c,
      [43, 6],
      0,
      c,
      [15, 4],
      7,
      4,
      8,
      4,
      4,
      1,
      c,
      [10, 3],
      c,
      [50, 4],
      0,
      2,
      c,
      [31, 3],
      c,
      [66, 3],
      3,
      1,
      3,
      c,
      [70, 3],
      s,
      [1, 5],
      c,
      [23, 5],
      c,
      [25, 3],
      c,
      [81, 5],
      s,
      [4, 3],
      6,
      9,
      9,
      4,
      c,
      [121, 3],
      1,
      7,
      c,
      [33, 3],
      c,
      [39, 3],
      c,
      [115, 5],
      c,
      [130, 3],
      1,
      s,
      [3, 3],
      c,
      [145, 4],
      1,
      0,
      c,
      [66, 3],
      6,
      3,
      1,
      4,
      c,
      [22, 3],
      3,
      4,
      c,
      [152, 3],
      0,
      c,
      [24, 3],
      c,
      [19, 3],
      1,
      2,
      c,
      [202, 6],
      c,
      [124, 7],
      c,
      [204, 18],
      c,
      [75, 4],
      2,
      c,
      [38, 3],
      2,
      3,
      0,
      4,
      4,
      7,
      1,
      c,
      [137, 3],
      2,
      2,
      4,
      c,
      [200, 3],
      4,
      c,
      [181, 4],
      3,
      c,
      [97, 3],
      c,
      [29, 3],
      c,
      [71, 5],
      s,
      [1, 11],
      5,
      5,
      2,
      4,
      c,
      [92, 6],
      s,
      [1, 3],
      7,
      3,
      4,
      c,
      [113, 3],
      c,
      [125, 3],
      c,
      [77, 3],
      c,
      [76, 3],
      3,
      c,
      [141, 3],
      c,
      [127, 4],
      0,
      5,
      7,
      12,
      10,
      11,
      c,
      [21, 3],
      c,
      [274, 8],
      c,
      [203, 3],
      c,
      [41, 3],
      c,
      [313, 4],
      c,
      [187, 5],
      c,
      [101, 3],
      c,
      [103, 3],
      c,
      [238, 8],
      7,
      7,
      2,
      2,
      c,
      [4, 3],
      c,
      [127, 3],
      c,
      [148, 4],
      c,
      [93, 3],
      c,
      [182, 3],
      c,
      [7, 5],
      c,
      [110, 4],
      c,
      [50, 3],
      4,
      6,
      7,
      c,
      [26, 4],
      4,
      3,
      7,
      6,
      s,
      [2, 3],
      c,
      [102, 5],
      2,
      7,
      6,
      c,
      [154, 7],
      c,
      [16, 3],
      2,
      5,
      6,
      c,
      [150, 3],
      4,
      s,
      [5, 3],
      c,
      [372, 3],
      c,
      [172, 10],
      4,
      c,
      [96, 3],
      s,
      [4, 6],
      1,
      c,
      [63, 4],
      s,
      [1, 27],
      c,
      [379, 3],
      0,
      c,
      [336, 3],
      c,
      [154, 3],
      0,
      c,
      [334, 4],
      c,
      [222, 4],
      c,
      [383, 4],
      c,
      [261, 4],
      c,
      [189, 6],
      c,
      [237, 4],
      0,
      c,
      [346, 4],
      c,
      [4, 3],
      c,
      [292, 4],
      6,
      c,
      [410, 5],
      c,
      [418, 4],
      c,
      [525, 6],
      c,
      [288, 10],
      c,
      [11, 4],
      s,
      [4, 3],
      c,
      [234, 6],
      c,
      [133, 5],
      4,
      6,
      c,
      [37, 4],
      c,
      [27, 5],
      c,
      [509, 4],
      c,
      [4, 3],
      3,
      3,
      5,
      c,
      [11, 3],
      7,
      c,
      [48, 7],
      c,
      [198, 4],
      4,
      c,
      [458, 4],
      c,
      [124, 3],
      c,
      [205, 4],
      c,
      [573, 5],
      c,
      [407, 5],
      c,
      [4, 5],
      c,
      [15, 7],
      c,
      [452, 9],
      c,
      [206, 3],
      3,
      3,
      2,
      9,
      c,
      [142, 3],
      5,
      1,
      c,
      [329, 3],
      c,
      [514, 4],
      c,
      [177, 6],
      s,
      [1, 89]
    ])
    }),
    performAction: function parser__PerformAction(yyloc, yystate /* action[1] */, yysp, yyrulelength, yyvstack, yylstack, yystack) {
    
              /* this == yyval */
    
              // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
              var yy = this.yy;
              var yyparser = yy.parser;
              var yylexer = yy.lexer;
    
              
    
              switch (yystate) {
    case 0:
        /*! Production::    $accept : pl_entry $end */
    case 4:
        /*! Production::    pl_entry_stmt : anonymous_stmt */
    case 5:
        /*! Production::    pl_entry_stmt : pl_ddl_stmt */
    case 6:
        /*! Production::    pl_entry_stmt : plsql_procedure_source */
    case 7:
        /*! Production::    pl_entry_stmt : plsql_function_source */
    case 8:
        /*! Production::    pl_entry_stmt : plsql_trigger_source */
    case 9:
        /*! Production::    pl_entry_stmt : update_column_list */
    case 10:
        /*! Production::    pl_ddl_stmt : create_package_stmt */
    case 11:
        /*! Production::    pl_ddl_stmt : create_package_body_stmt */
    case 12:
        /*! Production::    pl_ddl_stmt : alter_package_stmt */
    case 13:
        /*! Production::    pl_ddl_stmt : drop_package_stmt */
    case 14:
        /*! Production::    pl_ddl_stmt : create_procedure_stmt */
    case 15:
        /*! Production::    pl_ddl_stmt : create_function_stmt */
    case 16:
        /*! Production::    pl_ddl_stmt : create_trigger_stmt */
    case 17:
        /*! Production::    pl_ddl_stmt : alter_procedure_stmt */
    case 18:
        /*! Production::    pl_ddl_stmt : alter_function_stmt */
    case 19:
        /*! Production::    pl_ddl_stmt : drop_procedure_stmt */
    case 20:
        /*! Production::    pl_ddl_stmt : drop_function_stmt */
    case 21:
        /*! Production::    pl_ddl_stmt : drop_trigger_stmt */
    case 22:
        /*! Production::    pl_ddl_stmt : package_block */
    case 23:
        /*! Production::    pl_ddl_stmt : package_body_block */
    case 24:
        /*! Production::    pl_ddl_stmt : create_type_stmt */
    case 25:
        /*! Production::    pl_ddl_stmt : drop_type_stmt */
    case 26:
        /*! Production::    pl_ddl_stmt : create_type_body_stmt */
    case 27:
        /*! Production::    pl_ddl_stmt : plsql_type_spec_source */
    case 28:
        /*! Production::    pl_ddl_stmt : plsql_type_body_source */
    case 29:
        /*! Production::    inner_call_stmt : pl_obj_access_ref */
    case 32:
        /*! Production::    opt_sp_cparam_list : sp_cparam_list */
    case 34:
        /*! Production::    opt_sp_cparams : sp_cparam */
    case 43:
        /*! Production::    opt_invoke_right : invoke_right */
    case 44:
        /*! Production::    unit_kind : FUNCTION */
    case 45:
        /*! Production::    unit_kind : PROCEDURE */
    case 46:
        /*! Production::    unit_kind : PACKAGE_P */
    case 47:
        /*! Production::    unit_kind : TRIGGER */
    case 48:
        /*! Production::    unit_kind : TYPE */
    case 49:
        /*! Production::    accessor : pl_schema_name */
    case 52:
        /*! Production::    accessor_list : accessor */
    case 54:
        /*! Production::    proc_clause : invoke_right */
    case 55:
        /*! Production::    proc_clause : accessible_by */
    case 57:
        /*! Production::    proc_clause_list : proc_clause */
    case 59:
        /*! Production::    opt_proc_clause : proc_clause_list */
    case 60:
        /*! Production::    sp_deterministic : DETERMINISTIC */
    case 61:
        /*! Production::    hash_or_range : HASH */
    case 62:
        /*! Production::    hash_or_range : RANGE */
    case 63:
        /*! Production::    identifier : IDENT */
    case 64:
        /*! Production::    identifier : unreserved_keyword */
    case 65:
        /*! Production::    argument : identifier */
    case 66:
        /*! Production::    column : identifier */
    case 67:
        /*! Production::    column_list : column */
    case 69:
        /*! Production::    order_or_cluster : ORDER */
    case 70:
        /*! Production::    order_or_cluster : CLUSTER */
    case 72:
        /*! Production::    partition_by : ANY */
    case 76:
        /*! Production::    parallel_enable : PARALLEL_ENABLE */
    case 78:
        /*! Production::    data_source : identifier */
    case 80:
        /*! Production::    data_source_list : data_source */
    case 82:
        /*! Production::    opt_data_source_list : data_source_list */
    case 85:
        /*! Production::    opt_relies_on_clause : relies_on_clause */
    case 87:
        /*! Production::    sf_clause : invoke_right */
    case 88:
        /*! Production::    sf_clause : accessible_by */
    case 89:
        /*! Production::    sf_clause : sp_deterministic */
    case 90:
        /*! Production::    sf_clause : parallel_enable */
    case 91:
        /*! Production::    sf_clause : result_cache */
    case 92:
        /*! Production::    sf_clause_list : sf_clause */
    case 95:
        /*! Production::    opt_sf_clause : sf_clause_list */
    case 97:
        /*! Production::    opt_pipelined : PIPELINED */
    case 104:
        /*! Production::    alter_package_clause : EDITIONABLE */
    case 105:
        /*! Production::    alter_package_clause : NONEDITIONABLE */
    case 107:
        /*! Production::    opt_debug : DEBUG */
    case 109:
        /*! Production::    opt_compile_unit : PACKAGE_P */
    case 110:
        /*! Production::    opt_compile_unit : SPECIFICATION */
    case 111:
        /*! Production::    opt_compile_unit : BODY */
    case 116:
        /*! Production::    opt_body : BODY */
    case 118:
        /*! Production::    pl_schema_name : identifier */
    case 121:
        /*! Production::    pl_access_name : identifier */
    case 124:
        /*! Production::    var_name : identifier */
    case 125:
        /*! Production::    field_name : identifier */
    case 126:
        /*! Production::    type_name : identifier */
    case 127:
        /*! Production::    func_name : identifier */
    case 128:
        /*! Production::    proc_name : identifier */
    case 129:
        /*! Production::    param_name : identifier */
    case 130:
        /*! Production::    cursor_name : identifier */
    case 132:
        /*! Production::    opt_label : label_name */
    case 133:
        /*! Production::    label_name : identifier */
    case 134:
        /*! Production::    exception_name : identifier */
    case 136:
        /*! Production::    opt_tail_name : identifier */
    case 140:
        /*! Production::    opt_editionable : EDITIONABLE */
    case 141:
        /*! Production::    opt_editionable : NONEDITIONABLE */
    case 142:
        /*! Production::    is_or_as : IS */
    case 143:
        /*! Production::    is_or_as : AS */
    case 153:
        /*! Production::    trigger_definition : simple_dml_trigger */
    case 154:
        /*! Production::    trigger_definition : compound_dml_trigger */
    case 157:
        /*! Production::    before_or_after : BEFORE */
    case 158:
        /*! Production::    before_or_after : AFTER */
    case 160:
        /*! Production::    dml_event_list : dml_event_tree */
    case 162:
        /*! Production::    dml_event_tree : dml_event */
    case 163:
        /*! Production::    dml_event : INSERT */
    case 164:
        /*! Production::    dml_event : DELETE */
    case 170:
        /*! Production::    referencing_list : referencing_node */
    case 174:
        /*! Production::    ref_name : identifier */
    case 177:
        /*! Production::    opt_enable_or_disable : ENABLE */
    case 178:
        /*! Production::    opt_enable_or_disable : DISABLE */
    case 182:
        /*! Production::    simple_trigger_body : pl_block */
    case 185:
        /*! Production::    timing_point_section_list : timing_point_section */
    case 198:
        /*! Production::    sp_param_list : sp_param */
    case 201:
        /*! Production::    opt_sp_inout : IN */
    case 202:
        /*! Production::    opt_sp_inout : OUT */
    case 206:
        /*! Production::    pl_impl_body : pl_body */
    case 207:
        /*! Production::    pl_impl_body : call_spec */
    case 208:
        /*! Production::    pl_impl_body : EXTERNAL */
    case 209:
        /*! Production::    call_spec : LANGUAGE */
    case 211:
        /*! Production::    pl_lang_stmt_without_semicolon : inline_pragma */
    case 212:
        /*! Production::    pl_lang_stmt_without_semicolon : assign_stmt */
    case 213:
        /*! Production::    pl_lang_stmt_without_semicolon : sql_stmt */
    case 214:
        /*! Production::    pl_lang_stmt_without_semicolon : if_stmt */
    case 215:
        /*! Production::    pl_lang_stmt_without_semicolon : case_stmt */
    case 216:
        /*! Production::    pl_lang_stmt_without_semicolon : basic_loop_stmt */
    case 217:
        /*! Production::    pl_lang_stmt_without_semicolon : while_loop_stmt */
    case 218:
        /*! Production::    pl_lang_stmt_without_semicolon : for_loop_stmt */
    case 219:
        /*! Production::    pl_lang_stmt_without_semicolon : cursor_for_loop_stmt */
    case 220:
        /*! Production::    pl_lang_stmt_without_semicolon : forall_stmt */
    case 221:
        /*! Production::    pl_lang_stmt_without_semicolon : return_stmt */
    case 222:
        /*! Production::    pl_lang_stmt_without_semicolon : continue_stmt */
    case 223:
        /*! Production::    pl_lang_stmt_without_semicolon : exit_stmt */
    case 224:
        /*! Production::    pl_lang_stmt_without_semicolon : open_stmt */
    case 225:
        /*! Production::    pl_lang_stmt_without_semicolon : fetch_stmt */
    case 226:
        /*! Production::    pl_lang_stmt_without_semicolon : close_stmt */
    case 227:
        /*! Production::    pl_lang_stmt_without_semicolon : execute_immediate_stmt */
    case 228:
        /*! Production::    pl_lang_stmt_without_semicolon : raise_stmt */
    case 229:
        /*! Production::    pl_lang_stmt_without_semicolon : pl_block */
    case 230:
        /*! Production::    pl_lang_stmt_without_semicolon : goto_stmt */
    case 231:
        /*! Production::    pl_lang_stmt_without_semicolon : inner_call_stmt */
    case 232:
        /*! Production::    pl_lang_stmt_without_semicolon : null_stmt */
    case 233:
        /*! Production::    pl_lang_stmt_without_semicolon : pipe_row_stmt */
    case 235:
        /*! Production::    pl_left_value_list : pl_left_value */
    case 237:
        /*! Production::    pl_left_value : pl_obj_access_ref */
    case 238:
        /*! Production::    pl_obj_access_ref : pl_access_name */
    case 240:
        /*! Production::    pl_obj_access_ref_suffix_list : pl_obj_access_ref_suffix */
    case 249:
        /*! Production::    sp_when_list : sp_when */
    case 257:
        /*! Production::    opt_declare_section : DECLARE */
    case 261:
        /*! Production::    declare_section : decl_stmt_ext_list */
    case 263:
        /*! Production::    opt_execute_section : execute_section */
    case 267:
        /*! Production::    exception_section : exception_handler */
    case 269:
        /*! Production::    pl_lang_stmt_list : labeled_pl_lang_stmt */
    case 272:
        /*! Production::    opt_decl_stmt_list : decl_stmt_list */
    case 273:
        /*! Production::    decl_stmt_list : decl_stmt */
    case 276:
        /*! Production::    decl_stmt_without_semicolon : type_def */
    case 277:
        /*! Production::    decl_stmt_without_semicolon : subtype_def */
    case 278:
        /*! Production::    decl_stmt_without_semicolon : cursor_decl */
    case 279:
        /*! Production::    decl_stmt_without_semicolon : cursor_def */
    case 280:
        /*! Production::    decl_stmt_without_semicolon : item_decl */
    case 281:
        /*! Production::    decl_stmt_without_semicolon : func_decl */
    case 282:
        /*! Production::    decl_stmt_without_semicolon : proc_decl */
    case 283:
        /*! Production::    item_decl : var_decl */
    case 284:
        /*! Production::    item_decl : constant_decl */
    case 285:
        /*! Production::    item_decl : exception_decl */
    case 286:
        /*! Production::    item_decl : pragma_stmt */
    case 293:
        /*! Production::    opt_decl_stmt_ext_list : decl_stmt_ext_list */
    case 294:
        /*! Production::    decl_stmt_ext_list : decl_stmt_ext */
    case 297:
        /*! Production::    decl_stmt_ext_without_semicolon : decl_stmt_without_semicolon */
    case 298:
        /*! Production::    decl_stmt_ext_without_semicolon : func_def */
    case 299:
        /*! Production::    decl_stmt_ext_without_semicolon : proc_def */
    case 307:
        /*! Production::    opt_return_type : return_type */
    case 309:
        /*! Production::    pl_inner_data_type : pl_inner_scalar_data_type */
    case 310:
        /*! Production::    pl_inner_data_type : pl_obj_access_ref */
    case 313:
        /*! Production::    pl_outer_data_type : pl_outer_scalar_data_type */
    case 314:
        /*! Production::    pl_outer_data_type : pl_obj_access_ref */
    case 318:
        /*! Production::    opt_default : default_expr */
    case 330:
        /*! Production::    forall_sql_stmt : sql_stmt */
    case 331:
        /*! Production::    forall_sql_stmt : execute_immediate_stmt */
    case 333:
        /*! Production::    opt_reverse : REVERSE */
    case 335:
        /*! Production::    for_start : "(" */
    case 336:
        /*! Production::    for_start : number_literal */
    case 337:
        /*! Production::    for_start : IDENT */
    case 338:
        /*! Production::    lower_bound : for_expr */
    case 339:
        /*! Production::    upper_bound : for_expr */
    case 350:
        /*! Production::    opt_label_list : label_list */
    case 351:
        /*! Production::    label_list : label_def */
    case 360:
        /*! Production::    null_stmt : NULLX */
    case 362:
        /*! Production::    pragma_stmt : inline_pragma */
    case 363:
        /*! Production::    pragma_stmt : exception_init_pragma */
    case 364:
        /*! Production::    pragma_stmt : udf_pragma */
    case 365:
        /*! Production::    pragma_stmt : serially_reusable_pragma */
    case 366:
        /*! Production::    pragma_stmt : restrict_references_pragma */
    case 367:
        /*! Production::    pragma_stmt : interface_pragma */
    case 368:
        /*! Production::    pragma_stmt : autonomous_transaction_pragma */
    case 376:
        /*! Production::    error_code : INTNUM */
    case 379:
        /*! Production::    exception_pattern : OTHERS */
    case 380:
        /*! Production::    exception_pattern : exception_list */
    case 381:
        /*! Production::    exception_list : pl_access_name */
    case 388:
        /*! Production::    record_member_list : record_member */
    case 394:
        /*! Production::    type_def : ref_cursor_type_def */
    case 395:
        /*! Production::    type_def : record_type_def */
    case 396:
        /*! Production::    type_def : collection_type_def */
    case 400:
        /*! Production::    opt_subtype_constraint : subtype_range */
    case 405:
        /*! Production::    coll_type_def : assoc_array_type_def */
    case 406:
        /*! Production::    coll_type_def : nested_table_type_def */
    case 407:
        /*! Production::    coll_type_def : varray_type_def */
    case 415:
        /*! Production::    index_type : LONG */
    case 416:
        /*! Production::    index_type : pl_int_type_i */
    case 423:
        /*! Production::    pre_varray : VARRAY */
    case 426:
        /*! Production::    opt_varying : VARYING */
    case 427:
        /*! Production::    pl_inner_scalar_data_type : int_type_i */
    case 431:
        /*! Production::    pl_inner_scalar_data_type : REAL */
    case 432:
        /*! Production::    pl_inner_scalar_data_type : double_type_i */
    case 436:
        /*! Production::    pl_inner_scalar_data_type : datetime_type_i */
    case 444:
        /*! Production::    pl_inner_scalar_data_type : BLOB */
    case 448:
        /*! Production::    pl_inner_scalar_data_type : pl_common_scalar_data_type */
    case 449:
        /*! Production::    pl_inner_simple_not_null_type : simple_type_i */
    case 450:
        /*! Production::    pl_outer_scalar_data_type : int_type_i */
    case 451:
        /*! Production::    pl_outer_scalar_data_type : NUMBER */
    case 452:
        /*! Production::    pl_outer_scalar_data_type : FLOAT */
    case 453:
        /*! Production::    pl_outer_scalar_data_type : REAL */
    case 454:
        /*! Production::    pl_outer_scalar_data_type : double_type_i */
    case 455:
        /*! Production::    pl_outer_scalar_data_type : TIMESTAMP */
    case 458:
        /*! Production::    pl_outer_scalar_data_type : RAW */
    case 459:
        /*! Production::    pl_outer_scalar_data_type : datetime_type_i */
    case 466:
        /*! Production::    pl_outer_scalar_data_type : BLOB */
    case 468:
        /*! Production::    pl_outer_scalar_data_type : UROWID */
    case 469:
        /*! Production::    pl_outer_scalar_data_type : ROWID */
    case 470:
        /*! Production::    pl_outer_scalar_data_type : pl_common_scalar_data_type */
    case 471:
        /*! Production::    pl_common_scalar_data_type : BOOL */
    case 472:
        /*! Production::    pl_common_scalar_data_type : BOOLEAN */
    case 473:
        /*! Production::    pl_common_scalar_data_type : pl_int_type_i */
    case 474:
        /*! Production::    pl_int_type_i : PLS_INTEGER */
    case 475:
        /*! Production::    pl_int_type_i : BINARY_INTEGER */
    case 476:
        /*! Production::    pl_int_type_i : NATURAL */
    case 477:
        /*! Production::    pl_int_type_i : NATURALN */
    case 478:
        /*! Production::    pl_int_type_i : POSITIVE */
    case 479:
        /*! Production::    pl_int_type_i : POSITIVEN */
    case 480:
        /*! Production::    pl_int_type_i : SIGNTYPE */
    case 481:
        /*! Production::    pl_int_type_i : SIMPLE_INTEGER */
    case 482:
        /*! Production::    int_type_i : SMALLINT */
    case 483:
        /*! Production::    int_type_i : INT */
    case 484:
        /*! Production::    int_type_i : INTEGER */
    case 485:
        /*! Production::    int_type_i : NUMERIC */
    case 486:
        /*! Production::    int_type_i : DECIMAL */
    case 487:
        /*! Production::    varchar_type_i : VARCHAR */
    case 488:
        /*! Production::    varchar_type_i : VARCHAR2 */
    case 489:
        /*! Production::    nvarchar_type_i : NVARCHAR */
    case 490:
        /*! Production::    nvarchar_type_i : NVARCHAR2 */
    case 491:
        /*! Production::    number_type_i : DECIMAL */
    case 492:
        /*! Production::    number_type_i : NUMERIC */
    case 493:
        /*! Production::    double_type_i : BINARY_DOUBLE */
    case 494:
        /*! Production::    double_type_i : BINARY_FLOAT */
    case 495:
        /*! Production::    simple_type_i : SIMPLE_DOUBLE */
    case 496:
        /*! Production::    simple_type_i : SIMPLE_FLOAT */
    case 497:
        /*! Production::    datetime_type_i : DATE */
    case 500:
        /*! Production::    opt_number_precision : number_precision */
    case 505:
        /*! Production::    signed_int_num : INTNUM */
    case 511:
        /*! Production::    number_literal : INTNUM */
    case 512:
        /*! Production::    number_literal : DECIMAL_VAL */
    case 515:
        /*! Production::    opt_length_semantics_i : CHARACTER */
    case 516:
        /*! Production::    opt_length_semantics_i : BYTE */
    case 517:
        /*! Production::    opt_string_length_i : string_length_i */
    case 519:
        /*! Production::    opt_binary : BINARY */
    case 522:
        /*! Production::    opt_urowid_length_i : urowid_length_i */
    case 524:
        /*! Production::    collation_name : identifier */
    case 525:
        /*! Production::    collation_name : STRING */
    case 526:
        /*! Production::    charset_name : identifier */
    case 527:
        /*! Production::    charset_name : STRING */
    case 528:
        /*! Production::    charset_name : BINARY */
    case 531:
        /*! Production::    charset_key : CHARSET */
    case 534:
        /*! Production::    opt_collation : collation */
    case 550:
        /*! Production::    opt_exception_name : pl_access_name */
    case 551:
        /*! Production::    normal_into_clause : into_clause */
    case 552:
        /*! Production::    normal_into_clause : bulk_collect_into_clause */
    case 554:
        /*! Production::    opt_normal_into_clause : normal_into_clause */
    case 557:
        /*! Production::    using_list : using_params */
    case 559:
        /*! Production::    using_params : using_param */
    case 564:
        /*! Production::    sql_keyword : SQL_KEYWORD */
    case 565:
        /*! Production::    sql_keyword : INSERT */
    case 566:
        /*! Production::    sql_keyword : UPDATE */
    case 567:
        /*! Production::    sql_keyword : DELETE */
    case 568:
        /*! Production::    sql_keyword : TABLE */
    case 569:
        /*! Production::    sql_keyword : SAVEPOINT */
    case 570:
        /*! Production::    sql_keyword : WITH */
    case 571:
        /*! Production::    sql_keyword : SET */
    case 581:
        /*! Production::    compiler_parameter_list : compiler_parameter */
    case 584:
        /*! Production::    opt_compiler_parameters_clause : compiler_parameter_list */
    case 585:
        /*! Production::    sp_editionable : EDITIONABLE */
    case 586:
        /*! Production::    sp_editionable : NONEDITIONABLE */
    case 587:
        /*! Production::    sp_alter_clause : procedure_compile_clause */
    case 588:
        /*! Production::    sp_alter_clause : sp_editionable */
    case 594:
        /*! Production::    plsql_type_body_decl_list : plsql_type_body_decl */
    case 596:
        /*! Production::    plsql_type_body_decl : subprog_decl_in_type */
    case 597:
        /*! Production::    plsql_type_body_decl : map_order_function_spec */
    case 598:
        /*! Production::    subprog_decl_in_type : proc_or_func_def_in_type */
    case 599:
        /*! Production::    subprog_decl_in_type : constructor_def_in_type */
    case 604:
        /*! Production::    opt_force : FORCE */
    case 608:
        /*! Production::    opt_type_def : object_type_def */
    case 616:
        /*! Production::    sqlj_using : SQLDATA */
    case 617:
        /*! Production::    sqlj_using : CUSTOMDATUM */
    case 618:
        /*! Production::    sqlj_using : ORADATA */
    case 619:
        /*! Production::    final_or_inst : FINAL */
    case 620:
        /*! Production::    final_or_inst : INSTANTIABLE */
    case 624:
        /*! Production::    opt_final_inst_list : final_inst_list */
    case 625:
        /*! Production::    final_inst_list : final_or_inst */
    case 628:
        /*! Production::    attr_list : attr_spec */
    case 636:
        /*! Production::    element_spec : el_element_spec_list_cc */
    case 637:
        /*! Production::    element_spec_long : el_element_spec */
    case 639:
        /*! Production::    element_spec_long : restrict_references_pragma */
    case 640:
        /*! Production::    el_element_spec_list_cc : element_spec_long */
    case 642:
        /*! Production::    el_element_spec : subprogram_spec */
    case 643:
        /*! Production::    el_element_spec : constructor_spec */
    case 644:
        /*! Production::    el_element_spec : map_order_function_spec */
    case 645:
        /*! Production::    inheritance_clauses_list : inheritance_clauses */
    case 647:
        /*! Production::    inheritance_clauses : OVERRIDING */
    case 649:
        /*! Production::    inheritance_clauses : FINAL */
    case 651:
        /*! Production::    inheritance_clauses : INSTANTIABLE */
    case 653:
        /*! Production::    default_or_string : DEFAULT */
    case 654:
        /*! Production::    default_or_string : identifier */
    case 655:
        /*! Production::    assert_list : assert_item */
    case 657:
        /*! Production::    assert_item : TRUST */
    case 658:
        /*! Production::    assert_item : RNDS */
    case 659:
        /*! Production::    assert_item : WNDS */
    case 660:
        /*! Production::    assert_item : RNPS */
    case 661:
        /*! Production::    assert_item : WNPS */
    case 663:
        /*! Production::    member_or_static : MEMBER */
    case 664:
        /*! Production::    member_or_static : STATIC */
    case 665:
        /*! Production::    proc_or_func_spec : proc_decl */
    case 666:
        /*! Production::    proc_or_func_spec : proc_def */
    case 667:
        /*! Production::    proc_or_func_spec : func_decl */
    case 668:
        /*! Production::    proc_or_func_spec : func_def */
    case 669:
        /*! Production::    proc_or_func_spec : sqlj_func_decl */
    case 672:
        /*! Production::    type_or_self : pl_outer_data_type */
    case 681:
        /*! Production::    constr_param_list : constr_param */
    case 688:
        /*! Production::    map_or_order : MAP */
    case 689:
        /*! Production::    map_or_order : ORDER */
    case 692:
        /*! Production::    opt_force_or_validate : FORCE */
    case 693:
        /*! Production::    opt_force_or_validate : VALIDATE */
    case 694:
        /*! Production::    unreserved_keyword : oracle_unreserved_keyword */
    case 695:
        /*! Production::    unreserved_keyword : ob_unreserved_keyword */
    case 696:
        /*! Production::    oracle_unreserved_keyword : AFTER */
    case 697:
        /*! Production::    oracle_unreserved_keyword : AGGREGATE */
    case 698:
        /*! Production::    oracle_unreserved_keyword : AUTONOMOUS_TRANSACTION */
    case 699:
        /*! Production::    oracle_unreserved_keyword : BEFORE */
    case 700:
        /*! Production::    oracle_unreserved_keyword : COMPOUND */
    case 701:
        /*! Production::    oracle_unreserved_keyword : DISABLE */
    case 702:
        /*! Production::    oracle_unreserved_keyword : EACH */
    case 703:
        /*! Production::    oracle_unreserved_keyword : ENABLE */
    case 704:
        /*! Production::    oracle_unreserved_keyword : EXCEPTIONS */
    case 705:
        /*! Production::    oracle_unreserved_keyword : INLINE */
    case 706:
        /*! Production::    oracle_unreserved_keyword : NEW */
    case 707:
        /*! Production::    oracle_unreserved_keyword : OLD */
    case 708:
        /*! Production::    oracle_unreserved_keyword : PARENT */
    case 709:
        /*! Production::    oracle_unreserved_keyword : REFERENCING */
    case 710:
        /*! Production::    oracle_unreserved_keyword : ROW */
    case 711:
        /*! Production::    oracle_unreserved_keyword : TRIGGER */
    case 712:
        /*! Production::    oracle_unreserved_keyword : YES */
    case 713:
        /*! Production::    ob_unreserved_keyword : ACCESSIBLE */
    case 714:
        /*! Production::    ob_unreserved_keyword : AUTHID */
    case 715:
        /*! Production::    ob_unreserved_keyword : BULK */
    case 716:
        /*! Production::    ob_unreserved_keyword : BYTE */
    case 717:
        /*! Production::    ob_unreserved_keyword : C */
    case 718:
        /*! Production::    ob_unreserved_keyword : CALL */
    case 719:
        /*! Production::    ob_unreserved_keyword : CHARSET */
    case 720:
        /*! Production::    ob_unreserved_keyword : COLLATE */
    case 721:
        /*! Production::    ob_unreserved_keyword : COLLECT */
    case 722:
        /*! Production::    ob_unreserved_keyword : COLLATION */
    case 723:
        /*! Production::    ob_unreserved_keyword : COMPILE */
    case 724:
        /*! Production::    ob_unreserved_keyword : CURRENT_USER */
    case 725:
        /*! Production::    ob_unreserved_keyword : CUSTOMDATUM */
    case 726:
        /*! Production::    ob_unreserved_keyword : CONTINUE */
    case 727:
        /*! Production::    ob_unreserved_keyword : DEFINER */
    case 728:
        /*! Production::    ob_unreserved_keyword : DETERMINISTIC */
    case 729:
        /*! Production::    ob_unreserved_keyword : EDITIONABLE */
    case 730:
        /*! Production::    ob_unreserved_keyword : EXECUTE */
    case 731:
        /*! Production::    ob_unreserved_keyword : FORCE */
    case 732:
        /*! Production::    ob_unreserved_keyword : HASH */
    case 733:
        /*! Production::    ob_unreserved_keyword : IMMEDIATE */
    case 734:
        /*! Production::    ob_unreserved_keyword : INDICES */
    case 735:
        /*! Production::    ob_unreserved_keyword : INSTEAD */
    case 736:
        /*! Production::    ob_unreserved_keyword : INTERFACE */
    case 737:
        /*! Production::    ob_unreserved_keyword : JAVA */
    case 738:
        /*! Production::    ob_unreserved_keyword : LIMIT */
    case 739:
        /*! Production::    ob_unreserved_keyword : LOCAL */
    case 740:
        /*! Production::    ob_unreserved_keyword : LONG */
    case 741:
        /*! Production::    ob_unreserved_keyword : NAME */
    case 742:
        /*! Production::    ob_unreserved_keyword : NO */
    case 743:
        /*! Production::    ob_unreserved_keyword : NONEDITIONABLE */
    case 744:
        /*! Production::    ob_unreserved_keyword : OBJECT */
    case 745:
        /*! Production::    ob_unreserved_keyword : OID */
    case 746:
        /*! Production::    ob_unreserved_keyword : ORADATA */
    case 747:
        /*! Production::    ob_unreserved_keyword : PARALLEL_ENABLE */
    case 748:
        /*! Production::    ob_unreserved_keyword : PIPE */
    case 749:
        /*! Production::    ob_unreserved_keyword : PIPELINED */
    case 750:
        /*! Production::    ob_unreserved_keyword : REF */
    case 751:
        /*! Production::    ob_unreserved_keyword : RELIES_ON */
    case 752:
        /*! Production::    ob_unreserved_keyword : REPLACE */
    case 753:
        /*! Production::    ob_unreserved_keyword : RESTRICT_REFERENCES */
    case 754:
        /*! Production::    ob_unreserved_keyword : RESULT */
    case 755:
        /*! Production::    ob_unreserved_keyword : RESULT_CACHE */
    case 756:
        /*! Production::    ob_unreserved_keyword : RETURNING */
    case 757:
        /*! Production::    ob_unreserved_keyword : RNDS */
    case 758:
        /*! Production::    ob_unreserved_keyword : RNPS */
    case 759:
        /*! Production::    ob_unreserved_keyword : SAVE */
    case 760:
        /*! Production::    ob_unreserved_keyword : SERIALLY_REUSABLE */
    case 761:
        /*! Production::    ob_unreserved_keyword : SETTINGS */
    case 762:
        /*! Production::    ob_unreserved_keyword : SPECIFICATION */
    case 763:
        /*! Production::    ob_unreserved_keyword : SQLDATA */
    case 764:
        /*! Production::    ob_unreserved_keyword : TIME */
    case 765:
        /*! Production::    ob_unreserved_keyword : TRUST */
    case 766:
        /*! Production::    ob_unreserved_keyword : UDF */
    case 767:
        /*! Production::    ob_unreserved_keyword : UNDER */
    case 768:
        /*! Production::    ob_unreserved_keyword : USING */
    case 769:
        /*! Production::    ob_unreserved_keyword : USING_NLS_COMP */
    case 770:
        /*! Production::    ob_unreserved_keyword : VALIDATE */
    case 771:
        /*! Production::    ob_unreserved_keyword : VALUE */
    case 772:
        /*! Production::    ob_unreserved_keyword : VARIABLE */
    case 773:
        /*! Production::    ob_unreserved_keyword : VARRAY */
    case 774:
        /*! Production::    ob_unreserved_keyword : VARYING */
    case 775:
        /*! Production::    ob_unreserved_keyword : WNDS */
    case 776:
        /*! Production::    ob_unreserved_keyword : WNPS */
    case 777:
        /*! Production::    ob_unreserved_keyword : YEAR */
    case 778:
        /*! Production::    ob_unreserved_keyword : ZONE */
    case 779:
        /*! Production::    ob_unreserved_keyword : MONTH */
    case 780:
        /*! Production::    ob_unreserved_keyword : DAY */
    case 781:
        /*! Production::    ob_unreserved_keyword : HOUR */
    case 782:
        /*! Production::    ob_unreserved_keyword : MINUTE */
    case 783:
        /*! Production::    ob_unreserved_keyword : SECOND */
    
        // default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 1:
        /*! Production::    pl_entry : pl_entry_stmt_list */
    
        // default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-)
        
        
        let a = yyvstack, b = yyrulelength, c = yystack, d= yysp, e = yylstack;
        break;
    
    case 2:
        /*! Production::    pl_entry_stmt_list : pl_entry_stmt END_P */
    case 35:
        /*! Production::    sp_cparam : opt_cexpr opt_sp_cparam_with_assign */
    case 37:
        /*! Production::    opt_sp_cparam_with_assign : PARAM_ASSIGN_OPERATOR opt_cexpr */
    case 39:
        /*! Production::    anonymous_stmt : opt_label_list pl_block */
    case 40:
        /*! Production::    invoke_right : AUTHID CURRENT_USER */
    case 41:
        /*! Production::    invoke_right : AUTHID DEFINER */
    case 50:
        /*! Production::    accessor : unit_kind pl_schema_name */
    case 56:
        /*! Production::    proc_clause_list : proc_clause_list proc_clause */
    case 86:
        /*! Production::    result_cache : RESULT_CACHE opt_relies_on_clause */
    case 93:
        /*! Production::    sf_clause_list : sf_clause_list sf_clause */
    case 113:
        /*! Production::    opt_reuse_settings : REUSE SETTINGS */
    case 138:
        /*! Production::    opt_replace : OR REPLACE */
    case 165:
        /*! Production::    dml_event : UPDATE opt_column_list */
    case 167:
        /*! Production::    opt_referencing_list : REFERENCING referencing_list */
    case 169:
        /*! Production::    referencing_list : referencing_list referencing_node */
    case 187:
        /*! Production::    timing_point : BEFORE STATEMENT */
    case 189:
        /*! Production::    timing_point : AFTER STATEMENT */
    case 192:
        /*! Production::    tps_body : execute_section END_KEY */
    case 193:
        /*! Production::    opt_column_list : OF column_list */
    case 203:
        /*! Production::    opt_sp_inout : OUT NOCOPY */
    case 204:
        /*! Production::    opt_sp_inout : IN OUT */
    case 210:
        /*! Production::    pl_lang_stmt : pl_lang_stmt_without_semicolon DELIMITER */
    case 239:
        /*! Production::    pl_obj_access_ref : pl_access_name pl_obj_access_ref_suffix_list */
    case 241:
        /*! Production::    pl_obj_access_ref_suffix_list : pl_obj_access_ref_suffix pl_obj_access_ref_suffix_list */
    case 242:
        /*! Production::    pl_obj_access_ref_suffix : "." DELETE */
    case 243:
        /*! Production::    pl_obj_access_ref_suffix : "." identifier */
    case 250:
        /*! Production::    sp_when_list : sp_when_list sp_when */
    case 253:
        /*! Production::    opt_sp_elseifs : ELSIF sp_if */
    case 254:
        /*! Production::    opt_sp_elseifs : ELSE pl_lang_stmt_list */
    case 256:
        /*! Production::    opt_declare_section : DECLARE declare_section */
    case 266:
        /*! Production::    opt_exception_section : EXCEPTION exception_section */
    case 268:
        /*! Production::    exception_section : exception_handler exception_section */
    case 270:
        /*! Production::    pl_lang_stmt_list : pl_lang_stmt_list labeled_pl_lang_stmt */
    case 274:
        /*! Production::    decl_stmt_list : decl_stmt_list decl_stmt */
    case 275:
        /*! Production::    decl_stmt : decl_stmt_without_semicolon DELIMITER */
    case 289:
        /*! Production::    exception_decl : exception_name EXCEPTION */
    case 295:
        /*! Production::    decl_stmt_ext_list : decl_stmt_ext_list decl_stmt_ext */
    case 296:
        /*! Production::    decl_stmt_ext : decl_stmt_ext_without_semicolon DELIMITER */
    case 305:
        /*! Production::    return_type : RETURN pl_outer_data_type */
    case 319:
        /*! Production::    default_expr : DEFAULT bool_expr */
    case 320:
        /*! Production::    default_expr : ASSIGN_OPERATOR bool_expr */
    case 341:
        /*! Production::    opt_save_exception : SAVE EXCEPTIONS */
    case 348:
        /*! Production::    labeled_pl_lang_stmt : opt_label_list pl_lang_stmt */
    case 352:
        /*! Production::    label_list : label_list label_def */
    case 354:
        /*! Production::    return_stmt : RETURN return_expr */
    case 355:
        /*! Production::    goto_stmt : GOTO label_name */
    case 357:
        /*! Production::    continue_stmt : CONTINUE opt_label */
    case 359:
        /*! Production::    exit_stmt : EXIT opt_label */
    case 371:
        /*! Production::    udf_pragma : PRAGMA UDF */
    case 372:
        /*! Production::    serially_reusable_pragma : PRAGMA SERIALLY_REUSABLE */
    case 375:
        /*! Production::    autonomous_transaction_pragma : PRAGMA AUTONOMOUS_TRANSACTION */
    case 377:
        /*! Production::    error_code : "-" INTNUM */
    case 386:
        /*! Production::    opt_if_exists : IF EXISTS */
    case 393:
        /*! Production::    opt_record_member_default : ASSIGN_OPERATOR pl_right_value */
    case 398:
        /*! Production::    basetype_of_subtype : pl_inner_data_type opt_subtype_constraint */
    case 412:
        /*! Production::    index_type : VARCHAR2 string_length_i */
    case 413:
        /*! Production::    index_type : VARCHAR string_length_i */
    case 414:
        /*! Production::    index_type : STRING string_length_i */
    case 420:
        /*! Production::    opt_not_null : NOT NULLX */
    case 424:
        /*! Production::    pre_varray : opt_varying ARRAY */
    case 428:
        /*! Production::    pl_inner_scalar_data_type : number_type_i number_precision */
    case 429:
        /*! Production::    pl_inner_scalar_data_type : NUMBER opt_number_precision */
    case 430:
        /*! Production::    pl_inner_scalar_data_type : FLOAT opt_float_precision */
    case 433:
        /*! Production::    pl_inner_scalar_data_type : TIMESTAMP opt_datetime_fsp_i */
    case 446:
        /*! Production::    pl_inner_scalar_data_type : UROWID opt_urowid_length_i */
    case 447:
        /*! Production::    pl_inner_scalar_data_type : ROWID opt_urowid_length_i */
    case 503:
        /*! Production::    opt_float_precision : "(" ")" */
    case 506:
        /*! Production::    signed_int_num : "-" INTNUM */
    case 530:
        /*! Production::    opt_charset : charset_key charset_name */
    case 532:
        /*! Production::    charset_key : CHARACTER SET */
    case 533:
        /*! Production::    collation : COLLATE collation_name */
    case 538:
        /*! Production::    for_sql : FOR sql_stmt */
    case 539:
        /*! Production::    for_sql : FOR expr */
    case 542:
        /*! Production::    into_clause : INTO pl_left_value_list */
    case 545:
        /*! Production::    opt_limit : LIMIT expr */
    case 546:
        /*! Production::    close_stmt : CLOSE pl_access_name */
    case 548:
        /*! Production::    raise_stmt : RAISE opt_exception_name */
    case 556:
        /*! Production::    opt_using_clause : USING using_list */
    case 560:
        /*! Production::    using_param : opt_sp_inout expr */
    case 562:
        /*! Production::    opt_dynamic_returning_clause : RETURNING normal_into_clause */
    case 563:
        /*! Production::    opt_dynamic_returning_clause : RETURN normal_into_clause */
    case 582:
        /*! Production::    compiler_parameter_list : compiler_parameter_list compiler_parameter */
    case 593:
        /*! Production::    plsql_type_body_decl_list_semicolon : plsql_type_body_decl_list DELIMITER */
    case 600:
        /*! Production::    proc_or_func_def_in_type : member_or_static plsql_procedure_source */
    case 601:
        /*! Production::    proc_or_func_def_in_type : member_or_static plsql_function_source */
    case 602:
        /*! Production::    constructor_def_in_type : opt_final_inst_list constructor_spec */
    case 606:
        /*! Production::    opt_oid_clause : OID STRING */
    case 612:
        /*! Production::    object_or_under : is_or_as OBJECT */
    case 613:
        /*! Production::    object_or_under : UNDER pl_schema_name */
    case 621:
        /*! Production::    final_or_inst : NOT FINAL */
    case 622:
        /*! Production::    final_or_inst : NOT INSTANTIABLE */
    case 626:
        /*! Production::    final_inst_list : final_inst_list final_or_inst */
    case 635:
        /*! Production::    opt_element_spec : "," element_spec */
    case 638:
        /*! Production::    element_spec_long : inheritance_clauses_list el_element_spec */
    case 646:
        /*! Production::    inheritance_clauses_list : inheritance_clauses_list inheritance_clauses */
    case 648:
        /*! Production::    inheritance_clauses : NOT OVERRIDING */
    case 650:
        /*! Production::    inheritance_clauses : NOT FINAL */
    case 652:
        /*! Production::    inheritance_clauses : NOT INSTANTIABLE */
    case 662:
        /*! Production::    subprogram_spec : member_or_static proc_or_func_spec */
    case 675:
        /*! Production::    varname_or_name : NAME STRING */
    case 683:
        /*! Production::    constr_param : param_name pl_outer_data_type */
    case 684:
        /*! Production::    opt_constructor_impl : is_or_as pl_impl_body */
    
        // default action (generated by JISON mode none/none :: 2,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 2,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 3:
        /*! Production::    pl_entry_stmt_list : pl_entry_stmt DELIMITER END_P */
    case 30:
        /*! Production::    sp_cparam_list : "(" opt_sp_cparams ")" */
    case 33:
        /*! Production::    opt_sp_cparams : opt_sp_cparams "," sp_cparam */
    case 51:
        /*! Production::    accessor_list : accessor_list "," accessor */
    case 68:
        /*! Production::    column_list : column_list "," column */
    case 79:
        /*! Production::    data_source_list : data_source_list "," data_source */
    case 117:
        /*! Production::    pl_schema_name : identifier "." identifier */
    case 120:
        /*! Production::    pl_access_name : identifier "." identifier */
    case 122:
        /*! Production::    pl_access_name : identifier "." DELETE */
    case 151:
        /*! Production::    opt_default_collation : DEFAULT COLLATION USING_NLS_COMP */
    case 159:
        /*! Production::    dml_event_option : dml_event_list ON pl_schema_name */
    case 161:
        /*! Production::    dml_event_tree : dml_event_tree OR dml_event */
    case 166:
        /*! Production::    update_column_list : UPDATE OF column_list */
    case 171:
        /*! Production::    referencing_node : OLD AS ref_name */
    case 172:
        /*! Production::    referencing_node : NEW AS ref_name */
    case 173:
        /*! Production::    referencing_node : PARENT AS ref_name */
    case 175:
        /*! Production::    opt_for_each_row : FOR EACH ROW */
    case 184:
        /*! Production::    timing_point_section_list : timing_point_section_list "," timing_point_section */
    case 188:
        /*! Production::    timing_point : BEFORE EACH ROW */
    case 190:
        /*! Production::    timing_point : AFTER EACH ROW */
    case 196:
        /*! Production::    opt_sp_param_list : "(" sp_param_list ")" */
    case 197:
        /*! Production::    sp_param_list : sp_param_list "," sp_param */
    case 205:
        /*! Production::    opt_sp_inout : IN OUT NOCOPY */
    case 234:
        /*! Production::    assign_stmt : pl_left_value ASSIGN_OPERATOR pl_right_value */
    case 236:
        /*! Production::    pl_left_value_list : pl_left_value "," pl_left_value_list */
    case 244:
        /*! Production::    pl_obj_access_ref_suffix : "(" opt_sp_cparams ")" */
    case 260:
        /*! Production::    pl_body : execute_section END_KEY opt_tail_name */
    case 264:
        /*! Production::    execute_section : BEGIN_KEY pl_lang_stmt_list opt_exception_section */
    case 301:
        /*! Production::    func_def : func_decl is_or_as pl_impl_body */
    case 303:
        /*! Production::    proc_def : proc_decl is_or_as pl_impl_body */
    case 311:
        /*! Production::    pl_inner_data_type : pl_obj_access_ref "%" TYPE */
    case 312:
        /*! Production::    pl_inner_data_type : pl_obj_access_ref "%" ROWTYPE */
    case 315:
        /*! Production::    pl_outer_data_type : pl_obj_access_ref "%" TYPE */
    case 316:
        /*! Production::    pl_outer_data_type : pl_obj_access_ref "%" ROWTYPE */
    case 344:
        /*! Production::    bound_clause : lower_bound RANGE_OPERATOR upper_bound */
    case 346:
        /*! Production::    bound_clause : VALUES OF pl_obj_access_ref */
    case 353:
        /*! Production::    label_def : LABEL_LEFT label_name LABEL_RIGHT */
    case 382:
        /*! Production::    exception_list : exception_list OR pl_access_name */
    case 387:
        /*! Production::    drop_trigger_stmt : DROP TRIGGER pl_schema_name */
    case 389:
        /*! Production::    record_member_list : record_member_list "," record_member */
    case 409:
        /*! Production::    nested_table_type_def : TABLE OF pl_inner_simple_not_null_type */
    case 417:
        /*! Production::    index_type : pl_obj_access_ref "%" TYPE */
    case 418:
        /*! Production::    index_type : pl_obj_access_ref "%" ROWTYPE */
    case 499:
        /*! Production::    number_precision : "(" signed_int_num ")" */
    case 502:
        /*! Production::    opt_float_precision : "(" INTNUM ")" */
    case 507:
        /*! Production::    opt_datetime_fsp_i : "(" INTNUM ")" */
    case 509:
        /*! Production::    opt_interval_leading_fsp_i : "(" INTNUM ")" */
    case 521:
        /*! Production::    urowid_length_i : "(" INTNUM ")" */
    case 536:
        /*! Production::    open_stmt : OPEN pl_access_name opt_sp_cparam_list */
    case 540:
        /*! Production::    fetch_stmt : FETCH pl_access_name into_clause */
    case 558:
        /*! Production::    using_params : using_params "," using_param */
    case 580:
        /*! Production::    compiler_parameter : identifier "=" identifier */
    case 595:
        /*! Production::    plsql_type_body_decl_list : plsql_type_body_decl_list DELIMITER plsql_type_body_decl */
    case 609:
        /*! Production::    opt_type_def : opt_invoke_right is_or_as varray_type_def */
    case 610:
        /*! Production::    opt_type_def : opt_invoke_right is_or_as nested_table_type_def */
    case 629:
        /*! Production::    attr_list : attr_list "," attr_spec */
    case 630:
        /*! Production::    attr_spec : identifier pl_inner_data_type opt_sqlj_obj_type_attr */
    case 631:
        /*! Production::    attr_spec : identifier pl_inner_simple_not_null_type opt_sqlj_obj_type_attr */
    case 633:
        /*! Production::    opt_sqlj_obj_type_attr : EXTERNAL NAME STRING */
    case 641:
        /*! Production::    el_element_spec_list_cc : el_element_spec_list_cc "," element_spec_long */
    case 656:
        /*! Production::    assert_list : assert_list "," assert_item */
    case 673:
        /*! Production::    type_or_self : SELF AS RESULT */
    case 674:
        /*! Production::    varname_or_name : VARIABLE NAME STRING */
    case 678:
        /*! Production::    opt_constructor_param : "(" constr_param_list ")" */
    case 682:
        /*! Production::    constr_param_list : constr_param_list "," constr_param */
    case 685:
        /*! Production::    map_order_function_spec : map_or_order MEMBER func_decl */
    case 686:
        /*! Production::    map_order_function_spec : map_or_order MEMBER func_def */
    case 687:
        /*! Production::    map_order_function_spec : map_or_order MEMBER sqlj_func_decl */
    
        // default action (generated by JISON mode none/none :: 3,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 3,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 31:
        /*! Production::    opt_sp_cparam_list : %epsilon */
    case 36:
        /*! Production::    opt_sp_cparam_with_assign : %epsilon */
    case 42:
        /*! Production::    opt_invoke_right : %epsilon */
    case 58:
        /*! Production::    opt_proc_clause : %epsilon */
    case 81:
        /*! Production::    opt_data_source_list : %epsilon */
    case 84:
        /*! Production::    opt_relies_on_clause : %epsilon */
    case 94:
        /*! Production::    opt_sf_clause : %epsilon */
    case 96:
        /*! Production::    opt_pipelined : %epsilon */
    case 106:
        /*! Production::    opt_debug : %epsilon */
    case 108:
        /*! Production::    opt_compile_unit : %epsilon */
    case 112:
        /*! Production::    opt_reuse_settings : %epsilon */
    case 115:
        /*! Production::    opt_body : %epsilon */
    case 131:
        /*! Production::    opt_label : %epsilon */
    case 135:
        /*! Production::    opt_tail_name : %epsilon */
    case 137:
        /*! Production::    opt_replace : %epsilon */
    case 139:
        /*! Production::    opt_editionable : %epsilon */
    case 152:
        /*! Production::    opt_default_collation : %epsilon */
    case 168:
        /*! Production::    opt_referencing_list : %epsilon */
    case 176:
        /*! Production::    opt_for_each_row : %epsilon */
    case 179:
        /*! Production::    opt_enable_or_disable : %epsilon */
    case 181:
        /*! Production::    opt_when_condition : %epsilon */
    case 194:
        /*! Production::    opt_column_list : %epsilon */
    case 195:
        /*! Production::    opt_sp_param_list : %epsilon */
    case 200:
        /*! Production::    opt_sp_inout : %epsilon */
    case 252:
        /*! Production::    opt_sp_elseifs : %epsilon */
    case 258:
        /*! Production::    opt_declare_section : %epsilon */
    case 262:
        /*! Production::    opt_execute_section : %epsilon */
    case 265:
        /*! Production::    opt_exception_section : %epsilon */
    case 271:
        /*! Production::    opt_decl_stmt_list : %epsilon */
    case 292:
        /*! Production::    opt_decl_stmt_ext_list : %epsilon */
    case 306:
        /*! Production::    opt_return_type : %epsilon */
    case 317:
        /*! Production::    opt_default : %epsilon */
    case 332:
        /*! Production::    opt_reverse : %epsilon */
    case 340:
        /*! Production::    opt_save_exception : %epsilon */
    case 342:
        /*! Production::    opt_between_bound : %epsilon */
    case 349:
        /*! Production::    opt_label_list : %epsilon */
    case 385:
        /*! Production::    opt_if_exists : %epsilon */
    case 392:
        /*! Production::    opt_record_member_default : %epsilon */
    case 399:
        /*! Production::    opt_subtype_constraint : %epsilon */
    case 419:
        /*! Production::    opt_not_null : %epsilon */
    case 425:
        /*! Production::    opt_varying : %epsilon */
    case 501:
        /*! Production::    opt_number_precision : %epsilon */
    case 504:
        /*! Production::    opt_float_precision : %epsilon */
    case 508:
        /*! Production::    opt_datetime_fsp_i : %epsilon */
    case 510:
        /*! Production::    opt_interval_leading_fsp_i : %epsilon */
    case 514:
        /*! Production::    opt_length_semantics_i : %epsilon */
    case 518:
        /*! Production::    opt_string_length_i : %epsilon */
    case 520:
        /*! Production::    opt_binary : %epsilon */
    case 523:
        /*! Production::    opt_urowid_length_i : %epsilon */
    case 529:
        /*! Production::    opt_charset : %epsilon */
    case 535:
        /*! Production::    opt_collation : %epsilon */
    case 544:
        /*! Production::    opt_limit : %epsilon */
    case 549:
        /*! Production::    opt_exception_name : %epsilon */
    case 553:
        /*! Production::    opt_normal_into_clause : %epsilon */
    case 555:
        /*! Production::    opt_using_clause : %epsilon */
    case 561:
        /*! Production::    opt_dynamic_returning_clause : %epsilon */
    case 583:
        /*! Production::    opt_compiler_parameters_clause : %epsilon */
    case 603:
        /*! Production::    opt_force : %epsilon */
    case 605:
        /*! Production::    opt_oid_clause : %epsilon */
    case 607:
        /*! Production::    opt_type_def : %epsilon */
    case 614:
        /*! Production::    opt_sqlj_obj_type : %epsilon */
    case 623:
        /*! Production::    opt_final_inst_list : %epsilon */
    case 632:
        /*! Production::    opt_sqlj_obj_type_attr : %epsilon */
    case 634:
        /*! Production::    opt_element_spec : %epsilon */
    case 677:
        /*! Production::    opt_constructor_param : %epsilon */
    case 691:
        /*! Production::    opt_force_or_validate : %epsilon */
    
        // default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 38:
        /*! Production::    opt_cexpr : %epsilon */
    
        // default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';', ',', '=>', ')'])
        break;
    
    case 53:
        /*! Production::    accessible_by : ACCESSIBLE BY "(" accessor_list ")" */
    case 74:
        /*! Production::    partition_by : hash_or_range "(" column_list ")" stream_clause */
    case 119:
        /*! Production::    pl_access_name : identifier "." identifier "." identifier */
    case 123:
        /*! Production::    pl_access_name : identifier "." identifier "." DELETE */
    case 156:
        /*! Production::    compound_dml_trigger : FOR dml_event_option opt_enable_or_disable opt_when_condition compound_trigger_body */
    case 287:
        /*! Production::    constant_decl : var_name CONSTANT pl_inner_data_type opt_not_null default_expr */
    case 288:
        /*! Production::    constant_decl : var_name CONSTANT pl_inner_simple_not_null_type opt_not_null default_expr */
    case 324:
        /*! Production::    basic_loop_stmt : LOOP pl_lang_stmt_list END_KEY LOOP opt_label */
    case 361:
        /*! Production::    pipe_row_stmt : PIPE ROW "(" expr ")" */
    case 397:
        /*! Production::    subtype_def : SUBTYPE type_name IS basetype_of_subtype opt_not_null */
    case 434:
        /*! Production::    pl_inner_scalar_data_type : TIMESTAMP opt_datetime_fsp_i WITH TIME ZONE */
    case 437:
        /*! Production::    pl_inner_scalar_data_type : CHARACTER opt_string_length_i opt_binary opt_charset opt_collation */
    case 438:
        /*! Production::    pl_inner_scalar_data_type : NCHAR opt_string_length_i opt_binary opt_charset opt_collation */
    case 440:
        /*! Production::    pl_inner_scalar_data_type : varchar_type_i string_length_i opt_binary opt_charset opt_collation */
    case 441:
        /*! Production::    pl_inner_scalar_data_type : nvarchar_type_i string_length_i opt_binary opt_charset opt_collation */
    case 442:
        /*! Production::    pl_inner_scalar_data_type : INTERVAL YEAR opt_interval_leading_fsp_i TO MONTH */
    case 457:
        /*! Production::    pl_outer_scalar_data_type : TIMESTAMP WITH LOCAL TIME ZONE */
    case 498:
        /*! Production::    number_precision : "(" signed_int_num "," signed_int_num ")" */
    case 590:
        /*! Production::    plsql_type_spec_source : TYPE pl_schema_name opt_force opt_oid_clause opt_type_def */
    case 611:
        /*! Production::    object_type_def : opt_invoke_right object_or_under opt_sqlj_obj_type attr_and_element_spec opt_final_inst_list */
    case 680:
        /*! Production::    self_inout : SELF IN OUT pl_outer_data_type "," */
    
        // default action (generated by JISON mode none/none :: 5,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 5,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 71:
        /*! Production::    stream_clause : order_or_cluster expr BY "(" column_list ")" */
    case 147:
        /*! Production::    plsql_procedure_source : PROCEDURE pl_schema_name opt_sp_param_list opt_proc_clause is_or_as pl_impl_body */
    case 183:
        /*! Production::    compound_trigger_body : COMPOUND TRIGGER opt_decl_stmt_ext_list timing_point_section_list END_KEY opt_tail_name */
    case 308:
        /*! Production::    cursor_def : CURSOR cursor_name opt_sp_param_list opt_return_type IS sql_stmt */
    case 329:
        /*! Production::    forall_stmt : FORALL identifier IN bound_clause opt_save_exception forall_sql_stmt */
    case 402:
        /*! Production::    ref_cursor_type_def : TYPE type_name IS REF CURSOR opt_return_type */
    case 411:
        /*! Production::    assoc_array_type_def : TABLE OF pl_inner_simple_not_null_type INDEX BY index_type */
    case 422:
        /*! Production::    varray_type_def : pre_varray "(" INTNUM ")" OF pl_inner_simple_not_null_type */
    case 435:
        /*! Production::    pl_inner_scalar_data_type : TIMESTAMP opt_datetime_fsp_i WITH LOCAL TIME ZONE */
    case 443:
        /*! Production::    pl_inner_scalar_data_type : INTERVAL DAY opt_interval_leading_fsp_i TO SECOND opt_datetime_fsp_i */
    case 547:
        /*! Production::    execute_immediate_stmt : EXECUTE IMMEDIATE expr opt_normal_into_clause opt_using_clause opt_dynamic_returning_clause */
    case 592:
        /*! Production::    plsql_type_body_source : TYPE BODY pl_schema_name is_or_as plsql_type_body_decl_list_semicolon END_KEY */
    
        // default action (generated by JISON mode none/none :: 6,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 6,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 73:
        /*! Production::    partition_by : VALUE "(" column ")" */
    case 75:
        /*! Production::    partition_by : hash_or_range "(" column_list ")" */
    case 83:
        /*! Production::    relies_on_clause : RELIES_ON "(" opt_data_source_list ")" */
    case 98:
        /*! Production::    create_package_stmt : CREATE opt_replace opt_editionable package_block */
    case 100:
        /*! Production::    create_package_body_stmt : CREATE opt_replace opt_editionable package_body_block */
    case 102:
        /*! Production::    alter_package_stmt : ALTER PACKAGE_P pl_schema_name alter_package_clause */
    case 103:
        /*! Production::    alter_package_clause : COMPILE opt_debug opt_compile_unit opt_reuse_settings */
    case 114:
        /*! Production::    drop_package_stmt : DROP PACKAGE_P opt_body pl_schema_name */
    case 144:
        /*! Production::    create_procedure_stmt : CREATE opt_replace opt_editionable plsql_procedure_source */
    case 145:
        /*! Production::    create_function_stmt : CREATE opt_replace opt_editionable plsql_function_source */
    case 146:
        /*! Production::    create_trigger_stmt : CREATE opt_replace opt_editionable plsql_trigger_source */
    case 150:
        /*! Production::    plsql_trigger_source : TRIGGER pl_schema_name opt_default_collation trigger_definition */
    case 180:
        /*! Production::    opt_when_condition : WHEN "(" bool_expr ")" */
    case 186:
        /*! Production::    timing_point_section : timing_point IS tps_body timing_point */
    case 191:
        /*! Production::    timing_point : INSTEAD OF EACH ROW */
    case 199:
        /*! Production::    sp_param : param_name opt_sp_inout pl_outer_data_type opt_default */
    case 246:
        /*! Production::    if_stmt : IF sp_if END_KEY IF */
    case 247:
        /*! Production::    sp_if : bool_expr THEN pl_lang_stmt_list opt_sp_elseifs */
    case 251:
        /*! Production::    sp_when : WHEN bool_expr THEN pl_lang_stmt_list */
    case 255:
        /*! Production::    pl_block : opt_declare_section execute_section END_KEY opt_tail_name */
    case 259:
        /*! Production::    pl_body : declare_section execute_section END_KEY opt_tail_name */
    case 290:
        /*! Production::    var_decl : var_name pl_inner_data_type opt_not_null opt_default */
    case 291:
        /*! Production::    var_decl : var_name pl_inner_simple_not_null_type opt_not_null opt_default */
    case 302:
        /*! Production::    proc_decl : PROCEDURE proc_name opt_sp_param_list opt_proc_clause */
    case 304:
        /*! Production::    cursor_decl : CURSOR cursor_name opt_sp_param_list return_type */
    case 343:
        /*! Production::    opt_between_bound : BETWEEN lower_bound AND upper_bound */
    case 345:
        /*! Production::    bound_clause : INDICES OF pl_obj_access_ref opt_between_bound */
    case 356:
        /*! Production::    continue_stmt : CONTINUE opt_label WHEN bool_expr */
    case 358:
        /*! Production::    exit_stmt : EXIT opt_label WHEN bool_expr */
    case 378:
        /*! Production::    exception_handler : WHEN exception_pattern THEN pl_lang_stmt_list */
    case 383:
        /*! Production::    drop_procedure_stmt : DROP PROCEDURE opt_if_exists pl_schema_name */
    case 384:
        /*! Production::    drop_function_stmt : DROP FUNCTION opt_if_exists pl_schema_name */
    case 390:
        /*! Production::    record_member : field_name pl_inner_data_type opt_not_null opt_record_member_default */
    case 391:
        /*! Production::    record_member : field_name pl_inner_simple_not_null_type opt_not_null opt_record_member_default */
    case 401:
        /*! Production::    subtype_range : RANGE lower_bound RANGE_OPERATOR upper_bound */
    case 404:
        /*! Production::    collection_type_def : TYPE type_name IS coll_type_def */
    case 408:
        /*! Production::    nested_table_type_def : TABLE OF pl_inner_data_type opt_not_null */
    case 439:
        /*! Production::    pl_inner_scalar_data_type : RAW "(" INTNUM ")" */
    case 445:
        /*! Production::    pl_inner_scalar_data_type : CLOB opt_binary opt_charset opt_collation */
    case 456:
        /*! Production::    pl_outer_scalar_data_type : TIMESTAMP WITH TIME ZONE */
    case 460:
        /*! Production::    pl_outer_scalar_data_type : CHARACTER opt_binary opt_charset opt_collation */
    case 461:
        /*! Production::    pl_outer_scalar_data_type : NCHAR opt_binary opt_charset opt_collation */
    case 462:
        /*! Production::    pl_outer_scalar_data_type : varchar_type_i opt_binary opt_charset opt_collation */
    case 463:
        /*! Production::    pl_outer_scalar_data_type : nvarchar_type_i opt_binary opt_charset opt_collation */
    case 464:
        /*! Production::    pl_outer_scalar_data_type : INTERVAL YEAR TO MONTH */
    case 465:
        /*! Production::    pl_outer_scalar_data_type : INTERVAL DAY TO SECOND */
    case 467:
        /*! Production::    pl_outer_scalar_data_type : CLOB opt_binary opt_charset opt_collation */
    case 513:
        /*! Production::    string_length_i : "(" number_literal opt_length_semantics_i ")" */
    case 537:
        /*! Production::    open_stmt : OPEN cursor_name for_sql opt_using_clause */
    case 541:
        /*! Production::    fetch_stmt : FETCH pl_access_name bulk_collect_into_clause opt_limit */
    case 543:
        /*! Production::    bulk_collect_into_clause : BULK COLLECT INTO pl_left_value_list */
    case 577:
        /*! Production::    alter_procedure_stmt : ALTER PROCEDURE pl_schema_name sp_alter_clause */
    case 578:
        /*! Production::    alter_function_stmt : ALTER FUNCTION pl_schema_name sp_alter_clause */
    case 579:
        /*! Production::    procedure_compile_clause : COMPILE opt_debug opt_compiler_parameters_clause opt_reuse_settings */
    case 589:
        /*! Production::    create_type_stmt : CREATE opt_replace opt_editionable plsql_type_spec_source */
    case 591:
        /*! Production::    create_type_body_stmt : CREATE opt_replace opt_editionable plsql_type_body_source */
    case 627:
        /*! Production::    attr_and_element_spec : "(" attr_list opt_element_spec ")" */
    case 670:
        /*! Production::    sqlj_func_decl : FUNCTION func_name opt_sp_param_list sqlj_obj_type_sig */
    case 671:
        /*! Production::    sqlj_obj_type_sig : RETURN type_or_self EXTERNAL varname_or_name */
    case 679:
        /*! Production::    opt_constructor_param : "(" self_inout constr_param_list ")" */
    case 690:
        /*! Production::    drop_type_stmt : DROP TYPE pl_schema_name opt_force_or_validate */
    
        // default action (generated by JISON mode none/none :: 4,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 4,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 77:
        /*! Production::    parallel_enable : PARALLEL_ENABLE "(" PARTITION argument BY partition_by ")" */
    case 99:
        /*! Production::    package_block : PACKAGE_P pl_schema_name opt_proc_clause is_or_as opt_decl_stmt_list END_KEY opt_tail_name */
    case 155:
        /*! Production::    simple_dml_trigger : before_or_after dml_event_option opt_referencing_list opt_for_each_row opt_enable_or_disable opt_when_condition simple_trigger_body */
    case 248:
        /*! Production::    case_stmt : CASE expr sp_when_list opt_sp_elseifs END_KEY CASE opt_label */
    case 300:
        /*! Production::    func_decl : FUNCTION func_name opt_sp_param_list RETURN pl_outer_data_type opt_sf_clause opt_pipelined */
    case 325:
        /*! Production::    while_loop_stmt : WHILE bool_expr LOOP pl_lang_stmt_list END_KEY LOOP opt_label */
    case 369:
        /*! Production::    inline_pragma : PRAGMA INLINE "(" identifier "," STRING ")" */
    case 370:
        /*! Production::    exception_init_pragma : PRAGMA EXCEPTION_INIT "(" exception_name "," error_code ")" */
    case 373:
        /*! Production::    restrict_references_pragma : PRAGMA RESTRICT_REFERENCES "(" default_or_string "," assert_list ")" */
    case 374:
        /*! Production::    interface_pragma : PRAGMA INTERFACE "(" C "," identifier ")" */
    case 403:
        /*! Production::    record_type_def : TYPE type_name IS RECORD "(" record_member_list ")" */
    case 410:
        /*! Production::    assoc_array_type_def : TABLE OF pl_inner_data_type opt_not_null INDEX BY index_type */
    case 421:
        /*! Production::    varray_type_def : pre_varray "(" INTNUM ")" OF pl_inner_data_type opt_not_null */
    case 615:
        /*! Production::    opt_sqlj_obj_type : EXTERNAL NAME pl_schema_name LANGUAGE JAVA USING sqlj_using */
    
        // default action (generated by JISON mode none/none :: 7,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 7,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 101:
        /*! Production::    package_body_block : PACKAGE_P BODY pl_schema_name is_or_as opt_decl_stmt_ext_list opt_execute_section END_KEY opt_tail_name */
    
        // default action (generated by JISON mode none/none :: 8,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 8,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 148:
        /*! Production::    plsql_function_source : FUNCTION pl_schema_name opt_sp_param_list RETURN pl_outer_data_type opt_sf_clause opt_pipelined is_or_as pl_impl_body */
    case 149:
        /*! Production::    plsql_function_source : FUNCTION pl_schema_name opt_sp_param_list RETURN pl_outer_data_type opt_sf_clause AGGREGATE USING pl_schema_name */
    case 676:
        /*! Production::    constructor_spec : CONSTRUCTOR FUNCTION pl_outer_scalar_data_type opt_constructor_param RETURN SELF AS RESULT opt_constructor_impl */
    
        // default action (generated by JISON mode none/none :: 9,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 9,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 245:
        /*! Production::    pl_right_value : %epsilon */
    case 323:
        /*! Production::    return_expr : %epsilon */
    
        // default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';'])
        break;
    
    case 321:
        /*! Production::    expr : %epsilon */
    
        // default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';', 'into', 'bulk', 'USING', 'WHEN', 'THEN', 'LOOP', 'LIMIT', ',', 'END', '..', ')'])
        break;
    
    case 322:
        /*! Production::    bool_expr : %epsilon */
    
        // default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 0,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';', 'WHEN', 'THEN', 'LOOP', ',', ')'])
        break;
    
    case 326:
        /*! Production::    for_loop_stmt : FOR identifier IN opt_reverse lower_bound RANGE_OPERATOR upper_bound LOOP pl_lang_stmt_list END_KEY LOOP opt_label */
    
        // default action (generated by JISON mode none/none :: 12,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 12,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 327:
        /*! Production::    cursor_for_loop_stmt : FOR identifier IN opt_reverse for_expr LOOP pl_lang_stmt_list END_KEY LOOP opt_label */
    
        // default action (generated by JISON mode none/none :: 10,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 10,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 328:
        /*! Production::    cursor_for_loop_stmt : FOR identifier IN "(" cursor_for_loop_sql ")" LOOP pl_lang_stmt_list END_KEY LOOP opt_label */
    
        // default action (generated by JISON mode none/none :: 11,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 11,VT,VA,-,-,LT,LA,-,-)
        break;
    
    case 334:
        /*! Production::    for_expr : for_start */
    
        // default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';', '..', 'loop', 'insert', 'update', 'delete', 'SAVE', 'not', ''])
        break;
    
    case 347:
        /*! Production::    cursor_for_loop_sql : sql_keyword */
    
        // default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [')'], yylstack[yysp])
        break;
    
    case 572:
        /*! Production::    sql_stmt : sql_keyword */
    case 575:
        /*! Production::    sql_stmt : COMMIT */
    case 576:
        /*! Production::    sql_stmt : ROLLBACK */
    
        // default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 1,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';'], yylstack[yysp])
        break;
    
    case 573:
        /*! Production::    sql_stmt : CREATE sql_keyword */
    case 574:
        /*! Production::    sql_stmt : ALTER sql_keyword */
    
        // default action (generated by JISON mode none/none :: 2,VT,VA,-,-,LT,LA,-,-):
        this.$ = undefined;
        this._$ = undefined;
        // END of default action (generated by JISON mode none/none :: 2,VT,VA,-,-,LT,LA,-,-)
        
        
        lookupForward(this, yylexer, [';'], yylstack[yysp - 1])
        break;
    
    }
    },
    table: bt({
      len: u([
      43,
      1,
      0,
      2,
      s,
      [0, 6],
      4,
      s,
      [0, 19],
      s,
      [94, 3],
      1,
      120,
      9,
      3,
      5,
      95,
      95,
      0,
      94,
      0,
      c,
      [42, 3],
      130,
      6,
      31,
      s,
      [0, 92],
      c,
      [105, 3],
      0,
      8,
      1,
      s,
      [94, 3],
      s,
      [91, 3],
      94,
      94,
      9,
      94,
      9,
      94,
      1,
      0,
      0,
      1,
      124,
      0,
      128,
      c,
      [124, 3],
      s,
      [0, 7],
      4,
      c,
      [167, 4],
      94,
      94,
      c,
      [157, 7],
      144,
      c,
      [24, 8],
      127,
      7,
      9,
      96,
      93,
      1,
      7,
      1,
      3,
      0,
      0,
      12,
      c,
      [38, 4],
      6,
      6,
      94,
      0,
      94,
      1,
      94,
      0,
      5,
      3,
      10,
      s,
      [0, 3],
      2,
      1,
      3,
      8,
      0,
      3,
      0,
      96,
      126,
      0,
      152,
      0,
      0,
      136,
      c,
      [3, 3],
      1,
      c,
      [238, 3],
      3,
      0,
      9,
      0,
      1,
      5,
      5,
      143,
      0,
      11,
      c,
      [33, 3],
      13,
      c,
      [54, 3],
      13,
      0,
      17,
      17,
      1,
      s,
      [2, 3],
      0,
      15,
      13,
      13,
      0,
      43,
      s,
      [0, 5],
      11,
      c,
      [28, 3],
      s,
      [0, 8],
      45,
      s,
      [0, 9],
      1,
      c,
      [150, 4],
      1,
      0,
      3,
      2,
      0,
      126,
      0,
      0,
      138,
      s,
      [0, 3],
      7,
      7,
      c,
      [17, 3],
      c,
      [148, 5],
      s,
      [0, 4],
      8,
      c,
      [315, 6],
      s,
      [0, 10],
      127,
      c,
      [52, 4],
      131,
      10,
      1,
      20,
      c,
      [228, 5],
      c,
      [204, 10],
      s,
      [0, 15],
      c,
      [83, 3],
      9,
      9,
      c,
      [173, 4],
      124,
      1,
      93,
      93,
      1,
      100,
      97,
      95,
      94,
      94,
      5,
      96,
      94,
      2,
      0,
      5,
      s,
      [0, 12],
      2,
      c,
      [62, 3],
      140,
      4,
      1,
      12,
      12,
      5,
      1,
      5,
      4,
      4,
      2,
      c,
      [79, 3],
      c,
      [20, 3],
      11,
      1,
      15,
      0,
      3,
      15,
      1,
      15,
      15,
      3,
      3,
      15,
      c,
      [73, 4],
      0,
      0,
      43,
      94,
      3,
      94,
      93,
      94,
      95,
      1,
      136,
      0,
      95,
      138,
      127,
      127,
      17,
      0,
      16,
      s,
      [0, 5],
      18,
      0,
      0,
      s,
      [22, 4],
      2,
      0,
      22,
      c,
      [169, 6],
      1,
      c,
      [507, 4],
      4,
      c,
      [96, 3],
      7,
      0,
      99,
      1,
      125,
      c,
      [56, 4],
      101,
      4,
      129,
      0,
      c,
      [113, 4],
      c,
      [227, 4],
      c,
      [74, 4],
      c,
      [98, 3],
      c,
      [224, 4],
      c,
      [101, 4],
      0,
      4,
      97,
      c,
      [34, 4],
      1,
      1,
      3,
      124,
      s,
      [1, 3],
      c,
      [16, 3],
      2,
      4,
      2,
      c,
      [398, 3],
      c,
      [41, 4],
      1,
      1,
      98,
      3,
      5,
      2,
      1,
      138,
      138,
      c,
      [56, 7],
      c,
      [6, 3],
      c,
      [23, 6],
      c,
      [239, 3],
      c,
      [161, 3],
      2,
      c,
      [10, 4],
      2,
      1,
      15,
      c,
      [443, 3],
      c,
      [165, 4],
      s,
      [1, 3],
      13,
      96,
      c,
      [42, 6],
      c,
      [85, 3],
      45,
      c,
      [46, 7],
      c,
      [3, 3],
      6,
      127,
      0,
      5,
      c,
      [163, 3],
      s,
      [0, 5],
      13,
      15,
      2,
      2,
      s,
      [22, 4],
      1,
      1,
      22,
      7,
      5,
      94,
      4,
      0,
      95,
      c,
      [72, 3],
      c,
      [507, 4],
      c,
      [133, 4],
      96,
      c,
      [57, 4],
      c,
      [353, 5],
      92,
      c,
      [55, 3],
      9,
      3,
      94,
      0,
      19,
      c,
      [27, 4],
      c,
      [123, 6],
      c,
      [27, 4],
      1,
      124,
      6,
      c,
      [86, 3],
      124,
      6,
      11,
      c,
      [130, 6],
      17,
      0,
      3,
      97,
      1,
      10,
      1,
      98,
      c,
      [244, 5],
      14,
      0,
      17,
      4,
      96,
      143,
      c,
      [223, 6],
      c,
      [317, 4],
      c,
      [35, 3],
      13,
      c,
      [14, 3],
      13,
      0,
      13,
      13,
      c,
      [215, 4],
      0,
      95,
      c,
      [361, 8],
      c,
      [466, 3],
      1,
      3,
      7,
      93,
      c,
      [38, 3],
      c,
      [158, 6],
      c,
      [252, 5],
      s,
      [20, 4],
      c,
      [6, 3],
      6,
      1,
      10,
      c,
      [13, 3],
      c,
      [93, 4],
      c,
      [400, 3],
      c,
      [7, 3],
      c,
      [38, 3],
      100,
      0,
      c,
      [151, 3],
      0,
      1,
      c,
      [416, 4],
      6,
      c,
      [157, 3],
      42,
      124,
      94,
      0,
      127,
      c,
      [141, 3],
      124,
      1,
      96,
      124,
      8,
      10,
      c,
      [248, 3],
      c,
      [338, 7],
      c,
      [89, 4],
      c,
      [659, 4],
      1,
      c,
      [38, 3],
      1,
      c,
      [474, 4],
      c,
      [64, 4],
      c,
      [352, 3],
      2,
      0,
      143,
      0,
      4,
      2,
      c,
      [313, 7],
      s,
      [0, 4],
      c,
      [711, 4],
      c,
      [332, 8],
      c,
      [930, 7],
      1,
      136,
      94,
      94,
      c,
      [388, 5],
      c,
      [778, 6],
      1,
      c,
      [770, 4],
      c,
      [370, 7],
      143,
      8,
      95,
      94,
      3,
      3,
      125,
      c,
      [79, 4],
      124,
      124,
      c,
      [20, 3],
      c,
      [135, 3],
      17,
      1,
      8,
      c,
      [951, 3],
      c,
      [309, 3],
      1,
      0,
      97,
      97,
      4,
      c,
      [662, 4],
      95,
      5,
      c,
      [421, 3],
      c,
      [63, 8],
      c,
      [165, 3],
      c,
      [124, 4],
      c,
      [91, 4],
      c,
      [609, 6],
      129,
      1,
      c,
      [325, 3],
      3,
      0,
      143,
      c,
      [60, 3],
      98,
      96,
      127,
      96,
      8,
      124,
      c,
      [451, 5],
      s,
      [0, 3],
      16,
      c,
      [722, 6],
      5,
      c,
      [39, 3],
      4,
      4,
      1,
      108,
      143,
      c,
      [59, 3],
      c,
      [380, 3],
      c,
      [64, 3],
      1,
      116,
      c,
      [16, 3],
      140,
      c,
      [68, 3],
      c,
      [462, 3],
      c,
      [775, 3],
      1,
      c,
      [122, 3],
      c,
      [42, 5],
      1,
      0,
      108,
      0,
      s,
      [2, 3],
      c,
      [122, 3],
      c,
      [125, 4],
      c,
      [489, 7],
      c,
      [858, 3],
      c,
      [9, 6],
      c,
      [652, 7],
      1,
      c,
      [914, 4],
      c,
      [131, 5],
      c,
      [337, 3],
      1,
      0,
      95,
      c,
      [30, 3],
      124,
      c,
      [762, 3],
      c,
      [291, 7],
      0,
      94,
      95,
      96,
      5,
      c,
      [811, 4],
      c,
      [365, 3],
      c,
      [162, 5],
      c,
      [164, 6],
      1,
      4,
      3,
      c,
      [79, 4],
      138,
      124,
      96,
      c,
      [63, 3],
      c,
      [189, 5],
      c,
      [262, 3],
      c,
      [274, 9],
      c,
      [27, 3],
      4,
      c,
      [4, 3],
      c,
      [392, 3],
      c,
      [345, 6],
      c,
      [1003, 3],
      c,
      [12, 3],
      c,
      [714, 7],
      1,
      95,
      2,
      0
    ]),
      symbol: u([
      s,
      [17, 5, 1],
      37,
      40,
      48,
      65,
      90,
      91,
      107,
      s,
      [232, 4, 1],
      243,
      s,
      [273, 5, 1],
      282,
      s,
      [300, 6, 1],
      315,
      403,
      404,
      405,
      424,
      425,
      427,
      497,
      498,
      s,
      [505, 4, 1],
      554,
      1,
      11,
      12,
      90,
      91,
      351,
      352,
      8,
      14,
      15,
      16,
      20,
      22,
      24,
      25,
      27,
      31,
      32,
      34,
      35,
      36,
      41,
      42,
      43,
      45,
      47,
      51,
      55,
      56,
      58,
      59,
      61,
      62,
      s,
      [67, 8, 1],
      76,
      78,
      101,
      102,
      105,
      110,
      113,
      115,
      s,
      [118, 5, 1],
      127,
      133,
      135,
      137,
      143,
      144,
      145,
      150,
      152,
      153,
      154,
      182,
      184,
      186,
      190,
      191,
      192,
      194,
      195,
      197,
      s,
      [202, 9, 1],
      s,
      [214, 5, 1],
      222,
      223,
      s,
      [226, 6, 1],
      255,
      284,
      556,
      557,
      558,
      c,
      [94, 188],
      66,
      c,
      [95, 14],
      37,
      s,
      [40, 4, 1],
      s,
      [45, 4, 2],
      54,
      c,
      [99, 4],
      60,
      61,
      62,
      64,
      65,
      c,
      [102, 10],
      85,
      87,
      90,
      91,
      96,
      97,
      99,
      c,
      [109, 3],
      107,
      s,
      [109, 7, 1],
      c,
      [114, 6],
      129,
      c,
      [115, 3],
      s,
      [142, 4, 1],
      c,
      [116, 6],
      s,
      [185, 4, 1],
      s,
      [190, 21, 1],
      c,
      [125, 13],
      405,
      c,
      [453, 5],
      42,
      43,
      50,
      297,
      c,
      [9, 3],
      c,
      [12, 5],
      c,
      [137, 14],
      39,
      c,
      [327, 94],
      c,
      [95, 95],
      c,
      [94, 76],
      294,
      c,
      [94, 3],
      11,
      91,
      356,
      c,
      [97, 4],
      17,
      18,
      20,
      21,
      c,
      [100, 31],
      91,
      94,
      c,
      [102, 5],
      c,
      [411, 7],
      126,
      c,
      [104, 43],
      286,
      295,
      354,
      s,
      [363, 5, 1],
      s,
      [369, 8, 1],
      379,
      s,
      [412, 8, 1],
      431,
      432,
      436,
      437,
      438,
      c,
      [133, 3],
      3,
      14,
      22,
      52,
      53,
      330,
      s,
      [3, 4, 1],
      11,
      12,
      14,
      22,
      c,
      [127, 3],
      52,
      53,
      54,
      57,
      c,
      [547, 3],
      67,
      s,
      [73, 4, 1],
      82,
      83,
      90,
      91,
      202,
      203,
      205,
      226,
      3,
      54,
      330,
      c,
      [20, 4],
      306,
      c,
      [272, 90],
      257,
      258,
      c,
      [140, 3],
      c,
      [574, 7],
      298,
      51,
      c,
      [986, 282],
      c,
      [753, 90],
      283,
      c,
      [185, 36],
      85,
      c,
      [91, 53],
      426,
      c,
      [91, 127],
      c,
      [461, 152],
      c,
      [891, 4],
      244,
      s,
      [249, 4, 1],
      c,
      [103, 94],
      c,
      [985, 3],
      52,
      53,
      c,
      [967, 3],
      515,
      c,
      [103, 94],
      108,
      38,
      c,
      [1654, 119],
      359,
      s,
      [402, 4, 1],
      c,
      [1354, 99],
      c,
      [1353, 5],
      c,
      [1352, 24],
      12,
      12,
      52,
      53,
      299,
      c,
      [4, 4],
      c,
      [357, 90],
      288,
      c,
      [657, 93],
      292,
      c,
      [94, 93],
      289,
      c,
      [94, 93],
      290,
      c,
      [94, 93],
      c,
      [376, 40],
      93,
      c,
      [95, 12],
      131,
      132,
      c,
      [97, 3],
      s,
      [138, 4, 1],
      s,
      [143, 8, 1],
      s,
      [152, 29, 1],
      c,
      [131, 32],
      285,
      341,
      380,
      447,
      448,
      s,
      [450, 9, 1],
      c,
      [144, 3],
      92,
      c,
      [145, 36],
      92,
      c,
      [146, 90],
      115,
      s,
      [117, 6, 1],
      c,
      [1218, 99],
      291,
      331,
      332,
      c,
      [478, 93],
      c,
      [93, 3],
      54,
      c,
      [1181, 3],
      s,
      [307, 4, 1],
      58,
      5,
      11,
      12,
      c,
      [2180, 5],
      274,
      276,
      c,
      [3188, 3],
      506,
      508,
      c,
      [103, 3],
      278,
      c,
      [4, 3],
      499,
      503,
      504,
      c,
      [6, 6],
      c,
      [1644, 188],
      125,
      c,
      [1636, 96],
      202,
      226,
      555,
      c,
      [1278, 3],
      4,
      5,
      c,
      [2630, 3],
      c,
      [532, 5],
      15,
      16,
      23,
      c,
      [16, 3],
      c,
      [1660, 5],
      203,
      205,
      516,
      c,
      [1305, 4],
      c,
      [12, 3],
      c,
      [131, 88],
      296,
      c,
      [320, 17],
      37,
      38,
      c,
      [1663, 32],
      92,
      c,
      [1664, 72],
      357,
      c,
      [1664, 8],
      c,
      [1788, 49],
      c,
      [123, 65],
      236,
      255,
      285,
      336,
      337,
      338,
      340,
      341,
      345,
      347,
      351,
      352,
      s,
      [387, 5, 1],
      s,
      [406, 6, 1],
      413,
      478,
      480,
      484,
      485,
      486,
      495,
      496,
      c,
      [278, 7],
      c,
      [1816, 35],
      82,
      83,
      c,
      [1818, 60],
      334,
      335,
      353,
      354,
      356,
      c,
      [3176, 30],
      c,
      [136, 136],
      52,
      3,
      52,
      54,
      330,
      c,
      [3280, 3],
      c,
      [3314, 3],
      c,
      [682, 5],
      330,
      52,
      12,
      57,
      84,
      134,
      443,
      c,
      [5, 5],
      c,
      [803, 48],
      c,
      [1508, 95],
      4,
      5,
      7,
      11,
      12,
      26,
      57,
      82,
      84,
      130,
      134,
      3,
      459,
      c,
      [176, 3],
      c,
      [13, 8],
      459,
      460,
      c,
      [13, 11],
      461,
      c,
      [12, 11],
      142,
      463,
      c,
      [13, 11],
      146,
      183,
      184,
      186,
      466,
      468,
      c,
      [17, 18],
      3,
      466,
      3,
      466,
      150,
      153,
      c,
      [23, 14],
      469,
      c,
      [39, 11],
      470,
      471,
      c,
      [13, 16],
      6,
      c,
      [135, 3],
      14,
      22,
      24,
      26,
      32,
      c,
      [728, 4],
      49,
      s,
      [52, 6, 1],
      64,
      65,
      82,
      84,
      101,
      103,
      129,
      c,
      [116, 3],
      185,
      192,
      194,
      c,
      [673, 5],
      342,
      343,
      c,
      [56, 11],
      c,
      [11, 14],
      c,
      [65, 14],
      50,
      c,
      [66, 10],
      86,
      c,
      [67, 7],
      189,
      190,
      c,
      [69, 7],
      s,
      [3, 4],
      c,
      [1094, 5],
      c,
      [395, 36],
      79,
      80,
      c,
      [397, 55],
      c,
      [395, 32],
      333,
      c,
      [521, 91],
      c,
      [519, 35],
      381,
      s,
      [449, 6, 1],
      456,
      c,
      [516, 4],
      49,
      64,
      65,
      s,
      [311, 4, 1],
      c,
      [7, 7],
      59,
      c,
      [3969, 91],
      c,
      [1477, 5],
      19,
      39,
      44,
      45,
      46,
      279,
      c,
      [1450, 19],
      s,
      [44, 4, 1],
      c,
      [106, 70],
      279,
      c,
      [1034, 17],
      38,
      c,
      [200, 22],
      c,
      [1032, 59],
      s,
      [360, 8, 1],
      372,
      374,
      c,
      [4337, 19],
      c,
      [128, 40],
      c,
      [3115, 65],
      s,
      [368, 9, 1],
      c,
      [132, 17],
      c,
      [1814, 5],
      205,
      244,
      245,
      517,
      518,
      116,
      28,
      134,
      211,
      212,
      219,
      220,
      224,
      225,
      s,
      [509, 6, 1],
      522,
      523,
      524,
      540,
      552,
      553,
      75,
      358,
      421,
      12,
      115,
      84,
      c,
      [500, 3],
      129,
      142,
      185,
      198,
      199,
      495,
      c,
      [9, 9],
      346,
      385,
      384,
      c,
      [3427, 124],
      385,
      c,
      [2437, 93],
      c,
      [93, 93],
      386,
      3,
      6,
      8,
      c,
      [2174, 34],
      75,
      76,
      78,
      84,
      c,
      [99, 54],
      293,
      c,
      [5072, 4],
      c,
      [98, 38],
      c,
      [97, 60],
      c,
      [291, 89],
      285,
      c,
      [3582, 94],
      285,
      c,
      [94, 97],
      3,
      6,
      12,
      84,
      195,
      c,
      [385, 35],
      c,
      [100, 57],
      487,
      c,
      [5647, 97],
      12,
      84,
      c,
      [197, 3],
      72,
      84,
      91,
      356,
      c,
      [4424, 15],
      c,
      [1663, 112],
      380,
      433,
      447,
      c,
      [2182, 7],
      c,
      [1665, 4],
      52,
      54,
      377,
      378,
      54,
      c,
      [3030, 10],
      251,
      252,
      127,
      128,
      129,
      135,
      136,
      137,
      439,
      440,
      441,
      444,
      445,
      446,
      c,
      [2358, 3],
      382,
      383,
      112,
      c,
      [6, 5],
      c,
      [2368, 4],
      c,
      [4, 4],
      21,
      95,
      9,
      123,
      462,
      4,
      123,
      c,
      [2197, 11],
      c,
      [12, 11],
      c,
      [2156, 5],
      123,
      181,
      465,
      c,
      [18, 16],
      c,
      [16, 15],
      c,
      [2205, 16],
      151,
      464,
      c,
      [3, 3],
      c,
      [21, 11],
      184,
      186,
      474,
      475,
      123,
      c,
      [2201, 43],
      c,
      [336, 19],
      49,
      c,
      [1116, 74],
      239,
      240,
      242,
      c,
      [97, 94],
      c,
      [1399, 183],
      295,
      c,
      [94, 25],
      57,
      c,
      [95, 68],
      536,
      c,
      [95, 4],
      c,
      [3294, 140],
      c,
      [4351, 87],
      c,
      [4350, 52],
      c,
      [2704, 90],
      5,
      c,
      [1380, 21],
      c,
      [2175, 5],
      c,
      [141, 12],
      c,
      [2970, 88],
      c,
      [127, 39],
      81,
      c,
      [127, 87],
      c,
      [1133, 3],
      c,
      [1132, 3],
      52,
      53,
      55,
      244,
      249,
      253,
      262,
      s,
      [268, 4, 1],
      c,
      [3491, 3],
      c,
      [1154, 4],
      c,
      [21, 6],
      c,
      [1181, 3],
      c,
      [3670, 6],
      c,
      [16, 6],
      54,
      c,
      [17, 4],
      142,
      c,
      [18, 17],
      c,
      [3440, 8],
      c,
      [22, 63],
      150,
      153,
      c,
      [24, 22],
      60,
      c,
      [7097, 4],
      90,
      91,
      316,
      63,
      50,
      63,
      50,
      63,
      66,
      329,
      c,
      [2163, 4],
      321,
      c,
      [3032, 4],
      45,
      46,
      280,
      c,
      [4481, 20],
      c,
      [3030, 72],
      255,
      500,
      501,
      502,
      c,
      [543, 3],
      c,
      [1723, 5],
      c,
      [3037, 95],
      c,
      [3035, 26],
      12,
      c,
      [126, 6],
      s,
      [19, 4, 1],
      c,
      [907, 83],
      246,
      247,
      248,
      c,
      [4843, 5],
      38,
      91,
      355,
      c,
      [7608, 18],
      c,
      [3140, 88],
      c,
      [4295, 25],
      53,
      205,
      299,
      519,
      38,
      12,
      219,
      17,
      18,
      303,
      304,
      224,
      546,
      11,
      12,
      c,
      [3142, 3],
      224,
      522,
      211,
      212,
      38,
      c,
      [3131, 3],
      c,
      [1069, 47],
      124,
      c,
      [2310, 44],
      422,
      423,
      c,
      [124, 3],
      344,
      38,
      86,
      75,
      348,
      349,
      c,
      [4975, 48],
      c,
      [3211, 72],
      c,
      [3210, 4],
      96,
      79,
      79,
      12,
      75,
      12,
      75,
      3,
      12,
      237,
      238,
      60,
      479,
      c,
      [2358, 3],
      60,
      189,
      190,
      481,
      482,
      384,
      3,
      38,
      c,
      [4152, 3],
      c,
      [5221, 95],
      12,
      c,
      [4651, 3],
      26,
      134,
      434,
      435,
      12,
      52,
      52,
      c,
      [1429, 138],
      c,
      [138, 138],
      94,
      3,
      66,
      3,
      136,
      385,
      385,
      57,
      84,
      c,
      [2576, 3],
      383,
      4,
      5,
      123,
      4,
      143,
      145,
      4,
      c,
      [2489, 15],
      4,
      146,
      182,
      467,
      c,
      [19, 16],
      c,
      [16, 16],
      c,
      [15, 14],
      151,
      123,
      151,
      c,
      [18, 10],
      186,
      476,
      477,
      c,
      [239, 42],
      116,
      c,
      [483, 17],
      c,
      [1315, 3],
      c,
      [207, 29],
      473,
      c,
      [197, 3],
      185,
      c,
      [144, 3],
      4,
      5,
      13,
      241,
      c,
      [4794, 45],
      s,
      [5, 4],
      4,
      5,
      c,
      [2826, 4],
      c,
      [1700, 127],
      c,
      [1674, 4],
      272,
      c,
      [1563, 11],
      c,
      [1708, 7],
      c,
      [1582, 12],
      55,
      c,
      [12, 7],
      c,
      [157, 3],
      c,
      [13, 3],
      266,
      267,
      21,
      95,
      143,
      145,
      c,
      [1614, 18],
      c,
      [379, 4],
      c,
      [22, 66],
      151,
      151,
      c,
      [24, 22],
      60,
      c,
      [1703, 5],
      320,
      c,
      [271, 3],
      317,
      318,
      c,
      [6299, 94],
      c,
      [4415, 3],
      314,
      c,
      [8889, 95],
      75,
      76,
      322,
      11,
      12,
      46,
      281,
      c,
      [4, 4],
      c,
      [1893, 94],
      c,
      [108, 3],
      10,
      c,
      [1251, 96],
      c,
      [5501, 38],
      c,
      [400, 58],
      c,
      [854, 3],
      c,
      [97, 89],
      38,
      c,
      [3740, 4],
      204,
      440,
      c,
      [3739, 3],
      3,
      82,
      520,
      c,
      [199, 94],
      28,
      38,
      c,
      [5050, 7],
      c,
      [5048, 10],
      17,
      372,
      373,
      542,
      17,
      86,
      50,
      86,
      85,
      c,
      [5030, 124],
      38,
      75,
      88,
      89,
      349,
      350,
      385,
      96,
      c,
      [132, 124],
      3,
      27,
      100,
      123,
      181,
      393,
      3,
      27,
      105,
      106,
      123,
      181,
      394,
      395,
      396,
      400,
      465,
      385,
      385,
      c,
      [3878, 3],
      12,
      56,
      490,
      12,
      c,
      [1350, 3],
      56,
      c,
      [5327, 7],
      200,
      201,
      384,
      495,
      496,
      12,
      192,
      483,
      c,
      [4633, 91],
      339,
      340,
      341,
      c,
      [426, 3],
      191,
      12,
      54,
      56,
      189,
      190,
      197,
      481,
      482,
      488,
      489,
      384,
      c,
      [2082, 98],
      3,
      27,
      c,
      [244, 5],
      465,
      c,
      [234, 3],
      c,
      [233, 9],
      c,
      [232, 3],
      c,
      [1282, 8],
      c,
      [3130, 8],
      12,
      c,
      [4440, 3],
      c,
      [250, 90],
      287,
      428,
      429,
      c,
      [2072, 94],
      c,
      [6864, 52],
      123,
      c,
      [4634, 3],
      144,
      143,
      c,
      [1995, 13],
      c,
      [2042, 11],
      c,
      [14, 4],
      c,
      [13, 25],
      152,
      4,
      154,
      c,
      [2038, 60],
      c,
      [170, 31],
      472,
      c,
      [157, 3],
      240,
      242,
      c,
      [4550, 95],
      116,
      9,
      123,
      420,
      c,
      [21, 5],
      537,
      538,
      c,
      [4561, 93],
      c,
      [6975, 3],
      56,
      33,
      3,
      144,
      143,
      c,
      [1911, 17],
      c,
      [327, 3],
      c,
      [20, 60],
      152,
      154,
      c,
      [22, 20],
      c,
      [1990, 5],
      321,
      71,
      60,
      c,
      [184, 3],
      c,
      [11, 5],
      318,
      s,
      [53, 3],
      5,
      50,
      63,
      76,
      324,
      3,
      47,
      c,
      [4791, 97],
      c,
      [3562, 91],
      c,
      [8593, 6],
      c,
      [1066, 95],
      66,
      3,
      525,
      206,
      c,
      [339, 3],
      c,
      [9780, 93],
      c,
      [9592, 4],
      131,
      132,
      c,
      [980, 4],
      c,
      [977, 4],
      c,
      [2643, 24],
      c,
      [3010, 8],
      c,
      [10177, 128],
      c,
      [6270, 104],
      c,
      [3758, 32],
      s,
      [88, 4, 1],
      c,
      [221, 72],
      350,
      c,
      [1941, 5],
      346,
      c,
      [6973, 15],
      c,
      [348, 110],
      86,
      c,
      [6426, 91],
      c,
      [6810, 19],
      c,
      [4109, 110],
      c,
      [1905, 8],
      c,
      [1903, 8],
      401,
      495,
      c,
      [1915, 5],
      101,
      c,
      [13, 3],
      194,
      c,
      [58, 4],
      398,
      98,
      66,
      66,
      4,
      5,
      5,
      12,
      54,
      79,
      80,
      197,
      333,
      491,
      492,
      493,
      384,
      c,
      [11, 3],
      56,
      192,
      197,
      189,
      c,
      [6, 3],
      197,
      490,
      4,
      98,
      c,
      [898, 3],
      c,
      [1232, 3],
      c,
      [3378, 3],
      c,
      [1838, 143],
      12,
      130,
      c,
      [4203, 3],
      130,
      4,
      4,
      144,
      c,
      [8524, 11],
      463,
      4,
      c,
      [6490, 4],
      4,
      c,
      [5878, 226],
      c,
      [10000, 94],
      256,
      c,
      [3206, 4],
      c,
      [95, 90],
      263,
      264,
      265,
      c,
      [97, 3],
      144,
      c,
      [1806, 3],
      322,
      72,
      c,
      [102, 90],
      319,
      c,
      [291, 93],
      c,
      [94, 98],
      20,
      c,
      [8271, 49],
      c,
      [881, 95],
      c,
      [5445, 5],
      c,
      [3529, 3],
      c,
      [247, 90],
      526,
      527,
      c,
      [821, 97],
      c,
      [9946, 4],
      54,
      547,
      c,
      [1423, 42],
      c,
      [8337, 3],
      c,
      [1424, 80],
      87,
      c,
      [1549, 124],
      c,
      [1894, 124],
      96,
      98,
      96,
      98,
      4,
      c,
      [3575, 8],
      c,
      [1659, 5],
      392,
      485,
      495,
      496,
      102,
      c,
      [1696, 6],
      397,
      465,
      c,
      [2273, 91],
      c,
      [3814, 4],
      c,
      [95, 95],
      c,
      [1845, 3],
      197,
      c,
      [9342, 15],
      c,
      [4011, 83],
      c,
      [97, 97],
      c,
      [198, 3],
      494,
      c,
      [401, 98],
      287,
      c,
      [3966, 4],
      4,
      5,
      c,
      [8463, 3],
      c,
      [5, 5],
      12,
      130,
      23,
      66,
      c,
      [33, 5],
      538,
      23,
      c,
      [3825, 3],
      90,
      91,
      323,
      c,
      [15036, 6],
      c,
      [1987, 35],
      c,
      [9859, 90],
      4,
      c,
      [1263, 3],
      c,
      [158, 3],
      529,
      c,
      [1413, 143],
      83,
      54,
      543,
      54,
      c,
      [408, 81],
      221,
      c,
      [8014, 10],
      548,
      549,
      550,
      c,
      [9642, 38],
      c,
      [2831, 103],
      c,
      [1408, 5],
      c,
      [3183, 76],
      c,
      [1285, 5],
      c,
      [223, 95],
      c,
      [833, 22],
      c,
      [1389, 111],
      195,
      c,
      [3046, 6],
      103,
      c,
      [1388, 8],
      399,
      c,
      [3042, 7],
      493,
      c,
      [7180, 4],
      488,
      c,
      [5, 5],
      c,
      [893, 3],
      430,
      c,
      [4, 4],
      23,
      c,
      [4668, 49],
      c,
      [742, 5],
      c,
      [151, 7],
      c,
      [728, 8],
      c,
      [716, 34],
      442,
      451,
      c,
      [4981, 146],
      25,
      26,
      30,
      31,
      254,
      261,
      c,
      [2797, 91],
      c,
      [100, 3],
      61,
      62,
      78,
      325,
      326,
      327,
      c,
      [2898, 10],
      28,
      c,
      [102, 32],
      c,
      [510, 8],
      133,
      134,
      c,
      [104, 27],
      s,
      [211, 10, 1],
      s,
      [222, 10, 1],
      255,
      417,
      527,
      s,
      [530, 6, 1],
      539,
      540,
      546,
      552,
      553,
      c,
      [1381, 5],
      82,
      528,
      c,
      [4, 4],
      207,
      c,
      [7428, 115],
      c,
      [1111, 10],
      c,
      [7429, 11],
      544,
      c,
      [149, 3],
      221,
      c,
      [6467, 92],
      291,
      c,
      [1218, 5],
      79,
      c,
      [7668, 138],
      c,
      [6250, 16],
      c,
      [2544, 233],
      c,
      [4217, 8],
      344,
      c,
      [1119, 108],
      c,
      [12735, 4],
      c,
      [4, 3],
      6,
      7,
      12,
      c,
      [7835, 3],
      c,
      [1986, 3],
      3,
      3,
      5,
      38,
      52,
      71,
      77,
      71,
      77,
      c,
      [4324, 3],
      c,
      [11852, 4],
      213,
      c,
      [6803, 4],
      533,
      c,
      [800, 6],
      120,
      17,
      18,
      c,
      [2045, 4],
      541,
      542,
      c,
      [23, 3],
      206,
      56,
      c,
      [5566, 11],
      82,
      c,
      [6278, 8],
      82,
      53,
      53,
      c,
      [682, 91],
      c,
      [681, 4],
      4,
      5,
      80,
      c,
      [1575, 125],
      c,
      [669, 124],
      104,
      21,
      95,
      c,
      [12721, 94],
      c,
      [7895, 95],
      c,
      [5889, 96],
      c,
      [1592, 3],
      326,
      327,
      91,
      328,
      356,
      72,
      72,
      71,
      28,
      114,
      c,
      [700, 8],
      417,
      531,
      c,
      [1503, 8],
      4,
      5,
      c,
      [13323, 5],
      c,
      [5, 3],
      116,
      c,
      [63, 3],
      521,
      206,
      223,
      545,
      222,
      222,
      c,
      [9077, 152],
      c,
      [1270, 111],
      c,
      [2529, 95],
      96,
      c,
      [2530, 8],
      c,
      [3247, 3],
      c,
      [421, 3],
      327,
      38,
      72,
      206,
      116,
      c,
      [391, 3],
      551,
      5,
      96,
      c,
      [122, 96],
      4,
      28,
      29,
      259,
      260,
      116,
      c,
      [5345, 137],
      c,
      [238, 95],
      384,
      23,
      c,
      [13454, 5],
      c,
      [963, 91],
      4,
      5
    ]),
      type: u([
      s,
      [2, 12],
      s,
      [0, 31],
      1,
      c,
      [36, 6],
      s,
      [2, 89],
      s,
      [0, 5],
      c,
      [94, 277],
      c,
      [125, 32],
      c,
      [9, 17],
      c,
      [108, 91],
      c,
      [233, 94],
      c,
      [422, 101],
      c,
      [295, 97],
      s,
      [0, 34],
      c,
      [431, 39],
      c,
      [34, 5],
      c,
      [272, 95],
      c,
      [95, 8],
      c,
      [470, 192],
      c,
      [753, 183],
      c,
      [91, 271],
      c,
      [461, 103],
      c,
      [564, 107],
      c,
      [1653, 215],
      c,
      [126, 102],
      c,
      [1352, 36],
      c,
      [5, 4],
      c,
      [2198, 372],
      c,
      [2386, 219],
      c,
      [637, 24],
      s,
      [2, 139],
      c,
      [382, 99],
      c,
      [96, 95],
      c,
      [8, 12],
      c,
      [117, 15],
      c,
      [4, 5],
      c,
      [10, 6],
      c,
      [2105, 281],
      c,
      [1279, 11],
      c,
      [2499, 9],
      c,
      [2649, 15],
      c,
      [2796, 95],
      c,
      [1664, 227],
      c,
      [3040, 61],
      c,
      [132, 127],
      c,
      [136, 144],
      c,
      [654, 12],
      c,
      [680, 11],
      c,
      [1365, 126],
      c,
      [307, 30],
      c,
      [13, 12],
      c,
      [26, 13],
      c,
      [38, 25],
      c,
      [4388, 21],
      c,
      [3701, 6],
      c,
      [233, 17],
      c,
      [94, 26],
      c,
      [276, 42],
      c,
      [483, 75],
      c,
      [1758, 128],
      c,
      [128, 124],
      c,
      [516, 18],
      c,
      [7, 14],
      c,
      [1220, 99],
      c,
      [255, 94],
      c,
      [2986, 128],
      c,
      [1429, 138],
      c,
      [2163, 20],
      c,
      [31, 6],
      c,
      [994, 22],
      c,
      [1765, 123],
      c,
      [2437, 103],
      c,
      [1951, 184],
      c,
      [602, 97],
      c,
      [384, 99],
      c,
      [3488, 285],
      c,
      [289, 108],
      c,
      [1790, 125],
      c,
      [1195, 19],
      c,
      [154, 11],
      c,
      [1212, 14],
      c,
      [1687, 7],
      c,
      [2045, 9],
      c,
      [4351, 9],
      c,
      [194, 29],
      c,
      [3083, 18],
      c,
      [2213, 17],
      c,
      [49, 20],
      c,
      [21, 14],
      c,
      [396, 44],
      c,
      [1847, 97],
      c,
      [97, 96],
      c,
      [1399, 277],
      c,
      [3445, 104],
      c,
      [3294, 127],
      c,
      [4590, 129],
      c,
      [4728, 154],
      c,
      [1319, 132],
      c,
      [2820, 77],
      c,
      [22, 66],
      c,
      [4465, 13],
      c,
      [3800, 16],
      c,
      [444, 93],
      c,
      [543, 104],
      c,
      [3035, 123],
      c,
      [1810, 20],
      c,
      [6255, 124],
      c,
      [4963, 8],
      c,
      [4048, 9],
      c,
      [1930, 10],
      c,
      [758, 98],
      c,
      [8292, 123],
      c,
      [3382, 14],
      c,
      [253, 9],
      c,
      [2564, 102],
      c,
      [5650, 8],
      c,
      [6160, 141],
      c,
      [138, 143],
      c,
      [294, 7],
      c,
      [151, 21],
      c,
      [2601, 9],
      c,
      [2464, 26],
      c,
      [16, 15],
      c,
      [31, 31],
      c,
      [4359, 144],
      c,
      [1827, 133],
      c,
      [5141, 14],
      c,
      [548, 31],
      c,
      [28, 26],
      c,
      [26, 22],
      c,
      [22, 66],
      c,
      [24, 10],
      c,
      [845, 95],
      c,
      [6598, 12],
      c,
      [2464, 94],
      c,
      [3328, 13],
      c,
      [2804, 185],
      c,
      [4295, 101],
      c,
      [1571, 104],
      c,
      [3291, 104],
      c,
      [5048, 13],
      c,
      [4029, 130],
      c,
      [1805, 102],
      c,
      [284, 35],
      c,
      [4138, 13],
      c,
      [403, 21],
      c,
      [423, 100],
      c,
      [1488, 11],
      c,
      [637, 97],
      c,
      [9173, 13],
      c,
      [1287, 23],
      c,
      [2630, 101],
      c,
      [3501, 132],
      c,
      [2740, 22],
      c,
      [1566, 27],
      c,
      [6777, 26],
      c,
      [439, 100],
      c,
      [4550, 100],
      c,
      [2335, 10],
      c,
      [1273, 117],
      c,
      [121, 20],
      c,
      [20, 60],
      c,
      [3203, 10],
      c,
      [3712, 25],
      c,
      [4791, 178],
      c,
      [831, 102],
      c,
      [1296, 14],
      c,
      [4997, 129],
      c,
      [3145, 127],
      c,
      [9664, 221],
      c,
      [7122, 19],
      c,
      [8861, 204],
      c,
      [1642, 126],
      c,
      [1905, 20],
      c,
      [3633, 17],
      c,
      [270, 27],
      c,
      [6517, 134],
      c,
      [1838, 38],
      c,
      [166, 108],
      c,
      [5878, 132],
      c,
      [6298, 189],
      c,
      [11281, 10],
      c,
      [11090, 281],
      c,
      [9583, 149],
      c,
      [8038, 194],
      c,
      [13399, 100],
      c,
      [2459, 122],
      c,
      [125, 151],
      c,
      [474, 23],
      c,
      [599, 12],
      c,
      [600, 190],
      c,
      [13824, 101],
      c,
      [3858, 98],
      c,
      [8355, 10],
      c,
      [306, 107],
      c,
      [4093, 11],
      c,
      [6316, 109],
      c,
      [11016, 45],
      c,
      [1413, 137],
      c,
      [2733, 98],
      c,
      [2045, 98],
      c,
      [339, 127],
      c,
      [223, 100],
      c,
      [1389, 145],
      c,
      [860, 9],
      c,
      [5208, 8],
      c,
      [9364, 14],
      c,
      [8211, 160],
      c,
      [2262, 92],
      c,
      [6498, 100],
      c,
      [249, 102],
      c,
      [3366, 24],
      c,
      [374, 142],
      c,
      [8553, 196],
      c,
      [7806, 163],
      c,
      [1155, 132],
      c,
      [258, 105],
      c,
      [6756, 10],
      c,
      [12737, 12],
      c,
      [7519, 25],
      c,
      [12349, 12],
      c,
      [1325, 20],
      c,
      [682, 105],
      c,
      [14488, 216],
      c,
      [669, 128],
      c,
      [10359, 191],
      c,
      [9288, 11],
      c,
      [8688, 17],
      c,
      [15699, 16],
      c,
      [5, 9],
      c,
      [1510, 141],
      c,
      [2529, 224],
      c,
      [105, 11],
      c,
      [2395, 11],
      c,
      [122, 99],
      c,
      [11223, 228],
      c,
      [6755, 104],
      c,
      [97, 3]
    ]),
      state: u([
      1,
      2,
      3,
      5,
      4,
      11,
      23,
      12,
      24,
      s,
      [13, 5, 1],
      s,
      [6, 5, 1],
      34,
      40,
      20,
      21,
      22,
      18,
      19,
      25,
      28,
      27,
      29,
      26,
      44,
      45,
      48,
      47,
      50,
      51,
      52,
      48,
      141,
      c,
      [5, 4],
      142,
      c,
      [5, 3],
      144,
      145,
      48,
      155,
      c,
      [12, 4],
      157,
      c,
      [5, 3],
      160,
      159,
      c,
      [5, 3],
      162,
      199,
      190,
      191,
      164,
      168,
      175,
      184,
      185,
      183,
      165,
      166,
      167,
      176,
      169,
      177,
      170,
      173,
      174,
      186,
      s,
      [192, 7, 1],
      171,
      172,
      178,
      179,
      180,
      c,
      [35, 3],
      201,
      204,
      205,
      209,
      208,
      207,
      c,
      [9, 3],
      210,
      48,
      214,
      c,
      [60, 4],
      215,
      c,
      [5, 4],
      216,
      c,
      [5, 3],
      217,
      219,
      221,
      48,
      222,
      c,
      [13, 4],
      223,
      c,
      [5, 3],
      227,
      228,
      226,
      225,
      224,
      48,
      231,
      c,
      [10, 3],
      232,
      48,
      234,
      c,
      [6, 3],
      237,
      238,
      239,
      34,
      40,
      c,
      [93, 3],
      c,
      [92, 5],
      240,
      c,
      [91, 23],
      242,
      245,
      247,
      246,
      c,
      [7, 3],
      249,
      248,
      c,
      [5, 3],
      251,
      250,
      c,
      [5, 3],
      253,
      252,
      c,
      [5, 3],
      247,
      254,
      c,
      [5, 3],
      298,
      280,
      259,
      255,
      258,
      256,
      279,
      297,
      261,
      272,
      273,
      262,
      266,
      260,
      268,
      c,
      [98, 7],
      315,
      319,
      318,
      316,
      317,
      c,
      [12, 3],
      320,
      c,
      [4, 3],
      s,
      [322, 4, 1],
      s,
      [331, 8, 1],
      343,
      344,
      342,
      343,
      344,
      348,
      48,
      349,
      c,
      [142, 4],
      350,
      c,
      [5, 4],
      352,
      c,
      [5, 3],
      353,
      356,
      227,
      228,
      357,
      361,
      362,
      364,
      366,
      365,
      c,
      [13, 3],
      367,
      368,
      c,
      [144, 3],
      392,
      298,
      280,
      370,
      371,
      373,
      396,
      417,
      375,
      376,
      390,
      45,
      s,
      [377, 6, 1],
      391,
      383,
      384,
      393,
      394,
      372,
      s,
      [385, 5, 1],
      397,
      374,
      c,
      [39, 3],
      c,
      [178, 3],
      428,
      430,
      429,
      432,
      433,
      c,
      [275, 30],
      c,
      [38, 3],
      435,
      c,
      [38, 34],
      437,
      438,
      439,
      441,
      443,
      c,
      [200, 3],
      444,
      258,
      445,
      c,
      [200, 12],
      447,
      450,
      449,
      451,
      453,
      456,
      455,
      456,
      458,
      460,
      461,
      464,
      467,
      466,
      467,
      469,
      470,
      471,
      479,
      482,
      298,
      280,
      487,
      485,
      486,
      505,
      297,
      488,
      498,
      499,
      492,
      495,
      c,
      [35, 3],
      s,
      [508, 4, 1],
      515,
      c,
      [4, 3],
      209,
      517,
      c,
      [13, 3],
      518,
      520,
      c,
      [111, 3],
      s,
      [521, 4, 1],
      c,
      [109, 4],
      525,
      526,
      c,
      [142, 21],
      c,
      [137, 5],
      528,
      529,
      c,
      [138, 24],
      533,
      532,
      530,
      531,
      s,
      [535, 4, 1],
      540,
      541,
      550,
      544,
      549,
      543,
      539,
      542,
      554,
      555,
      s,
      [559, 6, 1],
      c,
      [420, 4],
      565,
      566,
      c,
      [33, 3],
      567,
      c,
      [4, 3],
      568,
      160,
      569,
      570,
      c,
      [535, 4],
      571,
      c,
      [6, 4],
      574,
      572,
      573,
      c,
      [389, 4],
      575,
      c,
      [5, 4],
      576,
      c,
      [5, 4],
      579,
      578,
      c,
      [28, 4],
      580,
      c,
      [5, 3],
      582,
      c,
      [211, 3],
      585,
      584,
      258,
      c,
      [211, 7],
      c,
      [210, 4],
      586,
      587,
      c,
      [412, 4],
      590,
      593,
      595,
      s,
      [594, 5, 2],
      603,
      607,
      603,
      608,
      609,
      612,
      619,
      620,
      623,
      625,
      626,
      627,
      629,
      630,
      631,
      635,
      471,
      637,
      c,
      [35, 3],
      s,
      [638, 4, 1],
      c,
      [7, 3],
      643,
      c,
      [4, 3],
      645,
      644,
      c,
      [5, 3],
      648,
      646,
      c,
      [185, 6],
      650,
      c,
      [327, 34],
      319,
      318,
      651,
      c,
      [528, 5],
      487,
      652,
      c,
      [290, 11],
      s,
      [658, 5, 1],
      657,
      656,
      655,
      s,
      [668, 4, 1],
      674,
      675,
      679,
      681,
      684,
      s,
      [691, 4, -1],
      c,
      [83, 6],
      693,
      c,
      [297, 25],
      698,
      696,
      695,
      48,
      697,
      c,
      [8, 3],
      704,
      705,
      c,
      [665, 32],
      706,
      707,
      712,
      713,
      714,
      716,
      719,
      555,
      298,
      723,
      720,
      722,
      c,
      [15, 3],
      724,
      727,
      728,
      c,
      [575, 4],
      737,
      736,
      739,
      741,
      742,
      745,
      366,
      748,
      c,
      [18, 3],
      749,
      750,
      751,
      c,
      [146, 3],
      754,
      c,
      [146, 11],
      c,
      [15, 3],
      755,
      c,
      [15, 11],
      s,
      [761, 4, 1],
      772,
      631,
      773,
      776,
      631,
      778,
      631,
      779,
      631,
      784,
      783,
      787,
      786,
      c,
      [20, 3],
      794,
      801,
      603,
      803,
      c,
      [185, 5],
      806,
      809,
      808,
      815,
      631,
      816,
      631,
      817,
      631,
      818,
      631,
      821,
      631,
      822,
      824,
      825,
      48,
      829,
      c,
      [30, 3],
      830,
      209,
      208,
      831,
      c,
      [7, 3],
      832,
      834,
      836,
      691,
      837,
      c,
      [8, 3],
      366,
      839,
      c,
      [712, 4],
      842,
      c,
      [5, 3],
      845,
      844,
      598,
      600,
      848,
      48,
      850,
      c,
      [10, 3],
      851,
      c,
      [450, 9],
      852,
      853,
      854,
      860,
      c,
      [446, 4],
      862,
      861,
      865,
      867,
      c,
      [8, 4],
      868,
      875,
      876,
      872,
      871,
      878,
      880,
      881,
      882,
      639,
      640,
      883,
      886,
      397,
      885,
      887,
      298,
      280,
      889,
      890,
      891,
      c,
      [50, 3],
      895,
      896,
      894,
      893,
      897,
      366,
      898,
      c,
      [10, 3],
      875,
      876,
      899,
      878,
      397,
      900,
      c,
      [312, 7],
      901,
      903,
      902,
      907,
      906,
      904,
      905,
      c,
      [872, 6],
      908,
      258,
      909,
      c,
      [672, 12],
      911,
      784,
      914,
      784,
      916,
      784,
      917,
      784,
      918,
      923,
      922,
      c,
      [14, 3],
      925,
      640,
      926,
      927,
      c,
      [7, 3],
      930,
      933,
      934,
      940,
      c,
      [7, 3],
      941,
      784,
      947,
      784,
      948,
      784,
      949,
      784,
      950,
      784,
      953,
      954,
      956,
      960,
      964,
      c,
      [340, 4],
      965,
      c,
      [339, 5],
      366,
      966,
      c,
      [5, 3],
      968,
      242,
      251,
      971,
      c,
      [7, 3],
      972,
      c,
      [262, 7],
      973,
      c,
      [153, 4],
      298,
      974,
      c,
      [18, 3],
      975,
      c,
      [318, 4],
      977,
      562,
      978,
      c,
      [17, 4],
      160,
      980,
      c,
      [608, 4],
      c,
      [17, 4],
      983,
      876,
      982,
      878,
      984,
      985,
      986,
      995,
      992,
      993,
      994,
      996,
      999,
      1002,
      c,
      [137, 3],
      1005,
      258,
      1006,
      c,
      [137, 12],
      1007,
      1012,
      c,
      [423, 3],
      1019,
      c,
      [545, 34],
      48,
      1020,
      c,
      [5, 3],
      1022,
      1021,
      c,
      [5, 3],
      s,
      [1026, 4, -1],
      c,
      [7, 3],
      1028,
      1031,
      1030,
      c,
      [6, 3],
      1031,
      1032,
      c,
      [5, 4],
      1033,
      c,
      [5, 3],
      1035,
      c,
      [92, 3],
      1036,
      258,
      1037,
      c,
      [92, 12],
      550,
      1038,
      549,
      1041,
      1039,
      1040,
      c,
      [61, 4],
      1042,
      c,
      [5, 3],
      1043,
      1044,
      c,
      [144, 4],
      c,
      [4, 4],
      1047,
      c,
      [163, 4],
      1052,
      1054,
      397,
      1053,
      1058,
      876,
      1057,
      878,
      298,
      280,
      1059,
      c,
      [290, 5],
      1060,
      c,
      [6, 3],
      1062,
      298,
      280,
      1063,
      c,
      [338, 5],
      298,
      280,
      1064,
      c,
      [8, 5],
      1065,
      1058,
      876,
      1068,
      878,
      907,
      906,
      1069,
      c,
      [11, 3],
      1070,
      1071,
      1075,
      1079,
      1080,
      45,
      c,
      [596, 8],
      1081,
      c,
      [903, 25],
      1083,
      1084,
      c,
      [137, 3],
      1086,
      258,
      1087,
      c,
      [137, 12],
      1090,
      319,
      1096,
      1093,
      1092,
      1094,
      c,
      [860, 4],
      1097,
      c,
      [280, 8],
      160,
      1098,
      c,
      [10, 4],
      1058,
      876,
      1099,
      878,
      1100,
      c,
      [142, 4],
      1102,
      995,
      1104,
      895,
      896,
      1105,
      895,
      896,
      1106,
      1107,
      1109,
      298,
      280,
      1117,
      1111,
      1116,
      c,
      [437, 6],
      1118,
      258,
      1119,
      c,
      [71, 12],
      1123,
      1120,
      1026,
      1126,
      c,
      [7, 3],
      1127,
      1128,
      1129,
      1041,
      1140,
      1134,
      1135,
      1137,
      1136,
      1138,
      1139,
      1144,
      1141,
      1146,
      1142,
      1143,
      542,
      c,
      [20, 3],
      1151,
      1153,
      c,
      [667, 3],
      1155,
      c,
      [667, 8],
      1156,
      c,
      [850, 4],
      1096,
      1161,
      c,
      [114, 4],
      c,
      [23, 3],
      1163,
      c,
      [690, 11],
      c,
      [123, 4],
      1166,
      c,
      [113, 4],
      875,
      876,
      1167,
      878,
      1168,
      c,
      [107, 3],
      1169,
      c,
      [107, 4],
      1170,
      1171,
      1172,
      1174,
      1187,
      1188,
      c,
      [76, 5],
      1192,
      1193,
      1190,
      1191,
      1189,
      1194,
      c,
      [578, 8],
      319,
      1096,
      1203,
      c,
      [31, 3],
      1206,
      c,
      [49, 4],
      c,
      [58, 4],
      209,
      1212,
      c,
      [14, 3],
      209,
      208,
      1213,
      c,
      [524, 4],
      1214,
      c,
      [5, 3],
      1215,
      1129,
      1216,
      1217,
      1140,
      1221,
      c,
      [135, 8],
      245,
      242,
      1223,
      1227,
      c,
      [111, 3],
      1232,
      c,
      [111, 15],
      160,
      1234,
      c,
      [234, 6],
      1236,
      878,
      1239,
      1245,
      1244,
      160,
      1248,
      c,
      [13, 4],
      1250,
      1249,
      c,
      [328, 3],
      1254,
      c,
      [501, 34],
      160,
      1255,
      c,
      [46, 4],
      1256,
      209,
      208,
      1259,
      c,
      [7, 3]
    ]),
      mode: u([
      s,
      [1, 9],
      2,
      2,
      c,
      [6, 5],
      s,
      [1, 268],
      s,
      [2, 53],
      c,
      [54, 54],
      c,
      [73, 20],
      s,
      [1, 318],
      c,
      [320, 58],
      c,
      [457, 35],
      c,
      [94, 3],
      c,
      [418, 92],
      c,
      [512, 275],
      c,
      [869, 87],
      c,
      [981, 112],
      c,
      [90, 71],
      c,
      [450, 182],
      c,
      [816, 95],
      c,
      [279, 93],
      c,
      [567, 119],
      c,
      [1261, 98],
      c,
      [2036, 271],
      c,
      [1897, 307],
      s,
      [2, 126],
      c,
      [1120, 100],
      c,
      [1306, 186],
      c,
      [606, 195],
      c,
      [612, 7],
      c,
      [295, 9],
      c,
      [2433, 8],
      c,
      [312, 92],
      c,
      [1513, 55],
      c,
      [1520, 105],
      c,
      [1527, 65],
      c,
      [555, 215],
      c,
      [386, 9],
      c,
      [562, 5],
      c,
      [2345, 129],
      c,
      [530, 11],
      c,
      [596, 12],
      c,
      [11, 22],
      c,
      [574, 16],
      c,
      [15, 16],
      c,
      [664, 15],
      c,
      [93, 12],
      c,
      [11, 16],
      c,
      [648, 63],
      c,
      [63, 42],
      c,
      [816, 44],
      c,
      [1578, 89],
      c,
      [1884, 223],
      c,
      [311, 22],
      c,
      [333, 74],
      c,
      [1110, 114],
      c,
      [97, 23],
      c,
      [120, 57],
      c,
      [1003, 13],
      c,
      [70, 22],
      c,
      [3007, 158],
      c,
      [1349, 144],
      c,
      [3125, 90],
      c,
      [92, 37],
      c,
      [2962, 324],
      c,
      [329, 180],
      c,
      [2522, 10],
      c,
      [5175, 125],
      c,
      [2669, 11],
      c,
      [2664, 7],
      c,
      [1123, 7],
      c,
      [1100, 17],
      c,
      [1937, 17],
      c,
      [1953, 26],
      c,
      [1101, 15],
      c,
      [2221, 13],
      c,
      [432, 9],
      c,
      [1139, 40],
      s,
      [1, 759],
      c,
      [5549, 129],
      c,
      [127, 125],
      c,
      [259, 11],
      c,
      [99, 31],
      c,
      [31, 19],
      c,
      [50, 21],
      c,
      [21, 45],
      c,
      [383, 20],
      c,
      [3430, 8],
      c,
      [30, 7],
      c,
      [1659, 9],
      c,
      [1243, 5],
      c,
      [2010, 107],
      c,
      [1297, 173],
      c,
      [173, 19],
      c,
      [19, 11],
      c,
      [4817, 78],
      c,
      [397, 7],
      c,
      [289, 96],
      c,
      [770, 54],
      c,
      [2911, 69],
      c,
      [1954, 5],
      c,
      [1868, 6],
      c,
      [3083, 9],
      c,
      [442, 90],
      c,
      [4180, 131],
      c,
      [1422, 147],
      c,
      [616, 6],
      c,
      [2252, 14],
      c,
      [2341, 24],
      c,
      [5049, 7],
      c,
      [2250, 104],
      c,
      [1188, 12],
      c,
      [1381, 40],
      c,
      [4267, 43],
      c,
      [1516, 89],
      c,
      [3795, 11],
      c,
      [104, 24],
      c,
      [7718, 10],
      c,
      [4459, 37],
      c,
      [20, 43],
      c,
      [82, 22],
      c,
      [7830, 191],
      c,
      [1734, 10],
      c,
      [1599, 91],
      c,
      [288, 181],
      c,
      [6558, 95],
      c,
      [1663, 95],
      c,
      [805, 7],
      c,
      [1441, 8],
      c,
      [2482, 119],
      c,
      [4708, 124],
      c,
      [1779, 10],
      c,
      [3759, 9],
      c,
      [2328, 99],
      c,
      [2549, 9],
      c,
      [756, 106],
      c,
      [1296, 11],
      c,
      [1880, 233],
      c,
      [6196, 30],
      c,
      [3634, 305],
      c,
      [18, 55],
      c,
      [1810, 21],
      c,
      [766, 6],
      c,
      [9647, 12],
      c,
      [401, 188],
      c,
      [9022, 96],
      c,
      [10698, 244],
      c,
      [208, 135],
      c,
      [48, 10],
      c,
      [1646, 68],
      c,
      [331, 120],
      c,
      [8173, 104],
      c,
      [3774, 108],
      c,
      [9922, 17],
      c,
      [4587, 14],
      c,
      [2934, 10],
      c,
      [1130, 6],
      c,
      [1903, 110],
      c,
      [6690, 32],
      c,
      [1671, 292],
      c,
      [1365, 94],
      c,
      [5787, 396],
      c,
      [672, 184],
      c,
      [5863, 122],
      c,
      [66, 55],
      c,
      [6111, 119],
      c,
      [5294, 71],
      c,
      [2903, 200],
      c,
      [1419, 270],
      c,
      [4705, 10],
      c,
      [7872, 13],
      c,
      [8070, 100],
      c,
      [7986, 129],
      c,
      [439, 184],
      c,
      [1034, 124],
      c,
      [434, 93],
      c,
      [2978, 122],
      c,
      [10451, 18],
      c,
      [234, 6],
      c,
      [2743, 132],
      c,
      [2250, 299],
      c,
      [428, 345],
      c,
      [3690, 120],
      c,
      [10494, 226],
      c,
      [13825, 19],
      c,
      [8040, 20],
      c,
      [6995, 12],
      c,
      [4722, 214],
      c,
      [4301, 132],
      c,
      [3511, 277],
      c,
      [7292, 23],
      c,
      [1159, 236],
      c,
      [2729, 110],
      c,
      [8711, 91],
      c,
      [3248, 197],
      s,
      [1, 86]
    ]),
      goto: u([
      31,
      30,
      38,
      32,
      39,
      35,
      36,
      37,
      33,
      349,
      349,
      41,
      42,
      43,
      46,
      258,
      74,
      71,
      81,
      84,
      68,
      70,
      85,
      89,
      49,
      128,
      104,
      108,
      112,
      106,
      80,
      86,
      100,
      119,
      118,
      109,
      54,
      125,
      79,
      126,
      56,
      53,
      66,
      64,
      63,
      65,
      59,
      67,
      60,
      58,
      57,
      92,
      116,
      61,
      91,
      83,
      105,
      62,
      123,
      117,
      110,
      93,
      55,
      107,
      97,
      130,
      131,
      121,
      135,
      96,
      134,
      136,
      137,
      140,
      73,
      76,
      77,
      72,
      78,
      95,
      87,
      90,
      113,
      88,
      102,
      101,
      124,
      98,
      94,
      120,
      82,
      103,
      122,
      114,
      132,
      115,
      133,
      111,
      129,
      127,
      69,
      75,
      99,
      138,
      139,
      c,
      [89, 178],
      143,
      s,
      [350, 53],
      41,
      s,
      [350, 65],
      s,
      [137, 7],
      146,
      149,
      148,
      147,
      152,
      151,
      150,
      153,
      154,
      c,
      [225, 14],
      156,
      c,
      [315, 89],
      158,
      c,
      [405, 164],
      161,
      163,
      c,
      [91, 4],
      187,
      188,
      68,
      189,
      c,
      [94, 31],
      257,
      182,
      c,
      [96, 5],
      200,
      c,
      [97, 6],
      181,
      c,
      [98, 42],
      202,
      s,
      [195, 4],
      s,
      [118, 3],
      203,
      s,
      [118, 27],
      202,
      195,
      206,
      s,
      [152, 3],
      c,
      [229, 89],
      s,
      [139, 5],
      211,
      212,
      213,
      c,
      [909, 267],
      s,
      [115, 14],
      218,
      s,
      [115, 75],
      s,
      [385, 36],
      220,
      s,
      [385, 89],
      c,
      [90, 54],
      c,
      [448, 178],
      229,
      230,
      58,
      58,
      c,
      [93, 89],
      s,
      [603, 5],
      233,
      603,
      603,
      c,
      [97, 89],
      235,
      236,
      s,
      [349, 53],
      41,
      s,
      [349, 65],
      c,
      [1261, 39],
      261,
      c,
      [1261, 56],
      241,
      281,
      243,
      244,
      282,
      243,
      244,
      c,
      [1129, 267],
      c,
      [89, 214],
      257,
      c,
      [90, 12],
      292,
      291,
      c,
      [92, 3],
      263,
      264,
      265,
      267,
      c,
      [96, 3],
      269,
      270,
      271,
      274,
      c,
      [100, 4],
      s,
      [275, 4, 1],
      295,
      296,
      s,
      [299, 8, 1],
      s,
      [283, 5, 1],
      293,
      294,
      288,
      289,
      281,
      282,
      290,
      c,
      [126, 31],
      307,
      s,
      [124, 36],
      134,
      s,
      [124, 90],
      s,
      [308, 7, 1],
      c,
      [1120, 93],
      c,
      [89, 89],
      321,
      s,
      [326, 5, 1],
      166,
      166,
      c,
      [2950, 5],
      339,
      340,
      341,
      345,
      346,
      347,
      c,
      [3, 3],
      c,
      [200, 178],
      351,
      c,
      [90, 89],
      691,
      691,
      354,
      355,
      243,
      244,
      s,
      [59, 3],
      229,
      230,
      59,
      59,
      358,
      359,
      360,
      243,
      244,
      s,
      [605, 5],
      363,
      605,
      c,
      [1205, 3],
      135,
      135,
      c,
      [118, 88],
      s,
      [349, 15],
      265,
      s,
      [349, 32],
      369,
      c,
      [1520, 76],
      c,
      [210, 10],
      398,
      399,
      c,
      [212, 5],
      423,
      109,
      408,
      c,
      [214, 4],
      406,
      56,
      53,
      421,
      422,
      c,
      [217, 10],
      402,
      403,
      46,
      258,
      404,
      405,
      407,
      c,
      [224, 3],
      416,
      409,
      410,
      418,
      419,
      395,
      c,
      [228, 7],
      424,
      c,
      [229, 3],
      426,
      c,
      [230, 9],
      427,
      77,
      411,
      412,
      c,
      [233, 3],
      413,
      414,
      90,
      415,
      113,
      420,
      425,
      400,
      401,
      c,
      [536, 26],
      c,
      [1638, 35],
      431,
      434,
      163,
      c,
      [1640, 56],
      c,
      [98, 98],
      436,
      c,
      [3000, 3],
      202,
      195,
      c,
      [3005, 5],
      s,
      [195, 3],
      440,
      s,
      [419, 3],
      442,
      c,
      [4, 4],
      c,
      [665, 48],
      c,
      [1308, 77],
      310,
      310,
      446,
      s,
      [310, 8],
      448,
      448,
      s,
      [501, 10],
      452,
      s,
      [504, 10],
      454,
      s,
      [508, 11],
      457,
      s,
      [518, 14],
      c,
      [15, 15],
      459,
      457,
      457,
      462,
      463,
      s,
      [520, 11],
      465,
      520,
      520,
      468,
      s,
      [523, 10],
      c,
      [11, 11],
      473,
      238,
      238,
      472,
      s,
      [238, 37],
      492,
      s,
      [485, 10],
      491,
      s,
      [486, 10],
      s,
      [121, 3],
      474,
      s,
      [121, 41],
      s,
      [475, 4, 1],
      243,
      244,
      480,
      481,
      s,
      [200, 36],
      483,
      484,
      s,
      [200, 87],
      c,
      [483, 53],
      489,
      490,
      491,
      493,
      c,
      [483, 3],
      496,
      497,
      494,
      500,
      c,
      [483, 4],
      s,
      [501, 4, 1],
      c,
      [483, 13],
      506,
      507,
      c,
      [483, 4],
      c,
      [481, 32],
      513,
      512,
      514,
      c,
      [3, 3],
      516,
      c,
      [1278, 89],
      s,
      [106, 4],
      519,
      s,
      [106, 21],
      c,
      [22, 22],
      s,
      [106, 52],
      c,
      [923, 17],
      271,
      c,
      [193, 22],
      c,
      [921, 56],
      527,
      c,
      [97, 17],
      292,
      c,
      [97, 22],
      292,
      c,
      [98, 56],
      607,
      607,
      229,
      s,
      [42, 3],
      534,
      546,
      553,
      551,
      552,
      547,
      548,
      623,
      545,
      556,
      557,
      308,
      558,
      423,
      421,
      422,
      424,
      426,
      427,
      420,
      425,
      c,
      [8, 8],
      c,
      [3007, 123],
      c,
      [1994, 174],
      726,
      726,
      74,
      726,
      c,
      [92, 33],
      131,
      57,
      92,
      726,
      c,
      [183, 54],
      131,
      c,
      [92, 36],
      c,
      [3089, 320],
      s,
      [730, 4],
      577,
      74,
      549,
      c,
      [184, 177],
      29,
      237,
      s,
      [748, 3],
      581,
      748,
      163,
      583,
      c,
      [1973, 91],
      c,
      [1490, 32],
      306,
      588,
      589,
      s,
      [58, 3],
      c,
      [3150, 4],
      591,
      592,
      597,
      599,
      425,
      601,
      317,
      604,
      605,
      606,
      c,
      [4, 3],
      c,
      [2126, 5],
      442,
      610,
      611,
      614,
      613,
      616,
      615,
      s,
      [433, 10],
      617,
      618,
      c,
      [1937, 14],
      621,
      622,
      c,
      [16, 14],
      624,
      c,
      [15, 14],
      c,
      [14, 14],
      628,
      510,
      628,
      510,
      s,
      [529, 10],
      633,
      632,
      529,
      634,
      473,
      240,
      240,
      472,
      s,
      [240, 37],
      c,
      [288, 19],
      636,
      c,
      [476, 89],
      642,
      c,
      [3928, 270],
      647,
      c,
      [90, 67],
      649,
      c,
      [2929, 102],
      c,
      [367, 133],
      c,
      [2414, 75],
      s,
      [201, 39],
      653,
      s,
      [201, 87],
      s,
      [202, 39],
      654,
      s,
      [202, 87],
      229,
      230,
      663,
      664,
      665,
      s,
      [94, 4],
      314,
      314,
      666,
      s,
      [314, 13],
      s,
      [455, 17],
      667,
      s,
      [520, 18],
      c,
      [1150, 14],
      c,
      [21, 52],
      672,
      673,
      c,
      [23, 21],
      168,
      676,
      s,
      [168, 5],
      677,
      678,
      160,
      194,
      194,
      680,
      682,
      683,
      179,
      179,
      108,
      108,
      685,
      687,
      686,
      108,
      74,
      583,
      583,
      c,
      [552, 17],
      583,
      c,
      [642, 71],
      692,
      c,
      [830, 17],
      272,
      c,
      [2738, 78],
      694,
      c,
      [97, 4],
      s,
      [699, 5, 1],
      c,
      [833, 84],
      262,
      c,
      [6850, 18],
      293,
      c,
      [95, 10],
      293,
      293,
      c,
      [95, 9],
      293,
      293,
      c,
      [193, 56],
      243,
      244,
      s,
      [708, 4, 1],
      31,
      30,
      715,
      624,
      624,
      c,
      [2836, 3],
      624,
      717,
      718,
      267,
      556,
      c,
      [951, 47],
      721,
      c,
      [109, 42],
      725,
      726,
      729,
      s,
      [349, 15],
      730,
      c,
      [2911, 104],
      731,
      732,
      733,
      357,
      734,
      359,
      735,
      738,
      31,
      740,
      c,
      [3764, 3],
      130,
      743,
      744,
      746,
      747,
      135,
      135,
      c,
      [4630, 91],
      419,
      442,
      399,
      752,
      399,
      304,
      307,
      753,
      c,
      [1283, 123],
      c,
      [123, 123],
      s,
      [756, 5, 1],
      604,
      605,
      604,
      605,
      766,
      765,
      s,
      [767, 5, 1],
      c,
      [2236, 13],
      514,
      774,
      775,
      c,
      [16, 13],
      777,
      c,
      [14, 13],
      c,
      [13, 13],
      780,
      781,
      782,
      s,
      [535, 10],
      785,
      c,
      [209, 42],
      788,
      c,
      [430, 17],
      789,
      c,
      [177, 30],
      s,
      [790, 4, 1],
      36,
      36,
      795,
      s,
      [120, 3],
      796,
      s,
      [120, 41],
      s,
      [797, 4, 1],
      317,
      c,
      [2544, 3],
      s,
      [204, 39],
      802,
      s,
      [204, 87],
      805,
      96,
      96,
      804,
      s,
      [95, 3],
      c,
      [1523, 5],
      s,
      [95, 4],
      807,
      s,
      [76, 12],
      s,
      [84, 7],
      810,
      s,
      [84, 5],
      s,
      [811, 4, 1],
      s,
      [529, 17],
      c,
      [371, 13],
      c,
      [20, 50],
      819,
      820,
      c,
      [22, 20],
      823,
      s,
      [176, 5],
      826,
      827,
      828,
      c,
      [2139, 89],
      c,
      [4427, 3],
      c,
      [92, 89],
      833,
      181,
      112,
      112,
      835,
      c,
      [3, 3],
      74,
      584,
      584,
      c,
      [99, 17],
      584,
      c,
      [100, 71],
      838,
      c,
      [1148, 91],
      840,
      841,
      c,
      [283, 89],
      s,
      [711, 3],
      s,
      [47, 89],
      843,
      847,
      c,
      [3396, 3],
      846,
      614,
      849,
      c,
      [189, 89],
      546,
      593,
      c,
      [4598, 7],
      s,
      [855, 4, 1],
      380,
      859,
      c,
      [4584, 119],
      252,
      729,
      863,
      864,
      866,
      c,
      [124, 119],
      869,
      332,
      870,
      332,
      332,
      877,
      879,
      873,
      874,
      621,
      622,
      555,
      884,
      321,
      398,
      399,
      423,
      321,
      c,
      [4852, 7],
      400,
      401,
      544,
      888,
      c,
      [376, 89],
      892,
      s,
      [553, 3],
      743,
      744,
      553,
      c,
      [1904, 93],
      877,
      879,
      621,
      622,
      c,
      [208, 3],
      c,
      [207, 9],
      94,
      c,
      [2819, 8],
      306,
      588,
      c,
      [3295, 142],
      c,
      [6192, 72],
      910,
      614,
      613,
      912,
      913,
      c,
      [1821, 11],
      915,
      c,
      [12, 11],
      c,
      [11, 22],
      919,
      920,
      921,
      c,
      [178, 42],
      924,
      c,
      [268, 66],
      928,
      c,
      [358, 70],
      929,
      932,
      931,
      s,
      [935, 5, 1],
      c,
      [455, 89],
      243,
      244,
      s,
      [942, 5, 1],
      s,
      [535, 17],
      c,
      [316, 11],
      c,
      [18, 44],
      951,
      952,
      c,
      [20, 18],
      c,
      [3309, 4],
      179,
      955,
      167,
      c,
      [1809, 3],
      s,
      [167, 5],
      957,
      958,
      959,
      330,
      193,
      193,
      961,
      962,
      963,
      c,
      [667, 93],
      c,
      [3222, 89],
      c,
      [967, 91],
      967,
      969,
      970,
      s,
      [685, 3],
      c,
      [8805, 91],
      292,
      291,
      c,
      [2786, 4],
      c,
      [2783, 4],
      c,
      [2779, 24],
      c,
      [6143, 208],
      c,
      [1663, 16],
      s,
      [349, 30],
      863,
      864,
      c,
      [211, 74],
      976,
      c,
      [331, 119],
      979,
      c,
      [6203, 35],
      c,
      [333, 70],
      981,
      c,
      [211, 104],
      c,
      [1759, 4],
      c,
      [1757, 8],
      s,
      [340, 5],
      987,
      s,
      [340, 8],
      s,
      [988, 4, 1],
      793,
      c,
      [7475, 6],
      997,
      s,
      [235, 5],
      998,
      555,
      555,
      884,
      555,
      1000,
      1001,
      s,
      [96, 3],
      c,
      [3098, 3],
      1003,
      1004,
      c,
      [1701, 125],
      c,
      [5896, 3],
      409,
      s,
      [1008, 4, 1],
      c,
      [7867, 11],
      s,
      [1013, 6, 1],
      c,
      [5333, 235],
      c,
      [89, 41],
      81,
      c,
      [90, 89],
      1027,
      833,
      181,
      181,
      1029,
      c,
      [6901, 267],
      1034,
      c,
      [789, 125],
      623,
      623,
      c,
      [3207, 3],
      c,
      [309, 178],
      202,
      195,
      1045,
      677,
      s,
      [349, 15],
      378,
      s,
      [349, 26],
      c,
      [27, 13],
      c,
      [1280, 66],
      1046,
      s,
      [349, 15],
      254,
      c,
      [1401, 104],
      c,
      [1731, 119],
      1048,
      1049,
      1050,
      338,
      1051,
      c,
      [3280, 8],
      1055,
      c,
      [3281, 4],
      1056,
      c,
      [1539, 4],
      c,
      [566, 178],
      1061,
      s,
      [557, 3],
      c,
      [182, 178],
      561,
      1067,
      1066,
      c,
      [367, 93],
      c,
      [9842, 8],
      408,
      1072,
      1073,
      1074,
      c,
      [3293, 5],
      1076,
      1077,
      82,
      1078,
      c,
      [13649, 6],
      c,
      [1814, 35],
      c,
      [1811, 56],
      1082,
      c,
      [114, 3],
      634,
      1085,
      c,
      [1276, 125],
      1088,
      1089,
      1091,
      c,
      [341, 81],
      1095,
      c,
      [8754, 43],
      c,
      [2551, 70],
      251,
      s,
      [349, 26],
      c,
      [27, 5],
      251,
      c,
      [33, 9],
      c,
      [3096, 67],
      c,
      [213, 89],
      c,
      [738, 4],
      c,
      [1247, 119],
      1101,
      577,
      s,
      [342, 6],
      1103,
      s,
      [342, 8],
      c,
      [2753, 6],
      743,
      744,
      743,
      744,
      392,
      392,
      1108,
      c,
      [3, 3],
      1110,
      c,
      [550, 42],
      1114,
      c,
      [247, 6],
      1112,
      1113,
      1115,
      c,
      [249, 9],
      c,
      [665, 8],
      c,
      [4544, 156],
      1124,
      1125,
      1121,
      1122,
      c,
      [1120, 89],
      s,
      [1130, 4, 1],
      c,
      [93, 9],
      546,
      c,
      [94, 32],
      1145,
      c,
      [95, 8],
      1148,
      c,
      [96, 27],
      1149,
      1150,
      1147,
      c,
      [99, 5],
      547,
      548,
      111,
      129,
      715,
      545,
      c,
      [103, 6],
      632,
      632,
      1152,
      c,
      [3, 3],
      1154,
      c,
      [6761, 115],
      1157,
      c,
      [234, 8],
      1158,
      1159,
      1160,
      c,
      [326, 89],
      1162,
      c,
      [6978, 123],
      1164,
      s,
      [349, 15],
      1165,
      c,
      [2289, 223],
      c,
      [1903, 46],
      c,
      [1012, 58],
      s,
      [457, 3],
      s,
      [740, 3],
      415,
      1173,
      c,
      [1803, 3],
      1175,
      1176,
      1177,
      1179,
      1178,
      1180,
      1182,
      1181,
      1184,
      1183,
      1185,
      636,
      1186,
      546,
      1148,
      c,
      [737, 3],
      547,
      548,
      715,
      545,
      312,
      855,
      188,
      1196,
      1197,
      1195,
      1198,
      1199,
      s,
      [94, 3],
      c,
      [5699, 8],
      672,
      1200,
      1201,
      1202,
      c,
      [613, 89],
      1204,
      1160,
      1205,
      c,
      [371, 119],
      1207,
      s,
      [349, 15],
      1208,
      c,
      [121, 104],
      1209,
      1210,
      1211,
      c,
      [3725, 179],
      c,
      [5365, 90],
      c,
      [1454, 3],
      163,
      1218,
      1219,
      1220,
      546,
      1145,
      c,
      [644, 8],
      665,
      665,
      243,
      244,
      667,
      667,
      243,
      244,
      1222,
      1224,
      1225,
      1226,
      1229,
      1228,
      1230,
      1231,
      c,
      [1160, 123],
      s,
      [349, 15],
      1233,
      c,
      [5391, 105],
      c,
      [2295, 89],
      1235,
      c,
      [1131, 4],
      1237,
      1238,
      330,
      c,
      [374, 3],
      s,
      [1240, 4, 1],
      243,
      244,
      1246,
      1247,
      c,
      [109, 90],
      75,
      1251,
      1252,
      1253,
      c,
      [4844, 99],
      c,
      [192, 89],
      1257,
      1258,
      c,
      [849, 89],
      1260,
      330
    ])
    }),
    defaultActions: bda({
      idx: u([
      2,
      s,
      [4, 6, 1],
      s,
      [11, 19, 1],
      40,
      42,
      44,
      s,
      [49, 92, 1],
      144,
      160,
      161,
      164,
      166,
      s,
      [168, 8, 1],
      178,
      179,
      180,
      s,
      [183, 4, 1],
      s,
      [192, 7, 1],
      208,
      209,
      211,
      212,
      213,
      218,
      222,
      226,
      227,
      228,
      233,
      235,
      238,
      240,
      241,
      243,
      244,
      s,
      [247, 4, 2],
      258,
      260,
      261,
      265,
      266,
      268,
      275,
      279,
      s,
      [281, 5, 1],
      s,
      [288, 10, 1],
      s,
      [299, 9, 1],
      310,
      311,
      314,
      317,
      319,
      320,
      322,
      323,
      324,
      327,
      328,
      s,
      [331, 8, 1],
      s,
      [340, 5, 1],
      s,
      [346, 10, 1],
      357,
      358,
      359,
      s,
      [365, 4, 1],
      370,
      s,
      [372, 23, 1],
      397,
      s,
      [400, 4, 1],
      405,
      408,
      418,
      s,
      [420, 12, 1],
      434,
      435,
      447,
      449,
      450,
      451,
      456,
      465,
      466,
      467,
      469,
      470,
      473,
      480,
      486,
      s,
      [488, 5, 1],
      494,
      495,
      501,
      s,
      [503, 5, 1],
      511,
      512,
      513,
      516,
      517,
      519,
      523,
      525,
      526,
      530,
      531,
      533,
      534,
      s,
      [537, 5, 1],
      s,
      [545, 4, 1],
      550,
      551,
      552,
      554,
      s,
      [557, 4, 1],
      568,
      570,
      s,
      [576, 5, 1],
      590,
      s,
      [593, 4, 1],
      599,
      s,
      [601, 7, 1],
      610,
      611,
      613,
      616,
      621,
      622,
      632,
      635,
      636,
      637,
      639,
      642,
      645,
      647,
      648,
      650,
      651,
      654,
      s,
      [657, 7, 1],
      679,
      682,
      683,
      685,
      686,
      687,
      690,
      693,
      694,
      696,
      697,
      699,
      700,
      701,
      703,
      705,
      709,
      712,
      713,
      714,
      s,
      [716, 4, 1],
      721,
      723,
      724,
      728,
      729,
      s,
      [734, 5, 1],
      741,
      746,
      s,
      [748, 4, 1],
      754,
      s,
      [760, 5, 1],
      766,
      767,
      768,
      771,
      774,
      775,
      777,
      783,
      784,
      s,
      [786, 10, 1],
      801,
      802,
      805,
      806,
      808,
      809,
      811,
      812,
      825,
      829,
      830,
      834,
      836,
      837,
      839,
      840,
      842,
      844,
      845,
      846,
      850,
      851,
      853,
      854,
      859,
      862,
      863,
      870,
      s,
      [875, 7, 1],
      883,
      s,
      [885, 5, 1],
      891,
      894,
      895,
      s,
      [896, 4, 2],
      903,
      905,
      907,
      912,
      s,
      [914, 7, 1],
      s,
      [922, 7, 1],
      931,
      s,
      [934, 6, 1],
      945,
      s,
      [947, 7, 1],
      956,
      960,
      s,
      [962, 5, 1],
      974,
      975,
      977,
      980,
      985,
      991,
      992,
      994,
      995,
      996,
      1000,
      1002,
      1003,
      s,
      [1010, 7, 1],
      1018,
      1019,
      1020,
      1022,
      1025,
      1026,
      1027,
      s,
      [1029, 5, 1],
      1037,
      1038,
      1040,
      1052,
      1053,
      1054,
      1056,
      1057,
      1058,
      1060,
      s,
      [1062, 4, 1],
      1068,
      1069,
      1075,
      1077,
      1079,
      1080,
      1082,
      1083,
      1090,
      1094,
      1097,
      1098,
      1102,
      s,
      [1104, 6, 1],
      1111,
      1116,
      1119,
      1121,
      1124,
      1125,
      1126,
      1128,
      1133,
      1134,
      1135,
      1137,
      1138,
      s,
      [1140, 5, 1],
      1147,
      1149,
      1150,
      1151,
      1153,
      1159,
      1163,
      s,
      [1168, 5, 1],
      1174,
      1175,
      1181,
      1183,
      1187,
      1188,
      1189,
      1191,
      s,
      [1193, 5, 1],
      1203,
      1204,
      1210,
      1211,
      1214,
      1215,
      1218,
      1219,
      s,
      [1221, 7, 1],
      1230,
      1234,
      1236,
      1237,
      1239,
      1240,
      1241,
      1243,
      1244,
      1246,
      s,
      [1248, 8, 1],
      1260
    ]),
      goto: u([
      1,
      s,
      [4, 25, 1],
      351,
      2,
      39,
      63,
      64,
      s,
      [694, 90, 1],
      352,
      133,
      3,
      256,
      294,
      297,
      298,
      299,
      s,
      [276, 5, 1],
      394,
      395,
      396,
      s,
      [283, 4, 1],
      s,
      [362, 7, 1],
      67,
      66,
      140,
      141,
      138,
      116,
      387,
      57,
      54,
      55,
      604,
      353,
      269,
      295,
      296,
      142,
      143,
      126,
      130,
      127,
      128,
      309,
      449,
      427,
      431,
      432,
      436,
      444,
      448,
      495,
      496,
      482,
      483,
      484,
      493,
      494,
      497,
      s,
      [487, 4, 1],
      s,
      [471, 11, 1],
      289,
      371,
      372,
      375,
      198,
      129,
      117,
      150,
      153,
      154,
      157,
      158,
      98,
      100,
      144,
      145,
      146,
      589,
      591,
      102,
      104,
      105,
      577,
      587,
      588,
      585,
      586,
      578,
      114,
      383,
      386,
      384,
      690,
      692,
      693,
      56,
      40,
      41,
      255,
      136,
      264,
      270,
      348,
      s,
      [211, 23, 1],
      572,
      575,
      576,
      322,
      321,
      322,
      323,
      360,
      s,
      [564, 8, 1],
      301,
      s,
      [206, 4, 1],
      303,
      428,
      429,
      500,
      430,
      517,
      519,
      446,
      522,
      447,
      239,
      38,
      196,
      313,
      s,
      [450, 5, 1],
      458,
      459,
      466,
      468,
      469,
      470,
      485,
      486,
      162,
      163,
      164,
      151,
      68,
      107,
      273,
      281,
      282,
      590,
      608,
      43,
      606,
      594,
      s,
      [596, 4, 1],
      688,
      689,
      663,
      664,
      625,
      619,
      620,
      266,
      210,
      245,
      573,
      574,
      354,
      132,
      546,
      321,
      548,
      550,
      355,
      302,
      s,
      [404, 4, 1],
      423,
      426,
      290,
      318,
      322,
      322,
      420,
      291,
      311,
      312,
      505,
      503,
      511,
      512,
      531,
      241,
      242,
      243,
      34,
      122,
      134,
      653,
      654,
      147,
      197,
      203,
      92,
      s,
      [87, 5, 1],
      60,
      165,
      177,
      178,
      109,
      110,
      111,
      581,
      274,
      275,
      52,
      49,
      44,
      45,
      46,
      48,
      263,
      592,
      600,
      601,
      602,
      626,
      621,
      622,
      268,
      379,
      381,
      234,
      249,
      s,
      [322, 3],
      536,
      32,
      38,
      540,
      321,
      260,
      397,
      398,
      400,
      305,
      424,
      319,
      320,
      287,
      288,
      499,
      506,
      502,
      507,
      515,
      516,
      439,
      445,
      534,
      530,
      526,
      527,
      528,
      532,
      521,
      244,
      38,
      35,
      38,
      199,
      205,
      97,
      93,
      86,
      85,
      315,
      316,
      170,
      159,
      161,
      103,
      579,
      582,
      99,
      53,
      50,
      609,
      610,
      612,
      613,
      595,
      686,
      687,
      246,
      250,
      322,
      333,
      338,
      s,
      [334, 4, 1],
      356,
      358,
      537,
      538,
      539,
      541,
      321,
      542,
      237,
      554,
      551,
      552,
      259,
      308,
      402,
      307,
      388,
      125,
      434,
      437,
      513,
      438,
      440,
      441,
      442,
      509,
      533,
      524,
      525,
      33,
      37,
      119,
      123,
      376,
      655,
      s,
      [657, 5, 1],
      456,
      s,
      [460, 6, 1],
      467,
      169,
      156,
      322,
      113,
      580,
      51,
      101,
      382,
      247,
      253,
      324,
      347,
      30,
      556,
      559,
      321,
      545,
      361,
      300,
      403,
      498,
      435,
      443,
      369,
      370,
      377,
      373,
      374,
      148,
      149,
      65,
      80,
      78,
      457,
      175,
      171,
      174,
      172,
      173,
      409,
      611,
      628,
      329,
      330,
      331,
      341,
      344,
      339,
      346,
      560,
      236,
      543,
      547,
      401,
      389,
      656,
      83,
      155,
      182,
      180,
      408,
      670,
      681,
      248,
      325,
      345,
      558,
      562,
      563,
      390,
      245,
      391,
      411,
      416,
      422,
      72,
      61,
      62,
      79,
      185,
      627,
      629,
      635,
      640,
      637,
      639,
      s,
      [642, 4, 1],
      647,
      649,
      651,
      630,
      631,
      678,
      683,
      393,
      410,
      412,
      413,
      414,
      421,
      77,
      187,
      189,
      638,
      646,
      662,
      666,
      668,
      669,
      648,
      650,
      652,
      682,
      679,
      417,
      418,
      183,
      184,
      188,
      190,
      641,
      633,
      s,
      [615, 4, 1],
      671,
      673,
      327,
      343,
      73,
      186,
      192,
      191,
      675,
      676,
      680,
      328,
      74,
      321,
      69,
      70,
      674,
      684,
      326,
      71
    ])
    }),
    parseError: function parseError(str, hash, ExceptionClass) {
        if (hash.recoverable) {
            if (typeof this.trace === 'function') {
                this.trace(str);
            }
            hash.destroy();             // destroy... well, *almost*!
        } else {
            if (typeof this.trace === 'function') {
                this.trace(str);
            }
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            throw new ExceptionClass(str, hash);
        }
    },
    parse: function parse(input) {
        var self = this;
        var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
        var sstack = new Array(128);        // state stack: stores states (column storage)
    
        var vstack = new Array(128);        // semantic value stack
        var lstack = new Array(128);        // location stack
        var table = this.table;
        var sp = 0;                         // 'stack pointer': index into the stacks
        var yyloc;
    
        
    
    
        var symbol = 0;
    
    
    
        var TERROR = this.TERROR;
        var EOF = this.EOF;
        var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
        var NO_ACTION = [0, 1261 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];
    
        var lexer;
        if (this.__lexer__) {
            lexer = this.__lexer__;
        } else {
            lexer = this.__lexer__ = Object.create(this.lexer);
        }
    
        var sharedState_yy = {
            parseError: undefined,
            quoteName: undefined,
            lexer: undefined,
            parser: undefined,
            pre_parse: undefined,
            post_parse: undefined,
            pre_lex: undefined,
            post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
        };
    
        var ASSERT;
        if (typeof assert !== 'function') {
            ASSERT = function JisonAssert(cond, msg) {
                if (!cond) {
                    throw new Error('assertion failed: ' + (msg || '***'));
                }
            };
        } else {
            ASSERT = assert;
        }
    
        this.yyGetSharedState = function yyGetSharedState() {
            return sharedState_yy;
        };
    
    
        // shallow clone objects, straight copy of simple `src` values
        // e.g. `lexer.yytext` MAY be a complex value object,
        // rather than a simple string/value.
        function shallow_copy(src) {
            if (typeof src === 'object') {
                var dst = {};
                for (var k in src) {
                    if (Object.prototype.hasOwnProperty.call(src, k)) {
                        dst[k] = src[k];
                    }
                }
                return dst;
            }
            return src;
        }
        function shallow_copy_noclobber(dst, src) {
            for (var k in src) {
                if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                    dst[k] = src[k];
                }
            }
        }
        function copy_yylloc(loc) {
            var rv = shallow_copy(loc);
            if (rv && rv.range) {
                rv.range = rv.range.slice(0);
            }
            return rv;
        }
    
        // copy state
        shallow_copy_noclobber(sharedState_yy, this.yy);
    
        sharedState_yy.lexer = lexer;
        sharedState_yy.parser = this;
    
    
    
    
    
    
        // Does the shared state override the default `parseError` that already comes with this instance?
        if (typeof sharedState_yy.parseError === 'function') {
            this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
                if (!ExceptionClass) {
                    ExceptionClass = this.JisonParserError;
                }
                return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
            };
        } else {
            this.parseError = this.originalParseError;
        }
    
        // Does the shared state override the default `quoteName` that already comes with this instance?
        if (typeof sharedState_yy.quoteName === 'function') {
            this.quoteName = function quoteNameAlt(id_str) {
                return sharedState_yy.quoteName.call(this, id_str);
            };
        } else {
            this.quoteName = this.originalQuoteName;
        }
    
        // set up the cleanup function; make it an API so that external code can re-use this one in case of
        // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
        // case this parse() API method doesn't come with a `finally { ... }` block any more!
        //
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `sharedState`, etc. references will be *wrong*!
        this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
            var rv;
    
            if (invoke_post_methods) {
                var hash;
    
                if (sharedState_yy.post_parse || this.post_parse) {
                    // create an error hash info instance: we re-use this API in a **non-error situation**
                    // as this one delivers all parser internals ready for access by userland code.
                    hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
                }
    
                if (sharedState_yy.post_parse) {
                    rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                if (this.post_parse) {
                    rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
    
                // cleanup:
                if (hash && hash.destroy) {
                    hash.destroy();
                }
            }
    
            if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.
    
            // clean up the lingering lexer structures as well:
            if (lexer.cleanupAfterLex) {
                lexer.cleanupAfterLex(do_not_nuke_errorinfos);
            }
    
            // prevent lingering circular references from causing memory leaks:
            if (sharedState_yy) {
                sharedState_yy.lexer = undefined;
                sharedState_yy.parser = undefined;
                if (lexer.yy === sharedState_yy) {
                    lexer.yy = undefined;
                }
            }
            sharedState_yy = undefined;
            this.parseError = this.originalParseError;
            this.quoteName = this.originalQuoteName;
    
            // nuke the vstack[] array at least as that one will still reference obsoleted user values.
            // To be safe, we nuke the other internal stack columns as well...
            stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
            sstack.length = 0;
            lstack.length = 0;
            vstack.length = 0;
            sp = 0;
    
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') {
                        el.destroy();
                    }
                }
                this.__error_infos.length = 0;
    
    
            }
    
            return resultValue;
        };
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
        this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
            var pei = {
                errStr: msg,
                exception: ex,
                text: lexer.match,
                value: lexer.yytext,
                token: this.describeSymbol(symbol) || symbol,
                token_id: symbol,
                line: lexer.yylineno,
                loc: copy_yylloc(lexer.yylloc),
                expected: expected,
                recoverable: recoverable,
                state: state,
                action: action,
                new_state: newState,
                symbol_stack: stack,
                state_stack: sstack,
                value_stack: vstack,
                location_stack: lstack,
                stack_pointer: sp,
                yy: sharedState_yy,
                lexer: lexer,
                parser: this,
    
                // and make sure the error info doesn't stay due to potential
                // ref cycle via userland code manipulations.
                // These would otherwise all be memory leak opportunities!
                //
                // Note that only array and object references are nuked as those
                // constitute the set of elements which can produce a cyclic ref.
                // The rest of the members is kept intact as they are harmless.
                destroy: function destructParseErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // info.value = null;
                    // info.value_stack = null;
                    // ...
                    var rec = !!this.recoverable;
                    for (var key in this) {
                        if (this.hasOwnProperty(key) && typeof key === 'object') {
                            this[key] = undefined;
                        }
                    }
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        };
    
    
    
    
    
    
    
    
    
    
    
    
    
        function getNonTerminalFromCode(symbol) {
            var tokenName = self.getSymbolName(symbol);
            if (!tokenName) {
                tokenName = symbol;
            }
            return tokenName;
        }
    
    
        function stdLex() {
            var token = lexer.lex();
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
    
            return token || EOF;
        }
    
        function fastLex() {
            var token = lexer.fastLex();
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
    
            return token || EOF;
        }
    
        var lex = stdLex;
    
    
        var state, action, r, t;
        var yyval = {
            $: true,
            _$: undefined,
            yy: sharedState_yy
        };
        var p;
        var yyrulelen;
        var this_production;
        var newState;
        var retval = false;
    
    
        try {
            this.__reentrant_call_depth++;
    
            lexer.setInput(input, sharedState_yy);
    
            // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
            // this initial `setInput()` call: hence we can now check and decide
            // whether we'll go with the standard, slower, lex() API or the
            // `fast_lex()` one:
            if (typeof lexer.canIUse === 'function') {
                var lexerInfo = lexer.canIUse();
                if (lexerInfo.fastLex && typeof fastLex === 'function') {
                    lex = fastLex;
                }
            } 
    
            yyloc = lexer.yylloc;
            lstack[sp] = yyloc;
            vstack[sp] = null;
            sstack[sp] = 0;
            stack[sp] = 0;
            ++sp;
    
    
    
    
    
            if (this.pre_parse) {
                this.pre_parse.call(this, sharedState_yy);
            }
            if (sharedState_yy.pre_parse) {
                sharedState_yy.pre_parse.call(this, sharedState_yy);
            }
    
            newState = sstack[sp - 1];
            for (;;) {
                // retrieve state number from top of stack
                state = newState;               // sstack[sp - 1];
    
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = 2;
                    newState = this.defaultActions[state];
                } else {
                    // The single `==` condition below covers both these `===` comparisons in a single
                    // operation:
                    //
                    //     if (symbol === null || typeof symbol === 'undefined') ...
                    if (!symbol) {
                        symbol = lex();
                        this.onNextSymbol?.(lexer, stack, sstack, sp, symbol);
                    }
                    // read action for current state and first input
                    t = (table[state] && table[state][symbol]) || NO_ACTION;
                    newState = t[1];
                    action = t[0];
    
    
    
    
    
    
    
    
    
    
    
                    // handle parse error
                    if (!action) {
                        var errStr;
                        var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                        var expected = this.collect_expected_token_set(state);
    
                        // Report error
                        if (typeof lexer.yylineno === 'number') {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        } else {
                            errStr = 'Parse error: ';
                        }
                        if (typeof lexer.showPosition === 'function') {
                            errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }
                        // we cannot recover from the error!
                        p = this.constructParseErrorInfo(errStr, null, expected, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') {
                            retval = r;
                        }
                        break;
                    }
    
    
                }
    
    
    
    
    
    
    
    
    
    
                switch (action) {
                // catch misc. parse failures:
                default:
                    // this shouldn't happen, unless resolve defaults are off
                    if (action instanceof Array) {
                        p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') {
                            retval = r;
                        }
                        break;
                    }
                    // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                    // or a buggy LUT (LookUp Table):
                    p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
    
                // shift:
                case 1:
                    stack[sp] = symbol;
                    vstack[sp] = lexer.yytext;
                    lstack[sp] = copy_yylloc(lexer.yylloc);
                    sstack[sp] = newState; // push state
    
                    ++sp;
                    symbol = 0;
    
    
    
    
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:
    
    
    
                    yyloc = lexer.yylloc;
                    continue;
    
                // reduce:
                case 2:
    
    
    
                    this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                    yyrulelen = this_production[1];
    
    
    
    
    
    
    
    
    
    
                    r = this.performAction.call(yyval, yyloc, newState, sp - 1, yyrulelen, vstack, lstack, stack);
    
                    if (typeof r !== 'undefined') {
                        retval = r;
                        break;
                    }
    
                    // pop off stack
                    sp -= yyrulelen;
    
                    // don't overwrite the `symbol` variable: use a local var to speed things up:
                    var ntsymbol = this_production[0];    // push nonterminal (reduce)
                    stack[sp] = ntsymbol;
                    vstack[sp] = yyval.$;
                    lstack[sp] = yyval._$;
                    // goto new state = table[STATE][NONTERMINAL]
                    newState = table[sstack[sp - 1]][ntsymbol];
                    sstack[sp] = newState;
                    ++sp;
    
    
    
    
    
    
    
    
    
                    continue;
    
                // accept:
                case 3:
                    if (sp !== -2) {
                        retval = true;
                        // Return the `$accept` rule's `$$` result, if available.
                        //
                        // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                        // default, action):
                        //
                        //     $accept: <startSymbol> $end
                        //                  %{ $$ = $1; @$ = @1; %}
                        //
                        // which, combined with the parse kernel's `$accept` state behaviour coded below,
                        // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                        // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                        //
                        // In code:
                        //
                        //                  %{
                        //                      @$ = @1;            // if location tracking support is included
                        //                      if (typeof $1 !== 'undefined')
                        //                          return $1;
                        //                      else
                        //                          return true;           // the default parse result if the rule actions don't produce anything
                        //                  %}
                        sp--;
                        if (typeof vstack[sp] !== 'undefined') {
                            retval = vstack[sp];
                        }
                    }
                    break;
                }
    
                // break out of loop: we accept or fail with error
                break;
            }
        } catch (ex) {
            // report exceptions through the parseError callback too, but keep the exception intact
            // if it is a known parser or lexer error which has been thrown by parseError() already:
            if (ex instanceof this.JisonParserError) {
                throw ex;
            }
            else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
                throw ex;
            }
    
            p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
            retval = false;
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') {
                retval = r;
            }
        } finally {
            retval = this.cleanupAfterParse(retval, true, true);
            this.__reentrant_call_depth--;
        }   // /finally
    
        return retval;
    }
    };
    parser.originalParseError = parser.parseError;
    parser.originalQuoteName = parser.quoteName;
    /* lexer generated by jison-lex 0.6.1-215 */
    
    /*
     * Returns a Lexer object of the following structure:
     *
     *  Lexer: {
     *    yy: {}     The so-called "shared state" or rather the *source* of it;
     *               the real "shared state" `yy` passed around to
     *               the rule actions, etc. is a direct reference!
     *
     *               This "shared context" object was passed to the lexer by way of 
     *               the `lexer.setInput(str, yy)` API before you may use it.
     *
     *               This "shared context" object is passed to the lexer action code in `performAction()`
     *               so userland code in the lexer actions may communicate with the outside world 
     *               and/or other lexer rules' actions in more or less complex ways.
     *
     *  }
     *
     *  Lexer.prototype: {
     *    EOF: 1,
     *    ERROR: 2,
     *
     *    yy:        The overall "shared context" object reference.
     *
     *    JisonLexerError: function(msg, hash),
     *
     *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
     *
     *               The function parameters and `this` have the following value/meaning:
     *               - `this`    : reference to the `lexer` instance. 
     *                               `yy_` is an alias for `this` lexer instance reference used internally.
     *
     *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
     *                             by way of the `lexer.setInput(str, yy)` API before.
     *
     *                             Note:
     *                             The extra arguments you specified in the `%parse-param` statement in your
     *                             **parser** grammar definition file are passed to the lexer via this object
     *                             reference as member variables.
     *
     *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
     *
     *               - `YY_START`: the current lexer "start condition" state.
     *
     *    parseError: function(str, hash, ExceptionClass),
     *
     *    constructLexErrorInfo: function(error_message, is_recoverable),
     *               Helper function.
     *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
     *               See it's use in this lexer kernel in many places; example usage:
     *
     *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
     *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
     *
     *    options: { ... lexer %options ... },
     *
     *    lex: function(),
     *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
     *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
     *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
     *
     *               WARNING:
     *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
     *               any attributes already added to `yy` by the **parser** or the jison run-time; 
     *               when such a collision is detected an exception is thrown to prevent the generated run-time 
     *               from silently accepting this confusing and potentially hazardous situation! 
     *
     *    cleanupAfterLex: function(do_not_nuke_errorinfos),
     *               Helper function.
     *
     *               This helper API is invoked when the **parse process** has completed: it is the responsibility
     *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
     *
     *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
     *
     *    setInput: function(input, [yy]),
     *
     *
     *    input: function(),
     *
     *
     *    unput: function(str),
     *
     *
     *    more: function(),
     *
     *
     *    reject: function(),
     *
     *
     *    less: function(n),
     *
     *
     *    pastInput: function(n),
     *
     *
     *    upcomingInput: function(n),
     *
     *
     *    showPosition: function(),
     *
     *
     *    test_match: function(regex_match_array, rule_index),
     *
     *
     *    next: function(),
     *
     *
     *    begin: function(condition),
     *
     *
     *    pushState: function(condition),
     *
     *
     *    popState: function(),
     *
     *
     *    topState: function(),
     *
     *
     *    _currentRules: function(),
     *
     *
     *    stateStackSize: function(),
     *
     *
     *    performAction: function(yy, yy_, yyrulenumber, YY_START),
     *
     *
     *    rules: [...],
     *
     *
     *    conditions: {associative list: name ==> set},
     *  }
     *
     *
     *  token location info (`yylloc`): {
     *    first_line: n,
     *    last_line: n,
     *    first_column: n,
     *    last_column: n,
     *    range: [start_number, end_number]
     *               (where the numbers are indexes into the input string, zero-based)
     *  }
     *
     * ---
     *
     * The `parseError` function receives a 'hash' object with these members for lexer errors:
     *
     *  {
     *    text:        (matched text)
     *    token:       (the produced terminal token, if any)
     *    token_id:    (the produced terminal token numeric ID, if any)
     *    line:        (yylineno)
     *    loc:         (yylloc)
     *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
     *                  available for this particular error)
     *    yy:          (object: the current parser internal "shared state" `yy`
     *                  as is also available in the rule actions; this can be used,
     *                  for instance, for advanced error analysis and reporting)
     *    lexer:       (reference to the current lexer instance used by the parser)
     *  }
     *
     * while `this` will reference the current lexer instance.
     *
     * When `parseError` is invoked by the lexer, the default implementation will
     * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
     * it will try to invoke `yy.parseError()` instead. When that callback is also not
     * provided, a `JisonLexerError` exception will be thrown containing the error
     * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
     *
     * Note that the lexer's `JisonLexerError` error class is passed via the
     * `ExceptionClass` argument, which is invoked to construct the exception
     * instance to be thrown, so technically `parseError` will throw the object
     * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
     *
     * ---
     *
     * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
     * These options are available:
     *
     * (Options are permanent.)
     *  
     *  yy: {
     *      parseError: function(str, hash, ExceptionClass)
     *                 optional: overrides the default `parseError` function.
     *  }
     *
     *  lexer.options: {
     *      pre_lex:  function()
     *                 optional: is invoked before the lexer is invoked to produce another token.
     *                 `this` refers to the Lexer object.
     *      post_lex: function(token) { return token; }
     *                 optional: is invoked when the lexer has produced a token `token`;
     *                 this function can override the returned token value by returning another.
     *                 When it does not return any (truthy) value, the lexer will return
     *                 the original `token`.
     *                 `this` refers to the Lexer object.
     *
     * WARNING: the next set of options are not meant to be changed. They echo the abilities of
     * the lexer as per when it was compiled!
     *
     *      ranges: boolean
     *                 optional: `true` ==> token location info will include a .range[] member.
     *      flex: boolean
     *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
     *                 exhaustively to find the longest match.
     *      backtrack_lexer: boolean
     *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
     *                 the lexer terminates the scan when a token is returned by the action code.
     *      xregexp: boolean
     *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
     *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
     *                 rule regexes have been written as standard JavaScript RegExp expressions.
     *  }
     */
    
    
    var lexer = function() {
      /**
       * See also:
       * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
       * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
       * with userland code which might access the derived class in a 'classic' way.
       *
       * @public
       * @constructor
       * @nocollapse
       */
      function JisonLexerError(msg, hash) {
        Object.defineProperty(this, 'name', {
          enumerable: false,
          writable: false,
          value: 'JisonLexerError'
        });
    
        if (msg == null)
          msg = '???';
    
        Object.defineProperty(this, 'message', {
          enumerable: false,
          writable: true,
          value: msg
        });
    
        this.hash = hash;
        var stacktrace;
    
        if (hash && hash.exception instanceof Error) {
          var ex2 = hash.exception;
          this.message = ex2.message || msg;
          stacktrace = ex2.stack;
        }
    
        if (!stacktrace) {
          if (Error.hasOwnProperty('captureStackTrace')) {
            // V8
            Error.captureStackTrace(this, this.constructor);
          } else {
            stacktrace = new Error(msg).stack;
          }
        }
    
        if (stacktrace) {
          Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
          });
        }
      }
    
      if (typeof Object.setPrototypeOf === 'function') {
        Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
      } else {
        JisonLexerError.prototype = Object.create(Error.prototype);
      }
    
      JisonLexerError.prototype.constructor = JisonLexerError;
      JisonLexerError.prototype.name = 'JisonLexerError';
    
      var lexer = {
        
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   backtracking: .................... false
    //   location.ranges: ................. false
    //   location line+column tracking: ... true
    //
    //
    // Forwarded Parser Analysis flags:
    //
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses lexer values: ............... true / true
    //   location tracking: ............... true
    //   location assignment: ............. true
    //
    //
    // Lexer Analysis flags:
    //
    //   uses yyleng: ..................... ???
    //   uses yylineno: ................... ???
    //   uses yytext: ..................... ???
    //   uses yylloc: ..................... ???
    //   uses ParseError API: ............. ???
    //   uses yyerror: .................... ???
    //   uses location tracking & editing:  ???
    //   uses more() API: ................. ???
    //   uses unput() API: ................ ???
    //   uses reject() API: ............... ???
    //   uses less() API: ................. ???
    //   uses display APIs pastInput(), upcomingInput(), showPosition():
    //        ............................. ???
    //   uses describeYYLLOC() API: ....... ???
    //
    // --------- END OF REPORT -----------
    
    EOF: 1,
        ERROR: 2,
    
        // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator
    
        // options: {},                             /// <-- injected by the code generator
    
        // yy: ...,                                 /// <-- injected by setInput()
    
        __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  
    
        __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
        __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
        done: false,                                /// INTERNAL USE ONLY  
        _backtrack: false,                          /// INTERNAL USE ONLY  
        _input: '',                                 /// INTERNAL USE ONLY  
        _more: false,                               /// INTERNAL USE ONLY  
        _signaled_error_token: false,               /// INTERNAL USE ONLY  
        conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
        match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
        matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
        matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
        yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
        offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
        yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
        yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
        yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  
    
        /**
         * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
         * 
         * @public
         * @this {RegExpLexer}
         */
        constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
          msg = '' + msg;
    
          // heuristic to determine if the error message already contains a (partial) source code dump
          // as produced by either `showPosition()` or `prettyPrintRange()`:
          if (show_input_position == undefined) {
            show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
          }
    
          if (this.yylloc && show_input_position) {
            if (typeof this.prettyPrintRange === 'function') {
              var pretty_src = this.prettyPrintRange(this.yylloc);
    
              if (!/\n\s*$/.test(msg)) {
                msg += '\n';
              }
    
              msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
            } else if (typeof this.showPosition === 'function') {
              var pos_str = this.showPosition();
    
              if (pos_str) {
                if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
                  msg += '\n' + pos_str;
                } else {
                  msg += pos_str;
                }
              }
            }
          }
    
          /** @constructor */
          var pei = {
            errStr: msg,
            recoverable: !!recoverable,
            text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
            token: null,
            line: this.yylineno,
            loc: this.yylloc,
            yy: this.yy,
            lexer: this,
    
            /**
             * and make sure the error info doesn't stay due to potential
             * ref cycle via userland code manipulations.
             * These would otherwise all be memory leak opportunities!
             * 
             * Note that only array and object references are nuked as those
             * constitute the set of elements which can produce a cyclic ref.
             * The rest of the members is kept intact as they are harmless.
             * 
             * @public
             * @this {LexErrorInfo}
             */
            destroy: function destructLexErrorInfo() {
              // remove cyclic references added to error info:
              // info.yy = null;
              // info.lexer = null;
              // ...
              var rec = !!this.recoverable;
    
              for (var key in this) {
                if (this.hasOwnProperty(key) && typeof key === 'object') {
                  this[key] = undefined;
                }
              }
    
              this.recoverable = rec;
            }
          };
    
          // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
          this.__error_infos.push(pei);
    
          return pei;
        },
    
        /**
         * handler which is invoked when a lexer error occurs.
         * 
         * @public
         * @this {RegExpLexer}
         */
        parseError: function lexer_parseError(str, hash, ExceptionClass) {
          if (!ExceptionClass) {
            ExceptionClass = this.JisonLexerError;
          }
    
          if (this.yy) {
            if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
              return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
            } else if (typeof this.yy.parseError === 'function') {
              return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
            }
          }
    
          throw new ExceptionClass(str, hash);
        },
    
        /**
         * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
         * 
         * @public
         * @this {RegExpLexer}
         */
        yyerror: function yyError(str /*, ...args */) {
          var lineno_msg = '';
    
          if (this.yylloc) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }
    
          var p = this.constructLexErrorInfo(
            'Lexical error' + lineno_msg + ': ' + str,
            this.options.lexerErrorsAreRecoverable
          );
    
          // Add any extra args to the hash under the name `extra_error_attributes`:
          var args = Array.prototype.slice.call(arguments, 1);
    
          if (args.length) {
            p.extra_error_attributes = args;
          }
    
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        },
    
        /**
         * final cleanup function for when we have completed lexing the input;
         * make it an API so that external code can use this one once userland
         * code has decided it's time to destroy any lingering lexer error
         * hash object instances and the like: this function helps to clean
         * up these constructs, which *may* carry cyclic references which would
         * otherwise prevent the instances from being properly and timely
         * garbage-collected, i.e. this function helps prevent memory leaks!
         * 
         * @public
         * @this {RegExpLexer}
         */
        cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
          // prevent lingering circular references from causing memory leaks:
          this.setInput('', {});
    
          // nuke the error hash info instances created during this run.
          // Userland code must COPY any data/references
          // in the error hash instance(s) it is more permanently interested in.
          if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
              var el = this.__error_infos[i];
    
              if (el && typeof el.destroy === 'function') {
                el.destroy();
              }
            }
    
            this.__error_infos.length = 0;
          }
    
          return this;
        },
    
        /**
         * clear the lexer token context; intended for internal use only
         * 
         * @public
         * @this {RegExpLexer}
         */
        clear: function lexer_clear() {
          this.yytext = '';
          this.yyleng = 0;
          this.match = '';
    
          // - DO NOT reset `this.matched`
          this.matches = false;
    
          this._more = false;
          this._backtrack = false;
          var col = (this.yylloc ? this.yylloc.last_column : 0);
    
          this.yylloc = {
            first_line: this.yylineno + 1,
            first_column: col,
            last_line: this.yylineno + 1,
            last_column: col,
            range: [this.offset, this.offset]
          };
        },
    
        /**
         * resets the lexer, sets new input
         * 
         * @public
         * @this {RegExpLexer}
         */
        setInput: function lexer_setInput(input, yy) {
          this.yy = yy || this.yy || {};
    
          // also check if we've fully initialized the lexer instance,
          // including expansion work to be done to go from a loaded
          // lexer to a usable lexer:
          if (!this.__decompressed) {
            // step 1: decompress the regex list:
            var rules = this.rules;
    
            for (var i = 0, len = rules.length; i < len; i++) {
              var rule_re = rules[i];
    
              // compression: is the RE an xref to another RE slot in the rules[] table?
              if (typeof rule_re === 'number') {
                rules[i] = rules[rule_re];
              }
            }
    
            // step 2: unfold the conditions[] set to make these ready for use:
            var conditions = this.conditions;
    
            for (var k in conditions) {
              var spec = conditions[k];
              var rule_ids = spec.rules;
              var len = rule_ids.length;
              var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
              var rule_new_ids = new Array(len + 1);
    
              for (var i = 0; i < len; i++) {
                var idx = rule_ids[i];
                var rule_re = rules[idx];
                rule_regexes[i + 1] = rule_re;
                rule_new_ids[i + 1] = idx;
              }
    
              spec.rules = rule_new_ids;
              spec.__rule_regexes = rule_regexes;
              spec.__rule_count = len;
            }
    
            this.__decompressed = true;
          }
    
          this._input = input || '';
          this.clear();
          this._signaled_error_token = false;
          this.done = false;
          this.yylineno = 0;
          this.matched = '';
          this.conditionStack = ['INITIAL'];
          this.__currentRuleSet__ = null;
    
          this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [0, 0]
          };
    
          this.offset = 0;
          return this;
        },
    
        /**
         * edit the remaining input via user-specified callback.
         * This can be used to forward-adjust the input-to-parse, 
         * e.g. inserting macro expansions and alike in the
         * input which has yet to be lexed.
         * The behaviour of this API contrasts the `unput()` et al
         * APIs as those act on the *consumed* input, while this
         * one allows one to manipulate the future, without impacting
         * the current `yyloc` cursor location or any history. 
         * 
         * Use this API to help implement C-preprocessor-like
         * `#include` statements, etc.
         * 
         * The provided callback must be synchronous and is
         * expected to return the edited input (string).
         *
         * The `cpsArg` argument value is passed to the callback
         * as-is.
         *
         * `callback` interface: 
         * `function callback(input, cpsArg)`
         * 
         * - `input` will carry the remaining-input-to-lex string
         *   from the lexer.
         * - `cpsArg` is `cpsArg` passed into this API.
         * 
         * The `this` reference for the callback will be set to
         * reference this lexer instance so that userland code
         * in the callback can easily and quickly access any lexer
         * API. 
         *
         * When the callback returns a non-string-type falsey value,
         * we assume the callback did not edit the input and we
         * will using the input as-is.
         *
         * When the callback returns a non-string-type value, it
         * is converted to a string for lexing via the `"" + retval`
         * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
         * -- that way any returned object's `toValue()` and `toString()`
         * methods will be invoked in a proper/desirable order.)
         * 
         * @public
         * @this {RegExpLexer}
         */
        editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
          var rv = callback.call(this, this._input, cpsArg);
    
          if (typeof rv !== 'string') {
            if (rv) {
              this._input = '' + rv;
            } 
            // else: keep `this._input` as is.  
          } else {
            this._input = rv;
          }
    
          return this;
        },
    
        /**
         * consumes and returns one char from the input
         * 
         * @public
         * @this {RegExpLexer}
         */
        input: function lexer_input() {
          if (!this._input) {
            //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
          }
    
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
    
          // Count the linenumber up when we hit the LF (or a stand-alone CR).
          // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
          // and we advance immediately past the LF as well, returning both together as if
          // it was all a single 'character' only.
          var slice_len = 1;
    
          var lines = false;
    
          if (ch === '\n') {
            lines = true;
          } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
    
            if (ch2 === '\n') {
              slice_len++;
              ch += ch2;
              this.yytext += ch2;
              this.yyleng++;
              this.offset++;
              this.match += ch2;
              this.matched += ch2;
              this.yylloc.range[1]++;
            }
          }
    
          if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
            this.yylloc.last_column = 0;
          } else {
            this.yylloc.last_column++;
          }
    
          this.yylloc.range[1]++;
          this._input = this._input.slice(slice_len);
          return ch;
        },
    
        /**
         * unshifts one char (or an entire string) into the input
         * 
         * @public
         * @this {RegExpLexer}
         */
        unput: function lexer_unput(ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);
          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len);
          this.yyleng = this.yytext.length;
          this.offset -= len;
          this.match = this.match.substr(0, this.match.length - len);
          this.matched = this.matched.substr(0, this.matched.length - len);
    
          if (lines.length > 1) {
            this.yylineno -= lines.length - 1;
            this.yylloc.last_line = this.yylineno + 1;
    
            // Get last entirely matched line into the `pre_lines[]` array's
            // last index slot; we don't mind when other previously 
            // matched lines end up in the array too. 
            var pre = this.match;
    
            var pre_lines = pre.split(/(?:\r\n?|\n)/g);
    
            if (pre_lines.length === 1) {
              pre = this.matched;
              pre_lines = pre.split(/(?:\r\n?|\n)/g);
            }
    
            this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
          } else {
            this.yylloc.last_column -= len;
          }
    
          this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
          this.done = false;
          return this;
        },
    
        /**
         * cache matched text and append it on next action
         * 
         * @public
         * @this {RegExpLexer}
         */
        more: function lexer_more() {
          this._more = true;
          return this;
        },
    
        /**
         * signal the lexer that this rule fails to match the input, so the
         * next matching rule (regex) should be tested instead.
         * 
         * @public
         * @this {RegExpLexer}
         */
        reject: function lexer_reject() {
          if (this.options.backtrack_lexer) {
            this._backtrack = true;
          } else {
            // when the `parseError()` call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // `.lex()` run.
            var lineno_msg = '';
    
            if (this.yylloc) {
              lineno_msg = ' on line ' + (this.yylineno + 1);
            }
    
            var p = this.constructLexErrorInfo(
              'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
              false
            );
    
            this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
          }
    
          return this;
        },
    
        /**
         * retain first n characters of the match
         * 
         * @public
         * @this {RegExpLexer}
         */
        less: function lexer_less(n) {
          return this.unput(this.match.slice(n));
        },
    
        /**
         * return (part of the) already matched input, i.e. for error
         * messages.
         * 
         * Limit the returned string length to `maxSize` (default: 20).
         * 
         * Limit the returned string to the `maxLines` number of lines of
         * input (default: 1).
         * 
         * Negative limit values equal *unlimited*.
         * 
         * @public
         * @this {RegExpLexer}
         */
        pastInput: function lexer_pastInput(maxSize, maxLines) {
          var past = this.matched.substring(0, this.matched.length - this.match.length);
    
          if (maxSize < 0)
            maxSize = past.length;
          else if (!maxSize)
            maxSize = 20;
    
          if (maxLines < 0)
            maxLines = past.length;          // can't ever have more input lines than this! 
          else if (!maxLines)
            maxLines = 1;
    
          // `substr` anticipation: treat \r\n as a single character and take a little
          // more than necessary so that we can still properly check against maxSize
          // after we've transformed and limited the newLines in here:
          past = past.substr(-maxSize * 2 - 2);
    
          // now that we have a significantly reduced string to process, transform the newlines
          // and chop them, then limit them:
          var a = past.replace(/\r\n|\r/g, '\n').split('\n');
    
          a = a.slice(-maxLines);
          past = a.join('\n');
    
          // When, after limiting to maxLines, we still have too much to return,
          // do add an ellipsis prefix...
          if (past.length > maxSize) {
            past = '...' + past.substr(-maxSize);
          }
    
          return past;
        },
    
        /**
         * return (part of the) upcoming input, i.e. for error messages.
         * 
         * Limit the returned string length to `maxSize` (default: 20).
         * 
         * Limit the returned string to the `maxLines` number of lines of input (default: 1).
         * 
         * Negative limit values equal *unlimited*.
         *
         * > ### NOTE ###
         * >
         * > *"upcoming input"* is defined as the whole of the both
         * > the *currently lexed* input, together with any remaining input
         * > following that. *"currently lexed"* input is the input 
         * > already recognized by the lexer but not yet returned with
         * > the lexer token. This happens when you are invoking this API
         * > from inside any lexer rule action code block. 
         * >
         * 
         * @public
         * @this {RegExpLexer}
         */
        upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
          var next = this.match;
    
          if (maxSize < 0)
            maxSize = next.length + this._input.length;
          else if (!maxSize)
            maxSize = 20;
    
          if (maxLines < 0)
            maxLines = maxSize;          // can't ever have more input lines than this! 
          else if (!maxLines)
            maxLines = 1;
    
          // `substring` anticipation: treat \r\n as a single character and take a little
          // more than necessary so that we can still properly check against maxSize
          // after we've transformed and limited the newLines in here:
          if (next.length < maxSize * 2 + 2) {
            next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
          }
    
          // now that we have a significantly reduced string to process, transform the newlines
          // and chop them, then limit them:
          var a = next.replace(/\r\n|\r/g, '\n').split('\n');
    
          a = a.slice(0, maxLines);
          next = a.join('\n');
    
          // When, after limiting to maxLines, we still have too much to return,
          // do add an ellipsis postfix...
          if (next.length > maxSize) {
            next = next.substring(0, maxSize) + '...';
          }
    
          return next;
        },
    
        /**
         * return a string which displays the character position where the
         * lexing error occurred, i.e. for error messages
         * 
         * @public
         * @this {RegExpLexer}
         */
        showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
          var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
          var c = new Array(pre.length + 1).join('-');
          return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
        },
    
        /**
         * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
         * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
         * it MAY be NULL) and you MUST have a valid location info object anyway:
         * then we take the given context of the `preceding` and `following` locations, IFF those are available,
         * and reconstruct the `actual` location info from those.
         * If this fails, the heuristic is to take the `current` location, IFF available.
         * If this fails as well, we assume the sought location is at/around the current lexer position
         * and then produce that one as a response. DO NOTE that these heuristic/derived location info
         * values MAY be inaccurate!
         *
         * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
         * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
         * 
         * @public
         * @this {RegExpLexer}
         */
        deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
          var loc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [0, 0]
          };
    
          if (actual) {
            loc.first_line = actual.first_line | 0;
            loc.last_line = actual.last_line | 0;
            loc.first_column = actual.first_column | 0;
            loc.last_column = actual.last_column | 0;
    
            if (actual.range) {
              loc.range[0] = actual.range[0] | 0;
              loc.range[1] = actual.range[1] | 0;
            }
          }
    
          if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
            // plan B: heuristic using preceding and following:
            if (loc.first_line <= 0 && preceding) {
              loc.first_line = preceding.last_line | 0;
              loc.first_column = preceding.last_column | 0;
    
              if (preceding.range) {
                loc.range[0] = actual.range[1] | 0;
              }
            }
    
            if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
              loc.last_line = following.first_line | 0;
              loc.last_column = following.first_column | 0;
    
              if (following.range) {
                loc.range[1] = actual.range[0] | 0;
              }
            }
    
            // plan C?: see if the 'current' location is useful/sane too:
            if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
              loc.first_line = current.first_line | 0;
              loc.first_column = current.first_column | 0;
    
              if (current.range) {
                loc.range[0] = current.range[0] | 0;
              }
            }
    
            if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
              loc.last_line = current.last_line | 0;
              loc.last_column = current.last_column | 0;
    
              if (current.range) {
                loc.range[1] = current.range[1] | 0;
              }
            }
          }
    
          // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
          // or plan D heuristics to produce a 'sensible' last_line value:
          if (loc.last_line <= 0) {
            if (loc.first_line <= 0) {
              loc.first_line = this.yylloc.first_line;
              loc.last_line = this.yylloc.last_line;
              loc.first_column = this.yylloc.first_column;
              loc.last_column = this.yylloc.last_column;
              loc.range[0] = this.yylloc.range[0];
              loc.range[1] = this.yylloc.range[1];
            } else {
              loc.last_line = this.yylloc.last_line;
              loc.last_column = this.yylloc.last_column;
              loc.range[1] = this.yylloc.range[1];
            }
          }
    
          if (loc.first_line <= 0) {
            loc.first_line = loc.last_line;
            loc.first_column = 0;  // loc.last_column; 
            loc.range[1] = loc.range[0];
          }
    
          if (loc.first_column < 0) {
            loc.first_column = 0;
          }
    
          if (loc.last_column < 0) {
            loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
          }
    
          return loc;
        },
    
        /**
         * return a string which displays the lines & columns of input which are referenced 
         * by the given location info range, plus a few lines of context.
         * 
         * This function pretty-prints the indicated section of the input, with line numbers 
         * and everything!
         * 
         * This function is very useful to provide highly readable error reports, while
         * the location range may be specified in various flexible ways:
         * 
         * - `loc` is the location info object which references the area which should be
         *   displayed and 'marked up': these lines & columns of text are marked up by `^`
         *   characters below each character in the entire input range.
         * 
         * - `context_loc` is the *optional* location info object which instructs this
         *   pretty-printer how much *leading* context should be displayed alongside
         *   the area referenced by `loc`. This can help provide context for the displayed
         *   error, etc.
         * 
         *   When this location info is not provided, a default context of 3 lines is
         *   used.
         * 
         * - `context_loc2` is another *optional* location info object, which serves
         *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
         *   context lines to display in the pretty-print output.
         * 
         *   When this location info is not provided, a default context of 1 line only is
         *   used.
         * 
         * Special Notes:
         * 
         * - when the `loc`-indicated range is very large (about 5 lines or more), then
         *   only the first and last few lines of this block are printed while a
         *   `...continued...` message will be printed between them.
         * 
         *   This serves the purpose of not printing a huge amount of text when the `loc`
         *   range happens to be huge: this way a manageable & readable output results
         *   for arbitrary large ranges.
         * 
         * - this function can display lines of input which whave not yet been lexed.
         *   `prettyPrintRange()` can access the entire input!
         * 
         * @public
         * @this {RegExpLexer}
         */
        prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
          loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
          const CONTEXT = 3;
          const CONTEXT_TAIL = 1;
          const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
          var input = this.matched + this._input;
          var lines = input.split('\n');
          var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
          var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
          var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
          var ws_prefix = new Array(lineno_display_width).join(' ');
          var nonempty_line_indexes = [];
    
          var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
            var lno = index + l0;
            var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
            var rv = lno_pfx + ': ' + line;
            var errpfx = new Array(lineno_display_width + 1).join('^');
            var offset = 2 + 1;
            var len = 0;
    
            if (lno === loc.first_line) {
              offset += loc.first_column;
    
              len = Math.max(
                2,
                ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
              );
            } else if (lno === loc.last_line) {
              len = Math.max(2, loc.last_column + 1);
            } else if (lno > loc.first_line && lno < loc.last_line) {
              len = Math.max(2, line.length + 1);
            }
    
            if (len) {
              var lead = new Array(offset).join('.');
              var mark = new Array(len).join('^');
              rv += '\n' + errpfx + lead + mark;
    
              if (line.trim().length > 0) {
                nonempty_line_indexes.push(index);
              }
            }
    
            rv = rv.replace(/\t/g, ' ');
            return rv;
          });
    
          // now make sure we don't print an overly large amount of error area: limit it 
          // to the top and bottom line count:
          if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
            var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
            var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
            var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
            intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
            rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
          }
    
          return rv.join('\n');
        },
    
        /**
         * helper function, used to produce a human readable description as a string, given
         * the input `yylloc` location object.
         * 
         * Set `display_range_too` to TRUE to include the string character index position(s)
         * in the description if the `yylloc.range` is available.
         * 
         * @public
         * @this {RegExpLexer}
         */
        describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
          var l1 = yylloc.first_line;
          var l2 = yylloc.last_line;
          var c1 = yylloc.first_column;
          var c2 = yylloc.last_column;
          var dl = l2 - l1;
          var dc = c2 - c1;
          var rv;
    
          if (dl === 0) {
            rv = 'line ' + l1 + ', ';
    
            if (dc <= 1) {
              rv += 'column ' + c1;
            } else {
              rv += 'columns ' + c1 + ' .. ' + c2;
            }
          } else {
            rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
          }
    
          if (yylloc.range && display_range_too) {
            var r1 = yylloc.range[0];
            var r2 = yylloc.range[1] - 1;
    
            if (r2 <= r1) {
              rv += ' {String Offset: ' + r1 + '}';
            } else {
              rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
          }
    
          return rv;
        },
    
        /**
         * test the lexed token: return FALSE when not a match, otherwise return token.
         * 
         * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
         * contains the actually matched text string.
         * 
         * Also move the input cursor forward and update the match collectors:
         * 
         * - `yytext`
         * - `yyleng`
         * - `match`
         * - `matches`
         * - `yylloc`
         * - `offset`
         * 
         * @public
         * @this {RegExpLexer}
         */
        test_match: function lexer_test_match(match, indexed_rule) {
          var token, lines, backup, match_str, match_str_len;
    
          if (this.options.backtrack_lexer) {
            // save context
            backup = {
              yylineno: this.yylineno,
    
              yylloc: {
                first_line: this.yylloc.first_line,
                last_line: this.yylloc.last_line,
                first_column: this.yylloc.first_column,
                last_column: this.yylloc.last_column,
                range: this.yylloc.range.slice(0)
              },
    
              yytext: this.yytext,
              match: this.match,
              matches: this.matches,
              matched: this.matched,
              yyleng: this.yyleng,
              offset: this.offset,
              _more: this._more,
              _input: this._input,
    
              //_signaled_error_token: this._signaled_error_token,
              yy: this.yy,
    
              conditionStack: this.conditionStack.slice(0),
              done: this.done
            };
          }
    
          match_str = match[0];
          match_str_len = match_str.length;
    
          // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
          lines = match_str.split(/(?:\r\n?|\n)/g);
    
          if (lines.length > 1) {
            this.yylineno += lines.length - 1;
            this.yylloc.last_line = this.yylineno + 1;
            this.yylloc.last_column = lines[lines.length - 1].length;
          } else {
            this.yylloc.last_column += match_str_len;
          }
    
          // }
          this.yytext += match_str;
    
          this.match += match_str;
          this.matched += match_str;
          this.matches = match;
          this.yyleng = this.yytext.length;
          this.yylloc.range[1] += match_str_len;
    
          // previous lex rules MAY have invoked the `more()` API rather than producing a token:
          // those rules will already have moved this `offset` forward matching their match lengths,
          // hence we must only add our own match length now:
          this.offset += match_str_len;
    
          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match_str_len);
    
          // calling this method:
          //
          //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
          token = this.performAction.call(
            this,
            this.yy,
            indexed_rule,
            this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
          );
    
          // otherwise, when the action codes are all simple return token statements:
          //token = this.simpleCaseActionClusters[indexed_rule];
    
          if (this.done && this._input) {
            this.done = false;
          }
    
          if (token) {
            return token;
          } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
              this[k] = backup[k];
            }
    
            this.__currentRuleSet__ = null;
            return false;  // rule action called reject() implying the next rule should be tested instead. 
          } else if (this._signaled_error_token) {
            // produce one 'error' token as `.parseError()` in `reject()`
            // did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
    
            this._signaled_error_token = false;
            return token;
          }
    
          return false;
        },
    
        /**
         * return next match in input
         * 
         * @public
         * @this {RegExpLexer}
         */
        next: function lexer_next() {
          if (this.done) {
            this.clear();
            return this.EOF;
          }
    
          if (!this._input) {
            this.done = true;
          }
    
          var token, match, tempMatch, index;
    
          if (!this._more) {
            this.clear();
          }
    
          var spec = this.__currentRuleSet__;
    
          if (!spec) {
            // Update the ruleset cache as we apparently encountered a state change or just started lexing.
            // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
            // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
            // speed up those activities a tiny bit.
            spec = this.__currentRuleSet__ = this._currentRules();
    
            // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
            // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
            if (!spec || !spec.rules) {
              var lineno_msg = '';
    
              if (this.options.trackPosition) {
                lineno_msg = ' on line ' + (this.yylineno + 1);
              }
    
              var p = this.constructLexErrorInfo(
                'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
                false
              );
    
              // produce one 'error' token until this situation has been resolved, most probably by parse termination!
              return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
            }
          }
    
          var rule_ids = spec.rules;
          var regexes = spec.__rule_regexes;
          var len = spec.__rule_count;
    
          // Note: the arrays are 1-based, while `len` itself is a valid index,
          // hence the non-standard less-or-equal check in the next loop condition!
          for (var i = 1; i <= len; i++) {
            tempMatch = this._input.match(regexes[i]);
    
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
              match = tempMatch;
              index = i;
    
              if (this.options.backtrack_lexer) {
                token = this.test_match(tempMatch, rule_ids[i]);
    
                if (token !== false) {
                  return token;
                } else if (this._backtrack) {
                  match = undefined;
                  continue;  // rule action called reject() implying a rule MISmatch. 
                } else {
                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                  return false;
                }
              } else if (!this.options.flex) {
                break;
              }
            }
          }
    
          if (match) {
            token = this.test_match(match, rule_ids[index]);
    
            if (token !== false) {
              return token;
            }
    
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
          }
    
          if (!this._input) {
            this.done = true;
            this.clear();
            return this.EOF;
          } else {
            var lineno_msg = '';
    
            if (this.options.trackPosition) {
              lineno_msg = ' on line ' + (this.yylineno + 1);
            }
    
            var p = this.constructLexErrorInfo(
              'Lexical error' + lineno_msg + ': Unrecognized text.',
              this.options.lexerErrorsAreRecoverable
            );
    
            var pendingInput = this._input;
            var activeCondition = this.topState();
            var conditionStackDepth = this.conditionStack.length;
            token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    
            if (token === this.ERROR) {
              // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
              // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
              // has not consumed/modified any pending input or changed state in the error handler:
              if (!this.matches && // and make sure the input has been modified/consumed ...
              pendingInput === this._input && // ...or the lexer state has been modified significantly enough
              // to merit a non-consuming error handling action right now.
              activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
                this.input();
              }
            }
    
            return token;
          }
        },
    
        /**
         * return next match that has a token
         * 
         * @public
         * @this {RegExpLexer}
         */
        lex: function lexer_lex() {
          var r;
    
          // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
          if (typeof this.pre_lex === 'function') {
            r = this.pre_lex.call(this, 0);
          }
    
          if (typeof this.options.pre_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.pre_lex.call(this, r) || r;
          }
    
          if (this.yy && typeof this.yy.pre_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.pre_lex.call(this, r) || r;
          }
    
          while (!r) {
            r = this.next();
          }
    
          if (this.yy && typeof this.yy.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.post_lex.call(this, r) || r;
          }
    
          if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
          }
    
          if (typeof this.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.post_lex.call(this, r) || r;
          }
    
          return r;
        },
    
        /**
         * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
         * `pre_lex()` nor any of the `post_lex()` callbacks.
         * 
         * @public
         * @this {RegExpLexer}
         */
        fastLex: function lexer_fastLex() {
          var r;
    
          while (!r) {
            r = this.next();
          }
    
          return r;
        },
    
        /**
         * return info about the lexer state that can help a parser or other lexer API user to use the
         * most efficient means available. This API is provided to aid run-time performance for larger
         * systems which employ this lexer.
         * 
         * @public
         * @this {RegExpLexer}
         */
        canIUse: function lexer_canIUse() {
          var rv = {
            fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
          };
    
          return rv;
        },
    
        /**
         * backwards compatible alias for `pushState()`;
         * the latter is symmetrical with `popState()` and we advise to use
         * those APIs in any modern lexer code, rather than `begin()`.
         * 
         * @public
         * @this {RegExpLexer}
         */
        begin: function lexer_begin(condition) {
          return this.pushState(condition);
        },
    
        /**
         * activates a new lexer condition state (pushes the new lexer
         * condition state onto the condition stack)
         * 
         * @public
         * @this {RegExpLexer}
         */
        pushState: function lexer_pushState(condition) {
          this.conditionStack.push(condition);
          this.__currentRuleSet__ = null;
          return this;
        },
    
        /**
         * pop the previously active lexer condition state off the condition
         * stack
         * 
         * @public
         * @this {RegExpLexer}
         */
        popState: function lexer_popState() {
          var n = this.conditionStack.length - 1;
    
          if (n > 0) {
            this.__currentRuleSet__ = null;
            return this.conditionStack.pop();
          } else {
            return this.conditionStack[0];
          }
        },
    
        /**
         * return the currently active lexer condition state; when an index
         * argument is provided it produces the N-th previous condition state,
         * if available
         * 
         * @public
         * @this {RegExpLexer}
         */
        topState: function lexer_topState(n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);
    
          if (n >= 0) {
            return this.conditionStack[n];
          } else {
            return 'INITIAL';
          }
        },
    
        /**
         * (internal) determine the lexer rule set which is active for the
         * currently active lexer condition state
         * 
         * @public
         * @this {RegExpLexer}
         */
        _currentRules: function lexer__currentRules() {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
          } else {
            return this.conditions['INITIAL'];
          }
        },
    
        /**
         * return the number of states currently on the stack
         * 
         * @public
         * @this {RegExpLexer}
         */
        stateStackSize: function lexer_stateStackSize() {
          return this.conditionStack.length;
        },
    
        options: {
          flex: true,
          trackPosition: true,
          caseInsensitive: true
        },
    
        JisonLexerError: JisonLexerError,
    
        performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
          var yy_ = this;
          var YYSTATE = YY_START;
    
          switch (yyrulenumber) {
          case 131:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       FOR */
            this.begin('in_range_operator');
    
            return 60;
            break;
    
          case 195:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       RANGE */
            this.begin('in_range_operator');
    
            return 26;
            break;
    
          case 258:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       BINARY */
            {
              return 183;
            }
    
            /* OB PL Reserved Words start... */
            break;
    
          case 268:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       FORALL */
            this.begin('in_range_operator');
    
            return 99;
            break;
    
          case 290:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       \.\. */
            this.begin('INITIAL');
    
            return 98;
            break;
    
          case 308:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       {c_cmt_begin}[\s\S]*?{c_cmt_end} */
            /* skip comment */
            break;
    
          case 309:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       {comment} */
            /* skip comment */
            break;
    
          case 312:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       [-+&~|^/%*(),;.:!] */
            return yy_.yytext[0];
    
            break;
    
          case 313:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       [ \t\r\n] */
            /* skip comment */
            break;
    
          case 314:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       --[ \t].* */
            /* skip comment */
            break;
    
          case 316:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       . */
            return yy_.yytext[0];
    
            break;
    
          case 317:
            /*! Conditions:: in_range_operator INITIAL */
            /*! Rule::       . */
            console.log('', yy_.yytext);
    
            /* `flex` lexing mode: the last resort rule! */
            break;
    
          default:
            return this.simpleCaseActionClusters[yyrulenumber];
          }
        },
    
        simpleCaseActionClusters: {
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ZONE */
          0: 144,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARIABLE */
          1: 223,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARRAY */
          2: 135,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARYING */
          3: 137,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WNDS */
          4: 216,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WNPS */
          5: 218,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       YEAR */
          6: 150,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       YES */
          7: 227,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       UNDER */
          8: 205,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       USING */
          9: 56,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VALIDATE */
          10: 226,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TRUST */
          11: 214,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TIME */
          12: 143,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SQLDATA */
          13: 208,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SETTINGS */
          14: 47,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SPECIFICATION */
          15: 45,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RNDS */
          16: 215,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RNPS */
          17: 217,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SAVE */
          18: 101,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RELIES_ON */
          19: 34,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RESULT */
          20: 222,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RESULT_CACHE */
          21: 35,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PARALLEL_ENABLE */
          22: 32,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PIPELINED */
          23: 36,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NAME */
          24: 206,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NONEDITIONABLE */
          25: 43,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OBJECT */
          26: 204,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OID */
          27: 203,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ORADATA */
          28: 210,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LOCAL */
          29: 145,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LONG */
          30: 133,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LIMIT */
          31: 192,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       JAVA */
          32: 207,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INLINE */
          33: 115,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       IMMEDIATE */
          34: 195,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       HASH */
          35: 25,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FORCE */
          36: 202,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXECUTE */
          37: 194,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EDITIONABLE */
          38: 42,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DETERMINISTIC */
          39: 24,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEFINER */
          40: 16,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CUSTOMDATUM */
          41: 209,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ACCESSIBLE */
          42: 22,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ABORT */
          43: 'ABORT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ACCEPT */
          44: 'ACCEPT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ACCESS */
          45: 'ACCESS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ADD */
          46: 'ADD',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AUTHID */
          47: 14,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ALL */
          48: 'ALL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ALTER */
          49: 40,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AND */
          50: 104,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ANY */
          51: 30,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ARRAY */
          52: 136,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ARRAYLEN */
          53: 'ARRAYLEN',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AS */
          54: 53,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ASC */
          55: 'ASC',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ASSERT */
          56: 'ASSERT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ASSIGN */
          57: 'ASSIGN',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AT */
          58: 'AT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AUTHORIZATION */
          59: 'AUTHORIZATION',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       AVG */
          60: 'AVG',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BASE_TABLE */
          61: 'BASE_TABLE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BEGIN */
          62: 91,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BETWEEN */
          63: 103,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BINARY_INTEGER */
          64: 162,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BODY */
          65: 39,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BOOLEAN */
          66: 160,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BYTE */
          67: 182,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BY */
          68: 23,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BULK */
          69: 190,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BINARY_DOUBLE */
          70: 176,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BINARY_FLOAT */
          71: 177,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SIMPLE_DOUBLE */
          72: 178,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SIMPLE_FLOAT */
          73: 179,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       C */
          74: 8,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CALL */
          75: 228,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CASE */
          76: 87,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CHAR */
          77: 146,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CHAR_BASE */
          78: 'CHAR_BASE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CHARSET */
          79: 184,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CHECK */
          80: 'CHECK',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CLOSE */
          81: 193,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CLUSTER */
          82: 29,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COLLATE */
          83: 186,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COLLECT */
          84: 191,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COMPILE */
          85: 41,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CLUSTERS */
          86: 'CLUSTERS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COLAUTH */
          87: 'COLAUTH',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COLUMNS */
          88: 'COLUMNS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COMMIT */
          89: 200,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COMPRESS */
          90: 'COMPRESS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CONNECT */
          91: 'CONNECT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CONSTANT */
          92: 93,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       COUNT */
          93: 'COUNT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CURRENT_USER */
          94: 15,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CRASH */
          95: 'CRASH',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CREATE */
          96: 37,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CURRENT */
          97: 'CURRENT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CURRVAL */
          98: 'CURRVAL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CURSOR */
          99: 94,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DATABASE */
          100: 'DATABASE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DATA_BASE */
          101: 'DATA_BASE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DATE */
          102: 180,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DBA */
          103: 'DBA',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEBUGOFF */
          104: 'DEBUGOFF',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEBUGON */
          105: 'DEBUGON',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DECIMAL */
          106: 138,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DECLARE */
          107: 90,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEFAULT */
          108: 57,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEFINITION */
          109: 'DEFINITION',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DELAY */
          110: 'DELAY',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DELETE */
          111: 49,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DELTA */
          112: 'DELTA',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DESC */
          113: 'DESC',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DIGITS */
          114: 'DIGITS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DISPOSE */
          115: 'DISPOSE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DISTINCT */
          116: 'DISTINCT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DO */
          117: 'DO',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DROP */
          118: 48,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ELSE */
          119: 89,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ELSIF */
          120: 88,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       END */
          121: 38,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ENTRY */
          122: 'ENTRY',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXCEPTION */
          123: 92,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXCEPTIONS */
          124: 102,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXCEPTION_INIT */
          125: 117,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXISTS */
          126: 125,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXIT */
          127: 111,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FALSE */
          128: 'FALSE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FETCH */
          129: 188,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FLOAT */
          130: 139,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FORM */
          132: 'FORM',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FROM */
          133: 'FROM',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FUNCTION */
          134: 17,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       GENERIC */
          135: 'GENERIC',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       GOTO */
          136: 109,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       GRANT */
          137: 'GRANT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       GROUP */
          138: 'GROUP',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       HAVING */
          139: 'HAVING',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       IDENTIFIED */
          140: 'IDENTIFIED',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       IF */
          141: 85,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       IN */
          142: 79,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INDEX */
          143: 130,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INDEXES */
          144: 'INDEXES',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INDICATOR */
          145: 'INDICATOR',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INSERT */
          146: 64,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INTEGER */
          147: 171,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INTERFACE */
          148: 121,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INTERSECT */
          149: 'INTERSECT',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INTERVAL */
          150: 149,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INTO */
          151: 189,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       IS */
          152: 52,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LEVEL */
          153: 'LEVEL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LIKE */
          154: 'LIKE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LIMITED */
          155: 'LIMITED',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LOOP */
          156: 96,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MAX */
          157: 'MAX',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MIN */
          158: 'MIN',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MINUS */
          159: 'MINUS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MLSLABEL */
          160: 'MLSLABEL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MOD */
          161: 'MOD',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MODE */
          162: 'MODE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NATURAL */
          163: 163,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NCHAR */
          164: 147,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NVARCHAR */
          165: 174,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NVARCHAR2 */
          166: 175,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NEW */
          167: 69,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NEXTVAL */
          168: 'NEXTVAL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NOCOMPRESS */
          169: 'NOCOMPRESS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NO */
          170: 229,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NOT */
          171: 134,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NULL */
          172: 112,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NUMBER */
          173: 138,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NUMBER_BASE */
          174: 'NUMBER_BASE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OF */
          175: 66,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OLD */
          176: 68,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ON */
          177: 63,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OPEN */
          178: 187,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OPTION */
          179: 'OPTION',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OR */
          180: 50,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ORDER */
          181: 28,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OTHERS */
          182: 124,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OUT */
          183: 80,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PACKAGE */
          184: 19,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PARENT */
          185: 70,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PARTITION */
          186: 33,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PCTFREE */
          187: 'PCTFREE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       POSITIVE */
          188: 165,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PRAGMA */
          189: 114,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PRIOR */
          190: 'PRIOR',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PRIVATE */
          191: 'PRIVATE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PROCEDURE */
          192: 18,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PUBLIC */
          193: 'PUBLIC',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RAISE */
          194: 196,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REPLACE */
          196: 51,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REAL */
          197: 140,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RECORD */
          198: 128,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REFERENCING */
          199: 67,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REF */
          200: 127,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RELEASE */
          201: 'RELEASE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REMR */
          202: 'REMR',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RENAME */
          203: 'RENAME',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RESOURCE */
          204: 'RESOURCE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RETURN */
          205: 54,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REVERSE */
          206: 100,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REVOKE */
          207: 'REVOKE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ROLLBACK */
          208: 201,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ROWID */
          209: 158,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ROWLABEL */
          210: 'ROWLABEL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ROWNUM */
          211: 'ROWNUM',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ROWTYPE */
          212: 95,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RUN */
          213: 'RUN',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SAVEPOINT */
          214: 199,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SCHEMA */
          215: 'SCHEMA',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SELECT */
          216: 198,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SEPARATE */
          217: 'SEPARATE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SET */
          218: 185,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SIZE */
          219: 'SIZE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SMALLINT */
          220: 169,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SPACE */
          221: 'SPACE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SQL */
          222: 'SQL',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SQLCODE */
          223: 'SQLCODE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SQLERRM */
          224: 'SQLERRM',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       START */
          225: 'START',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       STATEMENT */
          226: 77,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       STDDEV */
          227: 'STDDEV',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SUBTYPE */
          228: 126,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SUM */
          229: 'SUM',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TABAUTH */
          230: 'TABAUTH',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TABLE */
          231: 129,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TABLES */
          232: 'TABLES',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TASK */
          233: 'TASK',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TERMINATE */
          234: 'TERMINATE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       THEN */
          235: 86,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TO */
          236: 151,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TRIGGER */
          237: 20,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TRUE */
          238: 'TRUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TYPE */
          239: 21,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       UNION */
          240: 'UNION',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       UNIQUE */
          241: 'UNIQUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       UPDATE */
          242: 65,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       USE */
          243: 'USE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       USING_NLS_COMP */
          244: 59,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VALUES */
          245: 106,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VALUE */
          246: 31,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARCHAR */
          247: 131,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARCHAR2 */
          248: 131,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VARIANCE */
          249: 'VARIANCE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VIEW */
          250: 'VIEW',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       VIEWS */
          251: 'VIEWS',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WHEN */
          252: 75,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WHERE */
          253: 'WHERE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WHILE */
          254: 97,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WITH */
          255: 142,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       WORK */
          256: 'WORK',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       XOR */
          257: 'XOR',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BOOL */
          259: 159,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CHARACTER */
          260: 146,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CLOB */
          261: 156,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       BLOB */
          262: 155,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CONSTRUCTOR */
          263: 224,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       CONTINUE */
          264: 110,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       DEBUG */
          265: 44,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       EXTERNAL */
          266: 82,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       FINAL */
          267: 211,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INSTANTIABLE */
          269: 212,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       INT */
          270: 171,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       LANGUAGE */
          271: 83,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MAP */
          272: 225,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       MEMBER */
          273: 219,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NATURALN */
          274: 164,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NOCOPY */
          275: 81,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       NUMERIC */
          276: 172,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       OVERRIDING */
          277: 213,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       PLS_INTEGER */
          278: 161,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       POSITIVEN */
          279: 166,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       RAW */
          280: 148,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       REUSE */
          281: 46,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SELF */
          282: 221,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SIGNTYPE */
          283: 167,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       SIMPLE_INTEGER */
          284: 168,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       STATIC */
          285: 220,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       TIMESTAMP */
          286: 141,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       << */
          287: 107,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       >> */
          288: 108,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       := */
          289: 84,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       => */
          291: 13,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       {int_num} */
          292: 123,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+E[-+]?[0-9]+F|[0-9]+\.[0-9]*E[-+]?[0-9]+F|\.[0-9]+E[-+]?[0-9]+F) */
          293: 181,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+E[-+]?[0-9]+D|[0-9]+\.[0-9]*E[-+]?[0-9]+D|\.[0-9]+E[-+]?[0-9]+D) */
          294: 181,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+E[-+]?[0-9]+|[0-9]+\.[0-9]*E[-+]?[0-9]+|\.[0-9]+E[-+]?[0-9]+) */
          295: 181,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+\.[0-9]*F|[0-9]+F|\.[0-9]+F) */
          296: 181,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+\.[0-9]*D|[0-9]+D|\.[0-9]+D) */
          297: 181,
    
          /*! Conditions:: INITIAL */
          /*! Rule::       ([0-9]+\.[0-9]*|\.[0-9]+) */
          298: 181,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       '([^']|('')|\\')*' */
          299: 116,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       "([^"]|(""))*" */
          300: 27,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Date{whitespace}?'[^']*' */
          301: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Time{whitespace}?'[^']*' */
          302: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Timestamp{whitespace}?'[^']*' */
          303: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Date{whitespace}?"[^\"]*" */
          304: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Time{whitespace}?"[^\"]*" */
          305: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       Timestamp{whitespace}?"[^\"]*" */
          306: 'DATE_VALUE',
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       `[^`]*` */
          307: 27,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       [:]?{identifier} */
          310: 27,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       ; */
          311: 12,
    
          /*! Conditions:: in_range_operator INITIAL */
          /*! Rule::       $ */
          315: 11
        },
    
        rules: [
          /*   0: */  /^(?:ZONE)/i,
          /*   1: */  /^(?:VARIABLE)/i,
          /*   2: */  /^(?:VARRAY)/i,
          /*   3: */  /^(?:VARYING)/i,
          /*   4: */  /^(?:WNDS)/i,
          /*   5: */  /^(?:WNPS)/i,
          /*   6: */  /^(?:YEAR)/i,
          /*   7: */  /^(?:YES)/i,
          /*   8: */  /^(?:UNDER)/i,
          /*   9: */  /^(?:USING)/i,
          /*  10: */  /^(?:VALIDATE)/i,
          /*  11: */  /^(?:TRUST)/i,
          /*  12: */  /^(?:TIME)/i,
          /*  13: */  /^(?:SQLDATA)/i,
          /*  14: */  /^(?:SETTINGS)/i,
          /*  15: */  /^(?:SPECIFICATION)/i,
          /*  16: */  /^(?:RNDS)/i,
          /*  17: */  /^(?:RNPS)/i,
          /*  18: */  /^(?:SAVE)/i,
          /*  19: */  /^(?:RELIES_ON)/i,
          /*  20: */  /^(?:RESULT)/i,
          /*  21: */  /^(?:RESULT_CACHE)/i,
          /*  22: */  /^(?:PARALLEL_ENABLE)/i,
          /*  23: */  /^(?:PIPELINED)/i,
          /*  24: */  /^(?:NAME)/i,
          /*  25: */  /^(?:NONEDITIONABLE)/i,
          /*  26: */  /^(?:OBJECT)/i,
          /*  27: */  /^(?:OID)/i,
          /*  28: */  /^(?:ORADATA)/i,
          /*  29: */  /^(?:LOCAL)/i,
          /*  30: */  /^(?:LONG)/i,
          /*  31: */  /^(?:LIMIT)/i,
          /*  32: */  /^(?:JAVA)/i,
          /*  33: */  /^(?:INLINE)/i,
          /*  34: */  /^(?:IMMEDIATE)/i,
          /*  35: */  /^(?:HASH)/i,
          /*  36: */  /^(?:FORCE)/i,
          /*  37: */  /^(?:EXECUTE)/i,
          /*  38: */  /^(?:EDITIONABLE)/i,
          /*  39: */  /^(?:DETERMINISTIC)/i,
          /*  40: */  /^(?:DEFINER)/i,
          /*  41: */  /^(?:CUSTOMDATUM)/i,
          /*  42: */  /^(?:ACCESSIBLE)/i,
          /*  43: */  /^(?:ABORT)/i,
          /*  44: */  /^(?:ACCEPT)/i,
          /*  45: */  /^(?:ACCESS)/i,
          /*  46: */  /^(?:ADD)/i,
          /*  47: */  /^(?:AUTHID)/i,
          /*  48: */  /^(?:ALL)/i,
          /*  49: */  /^(?:ALTER)/i,
          /*  50: */  /^(?:AND)/i,
          /*  51: */  /^(?:ANY)/i,
          /*  52: */  /^(?:ARRAY)/i,
          /*  53: */  /^(?:ARRAYLEN)/i,
          /*  54: */  /^(?:AS)/i,
          /*  55: */  /^(?:ASC)/i,
          /*  56: */  /^(?:ASSERT)/i,
          /*  57: */  /^(?:ASSIGN)/i,
          /*  58: */  /^(?:AT)/i,
          /*  59: */  /^(?:AUTHORIZATION)/i,
          /*  60: */  /^(?:AVG)/i,
          /*  61: */  /^(?:BASE_TABLE)/i,
          /*  62: */  /^(?:BEGIN)/i,
          /*  63: */  /^(?:BETWEEN)/i,
          /*  64: */  /^(?:BINARY_INTEGER)/i,
          /*  65: */  /^(?:BODY)/i,
          /*  66: */  /^(?:BOOLEAN)/i,
          /*  67: */  /^(?:BYTE)/i,
          /*  68: */  /^(?:BY)/i,
          /*  69: */  /^(?:BULK)/i,
          /*  70: */  /^(?:BINARY_DOUBLE)/i,
          /*  71: */  /^(?:BINARY_FLOAT)/i,
          /*  72: */  /^(?:SIMPLE_DOUBLE)/i,
          /*  73: */  /^(?:SIMPLE_FLOAT)/i,
          /*  74: */  /^(?:C)/i,
          /*  75: */  /^(?:CALL)/i,
          /*  76: */  /^(?:CASE)/i,
          /*  77: */  /^(?:CHAR)/i,
          /*  78: */  /^(?:CHAR_BASE)/i,
          /*  79: */  /^(?:CHARSET)/i,
          /*  80: */  /^(?:CHECK)/i,
          /*  81: */  /^(?:CLOSE)/i,
          /*  82: */  /^(?:CLUSTER)/i,
          /*  83: */  /^(?:COLLATE)/i,
          /*  84: */  /^(?:COLLECT)/i,
          /*  85: */  /^(?:COMPILE)/i,
          /*  86: */  /^(?:CLUSTERS)/i,
          /*  87: */  /^(?:COLAUTH)/i,
          /*  88: */  /^(?:COLUMNS)/i,
          /*  89: */  /^(?:COMMIT)/i,
          /*  90: */  /^(?:COMPRESS)/i,
          /*  91: */  /^(?:CONNECT)/i,
          /*  92: */  /^(?:CONSTANT)/i,
          /*  93: */  /^(?:COUNT)/i,
          /*  94: */  /^(?:CURRENT_USER)/i,
          /*  95: */  /^(?:CRASH)/i,
          /*  96: */  /^(?:CREATE)/i,
          /*  97: */  /^(?:CURRENT)/i,
          /*  98: */  /^(?:CURRVAL)/i,
          /*  99: */  /^(?:CURSOR)/i,
          /* 100: */  /^(?:DATABASE)/i,
          /* 101: */  /^(?:DATA_BASE)/i,
          /* 102: */  /^(?:DATE)/i,
          /* 103: */  /^(?:DBA)/i,
          /* 104: */  /^(?:DEBUGOFF)/i,
          /* 105: */  /^(?:DEBUGON)/i,
          /* 106: */  /^(?:DECIMAL)/i,
          /* 107: */  /^(?:DECLARE)/i,
          /* 108: */  /^(?:DEFAULT)/i,
          /* 109: */  /^(?:DEFINITION)/i,
          /* 110: */  /^(?:DELAY)/i,
          /* 111: */  /^(?:DELETE)/i,
          /* 112: */  /^(?:DELTA)/i,
          /* 113: */  /^(?:DESC)/i,
          /* 114: */  /^(?:DIGITS)/i,
          /* 115: */  /^(?:DISPOSE)/i,
          /* 116: */  /^(?:DISTINCT)/i,
          /* 117: */  /^(?:DO)/i,
          /* 118: */  /^(?:DROP)/i,
          /* 119: */  /^(?:ELSE)/i,
          /* 120: */  /^(?:ELSIF)/i,
          /* 121: */  /^(?:END)/i,
          /* 122: */  /^(?:ENTRY)/i,
          /* 123: */  /^(?:EXCEPTION)/i,
          /* 124: */  /^(?:EXCEPTIONS)/i,
          /* 125: */  /^(?:EXCEPTION_INIT)/i,
          /* 126: */  /^(?:EXISTS)/i,
          /* 127: */  /^(?:EXIT)/i,
          /* 128: */  /^(?:FALSE)/i,
          /* 129: */  /^(?:FETCH)/i,
          /* 130: */  /^(?:FLOAT)/i,
          /* 131: */  /^(?:FOR)/i,
          /* 132: */  /^(?:FORM)/i,
          /* 133: */  /^(?:FROM)/i,
          /* 134: */  /^(?:FUNCTION)/i,
          /* 135: */  /^(?:GENERIC)/i,
          /* 136: */  /^(?:GOTO)/i,
          /* 137: */  /^(?:GRANT)/i,
          /* 138: */  /^(?:GROUP)/i,
          /* 139: */  /^(?:HAVING)/i,
          /* 140: */  /^(?:IDENTIFIED)/i,
          /* 141: */  /^(?:IF)/i,
          /* 142: */  /^(?:IN)/i,
          /* 143: */  /^(?:INDEX)/i,
          /* 144: */  /^(?:INDEXES)/i,
          /* 145: */  /^(?:INDICATOR)/i,
          /* 146: */  /^(?:INSERT)/i,
          /* 147: */  /^(?:INTEGER)/i,
          /* 148: */  /^(?:INTERFACE)/i,
          /* 149: */  /^(?:INTERSECT)/i,
          /* 150: */  /^(?:INTERVAL)/i,
          /* 151: */  /^(?:INTO)/i,
          /* 152: */  /^(?:IS)/i,
          /* 153: */  /^(?:LEVEL)/i,
          /* 154: */  /^(?:LIKE)/i,
          /* 155: */  /^(?:LIMITED)/i,
          /* 156: */  /^(?:LOOP)/i,
          /* 157: */  /^(?:MAX)/i,
          /* 158: */  /^(?:MIN)/i,
          /* 159: */  /^(?:MINUS)/i,
          /* 160: */  /^(?:MLSLABEL)/i,
          /* 161: */  /^(?:MOD)/i,
          /* 162: */  /^(?:MODE)/i,
          /* 163: */  /^(?:NATURAL)/i,
          /* 164: */  /^(?:NCHAR)/i,
          /* 165: */  /^(?:NVARCHAR)/i,
          /* 166: */  /^(?:NVARCHAR2)/i,
          /* 167: */  /^(?:NEW)/i,
          /* 168: */  /^(?:NEXTVAL)/i,
          /* 169: */  /^(?:NOCOMPRESS)/i,
          /* 170: */  /^(?:NO)/i,
          /* 171: */  /^(?:NOT)/i,
          /* 172: */  /^(?:NULL)/i,
          /* 173: */  /^(?:NUMBER)/i,
          /* 174: */  /^(?:NUMBER_BASE)/i,
          /* 175: */  /^(?:OF)/i,
          /* 176: */  /^(?:OLD)/i,
          /* 177: */  /^(?:ON)/i,
          /* 178: */  /^(?:OPEN)/i,
          /* 179: */  /^(?:OPTION)/i,
          /* 180: */  /^(?:OR)/i,
          /* 181: */  /^(?:ORDER)/i,
          /* 182: */  /^(?:OTHERS)/i,
          /* 183: */  /^(?:OUT)/i,
          /* 184: */  /^(?:PACKAGE)/i,
          /* 185: */  /^(?:PARENT)/i,
          /* 186: */  /^(?:PARTITION)/i,
          /* 187: */  /^(?:PCTFREE)/i,
          /* 188: */  /^(?:POSITIVE)/i,
          /* 189: */  /^(?:PRAGMA)/i,
          /* 190: */  /^(?:PRIOR)/i,
          /* 191: */  /^(?:PRIVATE)/i,
          /* 192: */  /^(?:PROCEDURE)/i,
          /* 193: */  /^(?:PUBLIC)/i,
          /* 194: */  /^(?:RAISE)/i,
          /* 195: */  /^(?:RANGE)/i,
          /* 196: */  /^(?:REPLACE)/i,
          /* 197: */  /^(?:REAL)/i,
          /* 198: */  /^(?:RECORD)/i,
          /* 199: */  /^(?:REFERENCING)/i,
          /* 200: */  /^(?:REF)/i,
          /* 201: */  /^(?:RELEASE)/i,
          /* 202: */  /^(?:REMR)/i,
          /* 203: */  /^(?:RENAME)/i,
          /* 204: */  /^(?:RESOURCE)/i,
          /* 205: */  /^(?:RETURN)/i,
          /* 206: */  /^(?:REVERSE)/i,
          /* 207: */  /^(?:REVOKE)/i,
          /* 208: */  /^(?:ROLLBACK)/i,
          /* 209: */  /^(?:ROWID)/i,
          /* 210: */  /^(?:ROWLABEL)/i,
          /* 211: */  /^(?:ROWNUM)/i,
          /* 212: */  /^(?:ROWTYPE)/i,
          /* 213: */  /^(?:RUN)/i,
          /* 214: */  /^(?:SAVEPOINT)/i,
          /* 215: */  /^(?:SCHEMA)/i,
          /* 216: */  /^(?:SELECT)/i,
          /* 217: */  /^(?:SEPARATE)/i,
          /* 218: */  /^(?:SET)/i,
          /* 219: */  /^(?:SIZE)/i,
          /* 220: */  /^(?:SMALLINT)/i,
          /* 221: */  /^(?:SPACE)/i,
          /* 222: */  /^(?:SQL)/i,
          /* 223: */  /^(?:SQLCODE)/i,
          /* 224: */  /^(?:SQLERRM)/i,
          /* 225: */  /^(?:START)/i,
          /* 226: */  /^(?:STATEMENT)/i,
          /* 227: */  /^(?:STDDEV)/i,
          /* 228: */  /^(?:SUBTYPE)/i,
          /* 229: */  /^(?:SUM)/i,
          /* 230: */  /^(?:TABAUTH)/i,
          /* 231: */  /^(?:TABLE)/i,
          /* 232: */  /^(?:TABLES)/i,
          /* 233: */  /^(?:TASK)/i,
          /* 234: */  /^(?:TERMINATE)/i,
          /* 235: */  /^(?:THEN)/i,
          /* 236: */  /^(?:TO)/i,
          /* 237: */  /^(?:TRIGGER)/i,
          /* 238: */  /^(?:TRUE)/i,
          /* 239: */  /^(?:TYPE)/i,
          /* 240: */  /^(?:UNION)/i,
          /* 241: */  /^(?:UNIQUE)/i,
          /* 242: */  /^(?:UPDATE)/i,
          /* 243: */  /^(?:USE)/i,
          /* 244: */  /^(?:USING_NLS_COMP)/i,
          /* 245: */  /^(?:VALUES)/i,
          /* 246: */  /^(?:VALUE)/i,
          /* 247: */  /^(?:VARCHAR)/i,
          /* 248: */  /^(?:VARCHAR2)/i,
          /* 249: */  /^(?:VARIANCE)/i,
          /* 250: */  /^(?:VIEW)/i,
          /* 251: */  /^(?:VIEWS)/i,
          /* 252: */  /^(?:WHEN)/i,
          /* 253: */  /^(?:WHERE)/i,
          /* 254: */  /^(?:WHILE)/i,
          /* 255: */  /^(?:WITH)/i,
          /* 256: */  /^(?:WORK)/i,
          /* 257: */  /^(?:XOR)/i,
          /* 258: */  /^(?:BINARY)/i,
          /* 259: */  /^(?:BOOL)/i,
          /* 260: */  /^(?:CHARACTER)/i,
          /* 261: */  /^(?:CLOB)/i,
          /* 262: */  /^(?:BLOB)/i,
          /* 263: */  /^(?:CONSTRUCTOR)/i,
          /* 264: */  /^(?:CONTINUE)/i,
          /* 265: */  /^(?:DEBUG)/i,
          /* 266: */  /^(?:EXTERNAL)/i,
          /* 267: */  /^(?:FINAL)/i,
          /* 268: */  /^(?:FORALL)/i,
          /* 269: */  /^(?:INSTANTIABLE)/i,
          /* 270: */  /^(?:INT)/i,
          /* 271: */  /^(?:LANGUAGE)/i,
          /* 272: */  /^(?:MAP)/i,
          /* 273: */  /^(?:MEMBER)/i,
          /* 274: */  /^(?:NATURALN)/i,
          /* 275: */  /^(?:NOCOPY)/i,
          /* 276: */  /^(?:NUMERIC)/i,
          /* 277: */  /^(?:OVERRIDING)/i,
          /* 278: */  /^(?:PLS_INTEGER)/i,
          /* 279: */  /^(?:POSITIVEN)/i,
          /* 280: */  /^(?:RAW)/i,
          /* 281: */  /^(?:REUSE)/i,
          /* 282: */  /^(?:SELF)/i,
          /* 283: */  /^(?:SIGNTYPE)/i,
          /* 284: */  /^(?:SIMPLE_INTEGER)/i,
          /* 285: */  /^(?:STATIC)/i,
          /* 286: */  /^(?:TIMESTAMP)/i,
          /* 287: */  /^(?:<<)/i,
          /* 288: */  /^(?:>>)/i,
          /* 289: */  /^(?::=)/i,
          /* 290: */  /^(?:\.\.)/i,
          /* 291: */  /^(?:=>)/i,
          /* 292: */  /^(?:(\d+))/i,
          /* 293: */  /^(?:(\d+E[-+]?\d+F|\d+\.\d*E[-+]?\d+F|\.\d+E[-+]?\d+F))/i,
          /* 294: */  /^(?:(\d+E[-+]?\d+D|\d+\.\d*E[-+]?\d+D|\.\d+E[-+]?\d+D))/i,
          /* 295: */  /^(?:(\d+E[-+]?\d+|\d+\.\d*E[-+]?\d+|\.\d+E[-+]?\d+))/i,
          /* 296: */  /^(?:(\d+\.\d*F|\d+F|\.\d+F))/i,
          /* 297: */  /^(?:(\d+\.\d*D|\d+D|\.\d+D))/i,
          /* 298: */  /^(?:(\d+\.\d*|\.\d+))/i,
          /* 299: */  /^(?:'([^']|('')|\\')*')/i,
          /* 300: */  /^(?:"([^"]|(""))*")/i,
          /* 301: */  /^(?:Date(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?'[^']*')/i,
          /* 302: */  /^(?:Time(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?'[^']*')/i,
          /* 303: */  /^(?:Timestamp(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?'[^']*')/i,
          /* 304: */  /^(?:Date(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?"[^"]*")/i,
          /* 305: */  /^(?:Time(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?"[^"]*")/i,
          /* 306: */  /^(?:Timestamp(((?:[\t\n\f\r ])+|(?:(--(?:[^\n\r])*))))?"[^"]*")/i,
          /* 307: */  /^(?:`[^`]*`)/i,
          /* 308: */  /^(?:(\/\*)[\S\s]*?(\*+\/))/i,
          /* 309: */  /^(?:((--(?:[^\n\r])*)))/i,
          /* 310: */  /^(?:[:]?((([A-Za-z]|(?:((?:[Â-ß])(?:[-¿])|(?:[à-ï])(?:[-¿])(?:[-¿])|(?:[ð-ô])(?:[-¿])(?:[-¿])(?:[-¿]))))([\w#$]|(?:((?:[Â-ß])(?:[-¿])|(?:[à-ï])(?:[-¿])(?:[-¿])|(?:[ð-ô])(?:[-¿])(?:[-¿])(?:[-¿]))))*)))/i,
          /* 311: */  /^(?:;)/i,
          /* 312: */  /^(?:[!%&(-/:;\^|~])/i,
          /* 313: */  /^(?:[ \t\r\n])/i,
          /* 314: */  /^(?:--[ \t].*)/i,
          /* 315: */  /^(?:$)/i,
          /* 316: */  /^(?:.)/i,
          /* 317: */  /^(?:.)/i
        ],
    
        conditions: {
          'in_c_comment': {
            rules: [],
            inclusive: false
          },
    
          'in_range_operator': {
            rules: [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317
            ],
    
            inclusive: true
          },
    
          'INITIAL': {
            rules: [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              274,
              275,
              276,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317
            ],
    
            inclusive: true
          }
        }
      };
    
      return lexer;
    }();
    parser.lexer = lexer;
    
    function lookupForward(yyval, yylexer, stopTokens, firstLocation) {
    stopTokens = stopTokens.map(a => a.toLowerCase());
    let fl, ll;
    let lp = 0, rp = 0;
    yyval.yy.sqlStmt = yyval.yy.sqlStmt || [];
    const sqlStmt = yyval.yy.sqlStmt;
    if (firstLocation) {
      fl = firstLocation;
    }
      while(1) {
       yylexer.lex();
        if (!fl) {
          fl = {...yylexer.yylloc}
        }
        ll = {...yylexer.yylloc};
        const text = yylexer.yytext;
        if (stopTokens.includes(text.toLowerCase()) && lp === rp){
          yylexer.unput(text);
          ll = {...yylexer.yylloc};
          yyval.$ = yylexer.matched.substring(fl.range[0], ll.range[1]);
          yyval._$ = {
            first_line: fl.first_line,
            last_line: ll.last_line,
            first_column: fl.first_column,
            last_column: ll.last_column,
            range: [fl.range[0], ll.range[1]]
          }
          sqlStmt.push({
            begin: fl,
            end: ll
          })
          return;
        } else if (yylexer.done) {
            sqlStmt.push({
            begin: fl,
            end: ll
          })
          break;
        } else {
          switch (text) {
            case '(': {
              lp++;
              break;
            }
            case ')': {
              rp++;
              break;
            }
          }
        }
      }
    }
    
    function Parser() {
      this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    
    return new Parser();
    })();
    
            
    
    
    if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
      exports.parser = oraclePL;
      exports.Parser = oraclePL.Parser;
      exports.parse = function () {
        return oraclePL.parse.apply(oraclePL, arguments);
      };
      
    }
    